{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Col, Form, Upload } from \"antd\";\nimport { t } from \"i18next\";\nfunction MyUploadFile(_ref) {\n  _s();\n  let {\n    label,\n    name,\n    rules,\n    maxFile,\n    children,\n    colwidth,\n    messageError,\n    disabled,\n    allowFiles,\n    allowFileWindow,\n    beforeUpload,\n    setDataCSV,\n    processData,\n    length = 1,\n    accept,\n    defaultFileList\n  } = _ref;\n  const [fileList, setFileList] = useState([]);\n  const handleChange = _ref2 => {\n    let {\n      fileList: newFileList\n    } = _ref2;\n    const resultFileList = newFileList.filter(item => item === null || item === void 0 ? void 0 : item.originFileObj);\n    setFileList(resultFileList);\n    if (setDataCSV) {\n      setDataCSV(resultFileList);\n    }\n  };\n  return /*#__PURE__*/React.createElement(Col, {\n    xs: colwidth || 24\n  }, /*#__PURE__*/React.createElement(Form.Item, {\n    label: label,\n    name: name,\n    rules: rules\n  }, /*#__PURE__*/React.createElement(Upload, {\n    maxCount: maxFile,\n    beforeUpload: file => beforeUpload(t, file, messageError, allowFiles, allowFileWindow),\n    disabled: disabled,\n    accept: accept || \".csv\",\n    onChange: handleChange,\n    defaultFileList: defaultFileList || []\n  }, fileList.length >= length ? null : children)));\n}\n_s(MyUploadFile, \"DPlwTHyoomOmUEJyEefg5NxYD/w=\");\n_c = MyUploadFile;\nMyUploadFile.propTypes = {\n  label: PropTypes.string,\n  name: PropTypes.string,\n  messageError: PropTypes.string,\n  rules: PropTypes.array,\n  allowFiles: PropTypes.array,\n  allowFileWindow: PropTypes.array,\n  maxFile: PropTypes.number,\n  colwidth: PropTypes.number,\n  children: PropTypes.object,\n  disabled: PropTypes.bool,\n  beforeUpload: PropTypes.func,\n  length: PropTypes.number,\n  setDataCSV: PropTypes.func,\n  processData: PropTypes.func,\n  accept: PropTypes.string,\n  defaultFileList: PropTypes.array\n};\nexport default MyUploadFile;\nvar _c;\n$RefreshReg$(_c, \"MyUploadFile\");","map":{"version":3,"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,SAAS,MAAM,YAAY;AAClC,SAASC,GAAG,EAAEC,IAAI,EAAEC,MAAM,QAAQ,MAAM;AACxC,SAASC,CAAC,QAAQ,SAAS;AAE3B,SAASC,YAAY,OAiBlB;EAAA;EAAA,IAjBmB;IACpBC,KAAK;IACLC,IAAI;IACJC,KAAK;IACLC,OAAO;IACPC,QAAQ;IACRC,QAAQ;IACRC,YAAY;IACZC,QAAQ;IACRC,UAAU;IACVC,eAAe;IACfC,YAAY;IACZC,UAAU;IACVC,WAAW;IACXC,MAAM,GAAG,CAAC;IACVC,MAAM;IACNC;EACF,CAAC;EACC,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGxB,QAAQ,CAAC,EAAE,CAAC;EAE5C,MAAMyB,YAAY,GAAGC,SAA+B;IAAA,IAA9B;MAAEH,QAAQ,EAAEI;IAAY,CAAC;IAC7C,MAAMC,cAAc,GAAGD,WAAW,CAACE,MAAM,CAAEC,IAAI,IAAKA,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEC,aAAa,CAAC;IACxEP,WAAW,CAACI,cAAc,CAAC;IAC3B,IAAIV,UAAU,EAAE;MACdA,UAAU,CAACU,cAAc,CAAC;IAC5B;EACF,CAAC;EAED,oBACE7B,oBAACG,GAAG;IAAC8B,EAAE,EAAEpB,QAAQ,IAAI;EAAG,gBACtBb,oBAACI,IAAI,CAAC8B,IAAI;IAAC1B,KAAK,EAAEA,KAAM;IAACC,IAAI,EAAEA,IAAK;IAACC,KAAK,EAAEA;EAAM,gBAChDV,oBAACK,MAAM;IACL8B,QAAQ,EAAExB,OAAQ;IAClBO,YAAY,EAAGkB,IAAI,IACjBlB,YAAY,CAACZ,CAAC,EAAE8B,IAAI,EAAEtB,YAAY,EAAEE,UAAU,EAAEC,eAAe,CAChE;IACDF,QAAQ,EAAEA,QAAS;IACnBO,MAAM,EAAEA,MAAM,IAAI,MAAO;IACzBe,QAAQ,EAAEX,YAAa;IACvBH,eAAe,EAAEA,eAAe,IAAI;EAAG,GAEtCC,QAAQ,CAACH,MAAM,IAAIA,MAAM,GAAG,IAAI,GAAGT,QAAQ,CACrC,CACC,CACR;AAEV;AAAA,GA9CSL,YAAY;AAAA,KAAZA,YAAY;AAgDrBA,YAAY,CAAC+B,SAAS,GAAG;EACvB9B,KAAK,EAAEN,SAAS,CAACqC,MAAM;EACvB9B,IAAI,EAAEP,SAAS,CAACqC,MAAM;EACtBzB,YAAY,EAAEZ,SAAS,CAACqC,MAAM;EAC9B7B,KAAK,EAAER,SAAS,CAACsC,KAAK;EACtBxB,UAAU,EAAEd,SAAS,CAACsC,KAAK;EAC3BvB,eAAe,EAAEf,SAAS,CAACsC,KAAK;EAChC7B,OAAO,EAAET,SAAS,CAACuC,MAAM;EACzB5B,QAAQ,EAAEX,SAAS,CAACuC,MAAM;EAC1B7B,QAAQ,EAAEV,SAAS,CAACwC,MAAM;EAC1B3B,QAAQ,EAAEb,SAAS,CAACyC,IAAI;EACxBzB,YAAY,EAAEhB,SAAS,CAAC0C,IAAI;EAC5BvB,MAAM,EAAEnB,SAAS,CAACuC,MAAM;EACxBtB,UAAU,EAAEjB,SAAS,CAAC0C,IAAI;EAC1BxB,WAAW,EAAElB,SAAS,CAAC0C,IAAI;EAC3BtB,MAAM,EAAEpB,SAAS,CAACqC,MAAM;EACxBhB,eAAe,EAAErB,SAAS,CAACsC;AAC7B,CAAC;AAED,eAAejC,YAAY;AAAA;AAAA","names":["React","useState","PropTypes","Col","Form","Upload","t","MyUploadFile","label","name","rules","maxFile","children","colwidth","messageError","disabled","allowFiles","allowFileWindow","beforeUpload","setDataCSV","processData","length","accept","defaultFileList","fileList","setFileList","handleChange","_ref2","newFileList","resultFileList","filter","item","originFileObj","xs","Item","maxCount","file","onChange","propTypes","string","array","number","object","bool","func"],"sources":["/home/huynd/animalwatch_admin/src/components/form/MyUploadFile.jsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Col, Form, Upload } from \"antd\";\nimport { t } from \"i18next\";\n\nfunction MyUploadFile({\n  label,\n  name,\n  rules,\n  maxFile,\n  children,\n  colwidth,\n  messageError,\n  disabled,\n  allowFiles,\n  allowFileWindow,\n  beforeUpload,\n  setDataCSV,\n  processData,\n  length = 1,\n  accept,\n  defaultFileList,\n}) {\n  const [fileList, setFileList] = useState([]);\n\n  const handleChange = ({ fileList: newFileList }) => {\n    const resultFileList = newFileList.filter((item) => item?.originFileObj);\n    setFileList(resultFileList);\n    if (setDataCSV) {\n      setDataCSV(resultFileList);\n    }\n  };\n\n  return (\n    <Col xs={colwidth || 24}>\n      <Form.Item label={label} name={name} rules={rules}>\n        <Upload\n          maxCount={maxFile}\n          beforeUpload={(file) =>\n            beforeUpload(t, file, messageError, allowFiles, allowFileWindow)\n          }\n          disabled={disabled}\n          accept={accept || \".csv\"}\n          onChange={handleChange}\n          defaultFileList={defaultFileList || []}\n        >\n          {fileList.length >= length ? null : children}\n        </Upload>\n      </Form.Item>\n    </Col>\n  );\n}\n\nMyUploadFile.propTypes = {\n  label: PropTypes.string,\n  name: PropTypes.string,\n  messageError: PropTypes.string,\n  rules: PropTypes.array,\n  allowFiles: PropTypes.array,\n  allowFileWindow: PropTypes.array,\n  maxFile: PropTypes.number,\n  colwidth: PropTypes.number,\n  children: PropTypes.object,\n  disabled: PropTypes.bool,\n  beforeUpload: PropTypes.func,\n  length: PropTypes.number,\n  setDataCSV: PropTypes.func,\n  processData: PropTypes.func,\n  accept: PropTypes.string,\n  defaultFileList: PropTypes.array,\n};\n\nexport default MyUploadFile;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}