{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useForm } from \"antd/es/form/Form\";\nimport { useTranslation } from \"react-i18next\";\nimport { Button, Card, Form, message, Row } from \"antd\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport isJSON from \"@common/utils/checkJson\";\nimport PATH_URL from \"@common/config/pathURL\";\nimport listOptionLevel from \"@common/constant/course\";\nimport { COLDEF, COL_HAFT, TYPE_FIELD } from \"@common/constant/form\";\nimport { appendFormData } from \"@common/utils/appendFormData\";\nimport { renderFieldForm } from \"@common/utils/renderFieldForm\";\nimport { courseApi } from \"@services/apis/course\";\nimport { validate } from \"@validate/index\";\nimport { IMAGE_URL } from \"@common/config/endpoint\";\nimport { levelApi } from \"@services/apis/level\";\nimport { checkBeforeUploadFile } from \"@validate/validate\";\nimport { UploadOutlined } from \"@ant-design/icons\";\nfunction CourseForm() {\n  _s();\n  const {\n    t\n  } = useTranslation();\n  const [form] = useForm();\n  const {\n    state\n  } = useLocation();\n  const isDetailMode = (state === null || state === void 0 ? void 0 : state.mode) === \"DETAIL\";\n  const initialValues = {\n    ...state,\n    map: JSON.stringify(state === null || state === void 0 ? void 0 : state.map),\n    level: state === null || state === void 0 ? void 0 : state.levelId,\n    fileMap: state === null || state === void 0 ? void 0 : state.fileName\n  };\n  const navigate = useNavigate();\n  const handleCancel = () => {\n    navigate(PATH_URL.MANAGER_COURSE.INDEX);\n  };\n  const [addedArr, setAddedArr] = useState([]);\n  const [deletedArr, setDeletedArr] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [isFile, setIsFile] = useState(\"\");\n  const [isHiddenChart, setIsHiddenChart] = useState(!(state !== null && state !== void 0 && state.isShowChart) || false);\n  const [listDeletedId, setListDeletedId] = useState([]);\n  const handleGetLevel = async params => {\n    const response = await levelApi.getLevels(params);\n    return response.data;\n  };\n  const dataFormCourse = [{\n    colwidth: COLDEF,\n    type: TYPE_FIELD.INPUT,\n    disabled: isDetailMode,\n    name: \"title\",\n    maxLength: 50,\n    label: t(\"managementCourses.form.title\"),\n    rules: [{\n      required: true,\n      message: \"\"\n    }, {\n      max: 50,\n      message: t(\"validate.maxCharacter\", {\n        number: 50\n      })\n    }, validate.empty(t(\"managementCourses.validate.notEmpty\", {\n      fieldName: t(\"managementCourses.form.title\")\n    }))]\n  }, {\n    type: TYPE_FIELD.TEXT_AREA,\n    disabled: isDetailMode,\n    name: \"description\",\n    label: t(\"managementCourses.form.description\"),\n    rules: [{\n      required: true,\n      message: \"\"\n    }, validate.empty(t(\"managementCourses.validate.notEmpty\", {\n      fieldName: t(\"managementCourses.form.description\")\n    }))]\n  }, {\n    type: TYPE_FIELD.SELECT_SCROLL_LOADING,\n    name: \"level\",\n    colwidth: COL_HAFT,\n    label: t(\"managementCourses.form.level\"),\n    setListDeletedId,\n    listDeletedId,\n    fetchData: handleGetLevel,\n    listInitialId: [state === null || state === void 0 ? void 0 : state.levelId],\n    returnOption: item => ({\n      key: item === null || item === void 0 ? void 0 : item.id,\n      label: item === null || item === void 0 ? void 0 : item.name,\n      value: item === null || item === void 0 ? void 0 : item.id\n    }),\n    rules: [{\n      required: true,\n      message: \"\"\n    }, validate.empty(t(\"managementCourses.validate.notEmpty\", {\n      fieldName: t(\"managementCourses.form.level\")\n    }))]\n  }, {\n    colwidth: 12,\n    type: TYPE_FIELD.INPUT,\n    disabled: isDetailMode,\n    name: \"maxHeight\",\n    label: t(\"managementCourses.form.maxHeight\"),\n    onChange: evt => validate.numberPreventInput(evt.target.value, form, \"maxHeight\"),\n    rules: [{\n      required: true,\n      message: \"\"\n    }, validate.empty(t(\"managementCourses.validate.notEmpty\", {\n      fieldName: t(\"managementCourses.form.maxHeight\")\n    }))]\n  },\n  // {\n  //   type: TYPE_FIELD.TEXT_AREA,\n  //   disabled: isDetailMode || isFile === \"file\",\n  //   name: \"map\",\n  //   label: t(\"managementCourses.form.map\"),\n  //   rules: [\n  //     {\n  //       required: !isFile || isFile === \"area\",\n  //     },\n  //   ],\n  // },\n  {\n    type: TYPE_FIELD.UPLOAD_FIELD,\n    disabled: isDetailMode || isFile === \"area\",\n    maxFile: 1,\n    name: \"fileMap\",\n    label: t(\"managementCourses.form.fileMap\"),\n    // messageError: t(\"managementCourses.validate.fileMapValidate\"),\n    rules: [{\n      required: true,\n      message: \"\"\n    }, validate.emptyImg(t(\"managementCourses.validate.notEmpty\", {\n      fieldName: t(\"managementCourses.form.fileMap\")\n    }))],\n    // allowFiles: [\"application/geo+json\", \"application/json\"],\n    allowFileWindow: [\"geojson\", \"gpx\"],\n    accept: \".gpx,.geojson\",\n    defaultFileList: state !== null && state !== void 0 && state.fileName ? [{\n      uid: 1,\n      name: state.fileName\n    }] : [],\n    children: /*#__PURE__*/React.createElement(Button, {\n      disabled: isFile === \"area\",\n      icon: /*#__PURE__*/React.createElement(UploadOutlined, null)\n    }, t(\"managementCourses.form.choseFileMap\")),\n    beforeUpload: checkBeforeUploadFile\n  }, {\n    colwidth: 12,\n    type: TYPE_FIELD.INPUT,\n    disabled: isDetailMode,\n    name: \"totalDistance\",\n    label: t(\"managementCourses.form.totalDistance\"),\n    onChange: evt => validate.numberPreventInput(evt.target.value, form, \"totalDistance\"),\n    rules: [{\n      required: true,\n      message: \"\"\n    }, validate.empty(t(\"managementCourses.validate.notEmpty\", {\n      fieldName: t(\"managementCourses.form.totalDistance\")\n    }))]\n  }, {\n    colwidth: 12,\n    type: TYPE_FIELD.INPUT,\n    disabled: isDetailMode,\n    name: \"slope\",\n    label: t(\"managementCourses.form.slope\"),\n    onChange: evt => validate.numberPreventInput(evt.target.value, form, \"slope\"),\n    rules: [{\n      required: true,\n      message: \"\"\n    }, validate.empty(t(\"managementCourses.validate.notEmpty\", {\n      fieldName: t(\"managementCourses.form.slope\")\n    }))]\n  }, {\n    colwidth: 12,\n    type: TYPE_FIELD.INPUT,\n    disabled: isDetailMode,\n    name: \"startLatitude\",\n    label: t(\"managementCourses.form.startLatitude\"),\n    onChange: evt => validate.coordinates(evt.target.value, form, \"startLatitude\", -90, 90),\n    rules: [{\n      required: true,\n      message: \"\"\n    }, validate.empty(t(\"managementCourses.validate.notEmpty\", {\n      fieldName: t(\"managementCourses.form.startLatitude\")\n    }))]\n  }, {\n    colwidth: 12,\n    type: TYPE_FIELD.INPUT,\n    disabled: isDetailMode,\n    name: \"startLongitude\",\n    label: t(\"managementCourses.form.startLongitude\"),\n    onChange: evt => validate.coordinates(evt.target.value, form, \"startLongitude\", -180, 180),\n    rules: [{\n      required: true,\n      message: \"\"\n    }, validate.empty(t(\"managementCourses.validate.notEmpty\", {\n      fieldName: t(\"managementCourses.form.startLongitude\")\n    }))]\n  }, {\n    colwidth: 12,\n    type: TYPE_FIELD.INPUT,\n    disabled: isDetailMode,\n    name: \"endLatitude\",\n    label: t(\"managementCourses.form.endLatitude\"),\n    onChange: evt => validate.coordinates(evt.target.value, form, \"endLatitude\", -90, 90),\n    rules: [{\n      required: true,\n      message: \"\"\n    }, validate.empty(t(\"managementCourses.validate.notEmpty\", {\n      fieldName: t(\"managementCourses.form.endLatitude\")\n    }))]\n  }, {\n    colwidth: 12,\n    type: TYPE_FIELD.INPUT,\n    disabled: isDetailMode,\n    name: \"endLongitude\",\n    label: t(\"managementCourses.form.endLongitude\"),\n    onChange: evt => validate.coordinates(evt.target.value, form, \"endLongitude\", -180, 180),\n    rules: [{\n      required: true,\n      message: \"\"\n    }, validate.empty(t(\"managementCourses.validate.notEmpty\", {\n      fieldName: t(\"managementCourses.form.endLongitude\")\n    }))]\n  }, {\n    type: TYPE_FIELD.TEXT_AREA,\n    disabled: isDetailMode,\n    name: \"review\",\n    maxLength: 200,\n    label: t(\"managementCourses.form.review\"),\n    rules: [{\n      max: 200,\n      message: t(\"validate.maxCharacter\", {\n        number: 200\n      })\n    }]\n  }, {\n    colwidth: COLDEF,\n    type: TYPE_FIELD.INPUT,\n    disabled: isDetailMode,\n    name: \"place\",\n    maxLength: 200,\n    label: t(\"managementCourses.form.place\"),\n    rules: [{\n      required: true,\n      message: \"\"\n    }, {\n      max: 200,\n      message: t(\"validate.maxCharacter\", {\n        number: 200\n      })\n    }, validate.empty(t(\"managementCourses.validate.notEmpty\", {\n      fieldName: t(\"managementCourses.form.place\")\n    }))]\n  }, {\n    type: TYPE_FIELD.UPLOAD,\n    disabled: isDetailMode,\n    name: \"images\",\n    label: t(\"managementCourses.form.images\"),\n    initialFileList: state ? state.images.map(item => {\n      return {\n        uid: item,\n        url: `${IMAGE_URL}${item}/original.jpg`\n      };\n    }) : [],\n    setAddedArr,\n    deletedArr,\n    setDeletedArr,\n    rules: [{\n      required: true,\n      message: \"\"\n    }, validate.emptyImg(t(\"managementCourses.validate.notEmpty\", {\n      fieldName: t(\"managementCourses.form.images\")\n    }))]\n  }, {\n    type: TYPE_FIELD.CHECKBOX,\n    name: \"isHiddenChart\",\n    label: t(\"managementCourses.form.hiddenChart\"),\n    checked: isHiddenChart,\n    setData: value => setIsHiddenChart(value)\n  }];\n  const handleValueChange = () => {\n    var _fileMap$fileList;\n    const {\n      map,\n      fileMap\n    } = form.getFieldsValue();\n    if (map) return setIsFile(\"area\");\n    if (fileMap !== null && fileMap !== void 0 && (_fileMap$fileList = fileMap.fileList) !== null && _fileMap$fileList !== void 0 && _fileMap$fileList.length) return setIsFile(\"file\");\n    return setIsFile(\"\");\n  };\n  const removeObjUndefined = obj => {\n    if (obj) {\n      Object.keys(obj).forEach(key => obj[key] === undefined || obj[key] === \"\" || obj[key] === null ? delete obj[key] : {});\n      return obj;\n    }\n    return {};\n  };\n  const handleFinish = async values => {\n    if (state) {\n      try {\n        setLoading(true);\n        await courseApi.editCourse(state === null || state === void 0 ? void 0 : state.id, appendFormData(removeObjUndefined({\n          ...values,\n          // map: isJSON(values?.map)\n          //   ? values?.map\n          //   : JSON.stringify(values?.map),\n          map: JSON.stringify(state === null || state === void 0 ? void 0 : state.map),\n          deleteImageIds: deletedArr,\n          images: addedArr,\n          image: state.images,\n          maxHeightDiff: 0,\n          isShowChart: !isHiddenChart,\n          levelId: values === null || values === void 0 ? void 0 : values.level,\n          fileMap: values.fileMap.file ? values.fileMap : null\n        })));\n        message.success(t(\"managementCourses.noti.editSuccess\"));\n        navigate(PATH_URL.MANAGER_COURSE.INDEX);\n      } catch (error) {\n        message.error(t(\"managementCourses.noti.editFail\"));\n      } finally {\n        setLoading(false);\n      }\n    } else {\n      try {\n        setLoading(true);\n        await courseApi.postCourse(appendFormData({\n          ...values,\n          // map: isJSON(values?.map)\n          //   ? values?.map\n          //   : JSON.stringify(values?.map),\n          images: addedArr,\n          maxHeightDiff: 0,\n          isShowChart: !isHiddenChart,\n          levelId: values === null || values === void 0 ? void 0 : values.level,\n          fileMap: values.fileMap\n        }));\n        message.success(t(\"managementCourses.noti.createSuccess\"));\n        navigate(PATH_URL.MANAGER_COURSE.INDEX);\n      } catch (error) {\n        message.error(t(\"managementCourses.noti.createFail\"));\n        message.error(error);\n      } finally {\n        setLoading(false);\n      }\n    }\n  };\n\n  // useEffect(() => {\n  //   if (state?.map) setIsFile(\"area\");\n  // }, [state?.map]);\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"course-form form-default\"\n  }, /*#__PURE__*/React.createElement(Row, {\n    align: \"middle\",\n    className: \"full-width header-table\"\n  }, /*#__PURE__*/React.createElement(\"h1\", null, state && isDetailMode && t(\"managementCourses.titleDetail\") || state && t(\"managementCourses.titleEdit\") || t(\"managementCourses.titleCreate\"))), /*#__PURE__*/React.createElement(Card, null, /*#__PURE__*/React.createElement(Form, {\n    form: form,\n    colon: false,\n    layout: \"vertical\",\n    initialValues: state ? initialValues : {},\n    onValuesChange: handleValueChange,\n    on: true,\n    onFinish: handleFinish\n  }, /*#__PURE__*/React.createElement(Row, {\n    gutter: [48, 8]\n  }, renderFieldForm(dataFormCourse)), /*#__PURE__*/React.createElement(Row, {\n    className: \"flex jc-center gap-20 full-width\"\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: \"default\",\n    className: \"fw-600 cancel-btn\",\n    onClick: handleCancel\n  }, t(\"form.btnBack\")), !isDetailMode && /*#__PURE__*/React.createElement(Button, {\n    loading: loading,\n    disabled: loading,\n    className: \"fw-600 submit-btn\",\n    type: \"primary\",\n    htmlType: \"submit\"\n  }, state ? t(\"managementCourses.form.btnEdit\") : t(\"form.btnCreate\"))))));\n}\n_s(CourseForm, \"0Lgp37D3kCV/FdaWodQrdsOmLxM=\", false, function () {\n  return [useTranslation, useForm, useLocation, useNavigate];\n});\n_c = CourseForm;\nexport default CourseForm;\nvar _c;\n$RefreshReg$(_c, \"CourseForm\");","map":{"version":3,"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,OAAO,QAAQ,mBAAmB;AAC3C,SAASC,cAAc,QAAQ,eAAe;AAC9C,SAASC,MAAM,EAAEC,IAAI,EAAEC,IAAI,EAAEC,OAAO,EAAEC,GAAG,QAAQ,MAAM;AACvD,SAASC,WAAW,EAAEC,WAAW,QAAQ,kBAAkB;AAE3D,OAAOC,MAAM,MAAM,yBAAyB;AAC5C,OAAOC,QAAQ,MAAM,wBAAwB;AAC7C,OAAOC,eAAe,MAAM,yBAAyB;AACrD,SAASC,MAAM,EAAEC,QAAQ,EAAEC,UAAU,QAAQ,uBAAuB;AACpE,SAASC,cAAc,QAAQ,8BAA8B;AAC7D,SAASC,eAAe,QAAQ,+BAA+B;AAC/D,SAASC,SAAS,QAAQ,uBAAuB;AACjD,SAASC,QAAQ,QAAQ,iBAAiB;AAC1C,SAASC,SAAS,QAAQ,yBAAyB;AACnD,SAASC,QAAQ,QAAQ,sBAAsB;AAC/C,SAASC,qBAAqB,QAAQ,oBAAoB;AAC1D,SAASC,cAAc,QAAQ,mBAAmB;AAElD,SAASC,UAAU,GAAG;EAAA;EACpB,MAAM;IAAEC;EAAE,CAAC,GAAGvB,cAAc,EAAE;EAC9B,MAAM,CAACwB,IAAI,CAAC,GAAGzB,OAAO,EAAE;EACxB,MAAM;IAAE0B;EAAM,CAAC,GAAGnB,WAAW,EAAE;EAC/B,MAAMoB,YAAY,GAAGD,MAAK,aAALA,KAAK,uBAALA,KAAK,CAAEE,IAAI,MAAK,QAAQ;EAC7C,MAAMC,aAAa,GAAG;IACpB,GAAGH,KAAK;IACRI,GAAG,EAAEC,IAAI,CAACC,SAAS,CAACN,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEI,GAAG,CAAC;IAC/BG,KAAK,EAAEP,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEQ,OAAO;IACrBC,OAAO,EAAET,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEU;EAClB,CAAC;EACD,MAAMC,QAAQ,GAAG7B,WAAW,EAAE;EAC9B,MAAM8B,YAAY,GAAG,MAAM;IACzBD,QAAQ,CAAC3B,QAAQ,CAAC6B,cAAc,CAACC,KAAK,CAAC;EACzC,CAAC;EACD,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAG3C,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAAC4C,UAAU,EAAEC,aAAa,CAAC,GAAG7C,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAAC8C,OAAO,EAAEC,UAAU,CAAC,GAAG/C,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACgD,MAAM,EAAEC,SAAS,CAAC,GAAGjD,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACkD,aAAa,EAAEC,gBAAgB,CAAC,GAAGnD,QAAQ,CAChD,EAAC2B,KAAK,aAALA,KAAK,eAALA,KAAK,CAAEyB,WAAW,KAAI,KAAK,CAC7B;EACD,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGtD,QAAQ,CAAC,EAAE,CAAC;EAEtD,MAAMuD,cAAc,GAAG,MAAOC,MAAM,IAAK;IACvC,MAAMC,QAAQ,GAAG,MAAMpC,QAAQ,CAACqC,SAAS,CAACF,MAAM,CAAC;IACjD,OAAOC,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED,MAAMC,cAAc,GAAG,CACrB;IACEC,QAAQ,EAAEhD,MAAM;IAChBiD,IAAI,EAAE/C,UAAU,CAACgD,KAAK;IACtBC,QAAQ,EAAEpC,YAAY;IACtBqC,IAAI,EAAE,OAAO;IACbC,SAAS,EAAE,EAAE;IACbC,KAAK,EAAE1C,CAAC,CAAC,8BAA8B,CAAC;IACxC2C,KAAK,EAAE,CACL;MACEC,QAAQ,EAAE,IAAI;MACd/D,OAAO,EAAE;IACX,CAAC,EACD;MACEgE,GAAG,EAAE,EAAE;MACPhE,OAAO,EAAEmB,CAAC,CAAC,uBAAuB,EAAE;QAAE8C,MAAM,EAAE;MAAG,CAAC;IACpD,CAAC,EACDpD,QAAQ,CAACqD,KAAK,CACZ/C,CAAC,CAAC,qCAAqC,EAAE;MACvCgD,SAAS,EAAEhD,CAAC,CAAC,8BAA8B;IAC7C,CAAC,CAAC,CACH;EAEL,CAAC,EACD;IACEqC,IAAI,EAAE/C,UAAU,CAAC2D,SAAS;IAC1BV,QAAQ,EAAEpC,YAAY;IACtBqC,IAAI,EAAE,aAAa;IACnBE,KAAK,EAAE1C,CAAC,CAAC,oCAAoC,CAAC;IAC9C2C,KAAK,EAAE,CACL;MACEC,QAAQ,EAAE,IAAI;MACd/D,OAAO,EAAE;IACX,CAAC,EACDa,QAAQ,CAACqD,KAAK,CACZ/C,CAAC,CAAC,qCAAqC,EAAE;MACvCgD,SAAS,EAAEhD,CAAC,CAAC,oCAAoC;IACnD,CAAC,CAAC,CACH;EAEL,CAAC,EACD;IACEqC,IAAI,EAAE/C,UAAU,CAAC4D,qBAAqB;IACtCV,IAAI,EAAE,OAAO;IACbJ,QAAQ,EAAE/C,QAAQ;IAClBqD,KAAK,EAAE1C,CAAC,CAAC,8BAA8B,CAAC;IACxC6B,gBAAgB;IAChBD,aAAa;IACbuB,SAAS,EAAErB,cAAc;IACzBsB,aAAa,EAAE,CAAClD,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEQ,OAAO,CAAC;IAC/B2C,YAAY,EAAGC,IAAI,KAAM;MACvBC,GAAG,EAAED,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEE,EAAE;MACbd,KAAK,EAAEY,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEd,IAAI;MACjBiB,KAAK,EAAEH,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEE;IACf,CAAC,CAAC;IACFb,KAAK,EAAE,CACL;MACEC,QAAQ,EAAE,IAAI;MACd/D,OAAO,EAAE;IACX,CAAC,EACDa,QAAQ,CAACqD,KAAK,CACZ/C,CAAC,CAAC,qCAAqC,EAAE;MACvCgD,SAAS,EAAEhD,CAAC,CAAC,8BAA8B;IAC7C,CAAC,CAAC,CACH;EAEL,CAAC,EACD;IACEoC,QAAQ,EAAE,EAAE;IACZC,IAAI,EAAE/C,UAAU,CAACgD,KAAK;IACtBC,QAAQ,EAAEpC,YAAY;IACtBqC,IAAI,EAAE,WAAW;IACjBE,KAAK,EAAE1C,CAAC,CAAC,kCAAkC,CAAC;IAC5C0D,QAAQ,EAAGC,GAAG,IACZjE,QAAQ,CAACkE,kBAAkB,CAACD,GAAG,CAACE,MAAM,CAACJ,KAAK,EAAExD,IAAI,EAAE,WAAW,CAAC;IAClE0C,KAAK,EAAE,CACL;MACEC,QAAQ,EAAE,IAAI;MACd/D,OAAO,EAAE;IACX,CAAC,EACDa,QAAQ,CAACqD,KAAK,CACZ/C,CAAC,CAAC,qCAAqC,EAAE;MACvCgD,SAAS,EAAEhD,CAAC,CAAC,kCAAkC;IACjD,CAAC,CAAC,CACH;EAEL,CAAC;EACD;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;IACEqC,IAAI,EAAE/C,UAAU,CAACwE,YAAY;IAC7BvB,QAAQ,EAAEpC,YAAY,IAAIoB,MAAM,KAAK,MAAM;IAC3CwC,OAAO,EAAE,CAAC;IACVvB,IAAI,EAAE,SAAS;IACfE,KAAK,EAAE1C,CAAC,CAAC,gCAAgC,CAAC;IAC1C;IACA2C,KAAK,EAAE,CACL;MACEC,QAAQ,EAAE,IAAI;MACd/D,OAAO,EAAE;IACX,CAAC,EACDa,QAAQ,CAACsE,QAAQ,CACfhE,CAAC,CAAC,qCAAqC,EAAE;MACvCgD,SAAS,EAAEhD,CAAC,CAAC,gCAAgC;IAC/C,CAAC,CAAC,CACH,CACF;IACD;IACAiE,eAAe,EAAE,CAAC,SAAS,EAAE,KAAK,CAAC;IACnCC,MAAM,EAAE,eAAe;IACvBC,eAAe,EAAEjE,KAAK,aAALA,KAAK,eAALA,KAAK,CAAEU,QAAQ,GAC5B,CACE;MACEwD,GAAG,EAAE,CAAC;MACN5B,IAAI,EAAEtC,KAAK,CAACU;IACd,CAAC,CACF,GACD,EAAE;IACNyD,QAAQ,eACNhG,oBAACK,MAAM;MAAC6D,QAAQ,EAAEhB,MAAM,KAAK,MAAO;MAAC+C,IAAI,eAAEjG,oBAACyB,cAAc;IAAI,GAC3DE,CAAC,CAAC,qCAAqC,CAAC,CAE5C;IACDuE,YAAY,EAAE1E;EAChB,CAAC,EACD;IACEuC,QAAQ,EAAE,EAAE;IACZC,IAAI,EAAE/C,UAAU,CAACgD,KAAK;IACtBC,QAAQ,EAAEpC,YAAY;IACtBqC,IAAI,EAAE,eAAe;IACrBE,KAAK,EAAE1C,CAAC,CAAC,sCAAsC,CAAC;IAChD0D,QAAQ,EAAGC,GAAG,IACZjE,QAAQ,CAACkE,kBAAkB,CAACD,GAAG,CAACE,MAAM,CAACJ,KAAK,EAAExD,IAAI,EAAE,eAAe,CAAC;IACtE0C,KAAK,EAAE,CACL;MACEC,QAAQ,EAAE,IAAI;MACd/D,OAAO,EAAE;IACX,CAAC,EACDa,QAAQ,CAACqD,KAAK,CACZ/C,CAAC,CAAC,qCAAqC,EAAE;MACvCgD,SAAS,EAAEhD,CAAC,CAAC,sCAAsC;IACrD,CAAC,CAAC,CACH;EAEL,CAAC,EACD;IACEoC,QAAQ,EAAE,EAAE;IACZC,IAAI,EAAE/C,UAAU,CAACgD,KAAK;IACtBC,QAAQ,EAAEpC,YAAY;IACtBqC,IAAI,EAAE,OAAO;IACbE,KAAK,EAAE1C,CAAC,CAAC,8BAA8B,CAAC;IACxC0D,QAAQ,EAAGC,GAAG,IACZjE,QAAQ,CAACkE,kBAAkB,CAACD,GAAG,CAACE,MAAM,CAACJ,KAAK,EAAExD,IAAI,EAAE,OAAO,CAAC;IAC9D0C,KAAK,EAAE,CACL;MACEC,QAAQ,EAAE,IAAI;MACd/D,OAAO,EAAE;IACX,CAAC,EACDa,QAAQ,CAACqD,KAAK,CACZ/C,CAAC,CAAC,qCAAqC,EAAE;MACvCgD,SAAS,EAAEhD,CAAC,CAAC,8BAA8B;IAC7C,CAAC,CAAC,CACH;EAEL,CAAC,EACD;IACEoC,QAAQ,EAAE,EAAE;IACZC,IAAI,EAAE/C,UAAU,CAACgD,KAAK;IACtBC,QAAQ,EAAEpC,YAAY;IACtBqC,IAAI,EAAE,eAAe;IACrBE,KAAK,EAAE1C,CAAC,CAAC,sCAAsC,CAAC;IAChD0D,QAAQ,EAAGC,GAAG,IACZjE,QAAQ,CAAC8E,WAAW,CAACb,GAAG,CAACE,MAAM,CAACJ,KAAK,EAAExD,IAAI,EAAE,eAAe,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC;IACxE0C,KAAK,EAAE,CACL;MACEC,QAAQ,EAAE,IAAI;MACd/D,OAAO,EAAE;IACX,CAAC,EACDa,QAAQ,CAACqD,KAAK,CACZ/C,CAAC,CAAC,qCAAqC,EAAE;MACvCgD,SAAS,EAAEhD,CAAC,CAAC,sCAAsC;IACrD,CAAC,CAAC,CACH;EAEL,CAAC,EACD;IACEoC,QAAQ,EAAE,EAAE;IACZC,IAAI,EAAE/C,UAAU,CAACgD,KAAK;IACtBC,QAAQ,EAAEpC,YAAY;IACtBqC,IAAI,EAAE,gBAAgB;IACtBE,KAAK,EAAE1C,CAAC,CAAC,uCAAuC,CAAC;IACjD0D,QAAQ,EAAGC,GAAG,IACZjE,QAAQ,CAAC8E,WAAW,CAClBb,GAAG,CAACE,MAAM,CAACJ,KAAK,EAChBxD,IAAI,EACJ,gBAAgB,EAChB,CAAC,GAAG,EACJ,GAAG,CACJ;IACH0C,KAAK,EAAE,CACL;MACEC,QAAQ,EAAE,IAAI;MACd/D,OAAO,EAAE;IACX,CAAC,EACDa,QAAQ,CAACqD,KAAK,CACZ/C,CAAC,CAAC,qCAAqC,EAAE;MACvCgD,SAAS,EAAEhD,CAAC,CAAC,uCAAuC;IACtD,CAAC,CAAC,CACH;EAEL,CAAC,EACD;IACEoC,QAAQ,EAAE,EAAE;IACZC,IAAI,EAAE/C,UAAU,CAACgD,KAAK;IACtBC,QAAQ,EAAEpC,YAAY;IACtBqC,IAAI,EAAE,aAAa;IACnBE,KAAK,EAAE1C,CAAC,CAAC,oCAAoC,CAAC;IAC9C0D,QAAQ,EAAGC,GAAG,IACZjE,QAAQ,CAAC8E,WAAW,CAACb,GAAG,CAACE,MAAM,CAACJ,KAAK,EAAExD,IAAI,EAAE,aAAa,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC;IACtE0C,KAAK,EAAE,CACL;MACEC,QAAQ,EAAE,IAAI;MACd/D,OAAO,EAAE;IACX,CAAC,EACDa,QAAQ,CAACqD,KAAK,CACZ/C,CAAC,CAAC,qCAAqC,EAAE;MACvCgD,SAAS,EAAEhD,CAAC,CAAC,oCAAoC;IACnD,CAAC,CAAC,CACH;EAEL,CAAC,EACD;IACEoC,QAAQ,EAAE,EAAE;IACZC,IAAI,EAAE/C,UAAU,CAACgD,KAAK;IACtBC,QAAQ,EAAEpC,YAAY;IACtBqC,IAAI,EAAE,cAAc;IACpBE,KAAK,EAAE1C,CAAC,CAAC,qCAAqC,CAAC;IAC/C0D,QAAQ,EAAGC,GAAG,IACZjE,QAAQ,CAAC8E,WAAW,CAACb,GAAG,CAACE,MAAM,CAACJ,KAAK,EAAExD,IAAI,EAAE,cAAc,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC;IACzE0C,KAAK,EAAE,CACL;MACEC,QAAQ,EAAE,IAAI;MACd/D,OAAO,EAAE;IACX,CAAC,EACDa,QAAQ,CAACqD,KAAK,CACZ/C,CAAC,CAAC,qCAAqC,EAAE;MACvCgD,SAAS,EAAEhD,CAAC,CAAC,qCAAqC;IACpD,CAAC,CAAC,CACH;EAEL,CAAC,EACD;IACEqC,IAAI,EAAE/C,UAAU,CAAC2D,SAAS;IAC1BV,QAAQ,EAAEpC,YAAY;IACtBqC,IAAI,EAAE,QAAQ;IACdC,SAAS,EAAE,GAAG;IACdC,KAAK,EAAE1C,CAAC,CAAC,+BAA+B,CAAC;IACzC2C,KAAK,EAAE,CACL;MACEE,GAAG,EAAE,GAAG;MACRhE,OAAO,EAAEmB,CAAC,CAAC,uBAAuB,EAAE;QAAE8C,MAAM,EAAE;MAAI,CAAC;IACrD,CAAC;EAEL,CAAC,EACD;IACEV,QAAQ,EAAEhD,MAAM;IAChBiD,IAAI,EAAE/C,UAAU,CAACgD,KAAK;IACtBC,QAAQ,EAAEpC,YAAY;IACtBqC,IAAI,EAAE,OAAO;IACbC,SAAS,EAAE,GAAG;IACdC,KAAK,EAAE1C,CAAC,CAAC,8BAA8B,CAAC;IACxC2C,KAAK,EAAE,CACL;MACEC,QAAQ,EAAE,IAAI;MACd/D,OAAO,EAAE;IACX,CAAC,EACD;MACEgE,GAAG,EAAE,GAAG;MACRhE,OAAO,EAAEmB,CAAC,CAAC,uBAAuB,EAAE;QAAE8C,MAAM,EAAE;MAAI,CAAC;IACrD,CAAC,EACDpD,QAAQ,CAACqD,KAAK,CACZ/C,CAAC,CAAC,qCAAqC,EAAE;MACvCgD,SAAS,EAAEhD,CAAC,CAAC,8BAA8B;IAC7C,CAAC,CAAC,CACH;EAEL,CAAC,EACD;IACEqC,IAAI,EAAE/C,UAAU,CAACmF,MAAM;IACvBlC,QAAQ,EAAEpC,YAAY;IACtBqC,IAAI,EAAE,QAAQ;IACdE,KAAK,EAAE1C,CAAC,CAAC,+BAA+B,CAAC;IACzC0E,eAAe,EAAExE,KAAK,GAClBA,KAAK,CAACyE,MAAM,CAACrE,GAAG,CAAEgD,IAAI,IAAK;MACzB,OAAO;QACLc,GAAG,EAAEd,IAAI;QACTsB,GAAG,EAAG,GAAEjF,SAAU,GAAE2D,IAAK;MAC3B,CAAC;IACH,CAAC,CAAC,GACF,EAAE;IACNpC,WAAW;IACXC,UAAU;IACVC,aAAa;IACbuB,KAAK,EAAE,CACL;MACEC,QAAQ,EAAE,IAAI;MACd/D,OAAO,EAAE;IACX,CAAC,EACDa,QAAQ,CAACsE,QAAQ,CACfhE,CAAC,CAAC,qCAAqC,EAAE;MACvCgD,SAAS,EAAEhD,CAAC,CAAC,+BAA+B;IAC9C,CAAC,CAAC,CACH;EAEL,CAAC,EACD;IACEqC,IAAI,EAAE/C,UAAU,CAACuF,QAAQ;IACzBrC,IAAI,EAAE,eAAe;IACrBE,KAAK,EAAE1C,CAAC,CAAC,oCAAoC,CAAC;IAC9C8E,OAAO,EAAErD,aAAa;IACtBsD,OAAO,EAAGtB,KAAK,IAAK/B,gBAAgB,CAAC+B,KAAK;EAC5C,CAAC,CACF;EAED,MAAMuB,iBAAiB,GAAG,MAAM;IAAA;IAC9B,MAAM;MAAE1E,GAAG;MAAEK;IAAQ,CAAC,GAAGV,IAAI,CAACgF,cAAc,EAAE;IAE9C,IAAI3E,GAAG,EAAE,OAAOkB,SAAS,CAAC,MAAM,CAAC;IAEjC,IAAIb,OAAO,aAAPA,OAAO,oCAAPA,OAAO,CAAEuE,QAAQ,8CAAjBvE,kBAAmBwE,MAAM,EAAE,OAAO3D,SAAS,CAAC,MAAM,CAAC;IAEvD,OAAOA,SAAS,CAAC,EAAE,CAAC;EACtB,CAAC;EACD,MAAM4D,kBAAkB,GAAIC,GAAG,IAAK;IAClC,IAAIA,GAAG,EAAE;MACPC,MAAM,CAACC,IAAI,CAACF,GAAG,CAAC,CAACG,OAAO,CAAEjC,GAAG,IAC3B8B,GAAG,CAAC9B,GAAG,CAAC,KAAKkC,SAAS,IAAIJ,GAAG,CAAC9B,GAAG,CAAC,KAAK,EAAE,IAAI8B,GAAG,CAAC9B,GAAG,CAAC,KAAK,IAAI,GAC1D,OAAO8B,GAAG,CAAC9B,GAAG,CAAC,GACf,CAAC,CAAC,CACP;MACD,OAAO8B,GAAG;IACZ;IACA,OAAO,CAAC,CAAC;EACX,CAAC;EAED,MAAMK,YAAY,GAAG,MAAOC,MAAM,IAAK;IACrC,IAAIzF,KAAK,EAAE;MACT,IAAI;QACFoB,UAAU,CAAC,IAAI,CAAC;QAChB,MAAM7B,SAAS,CAACmG,UAAU,CACxB1F,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEsD,EAAE,EACTjE,cAAc,CACZ6F,kBAAkB,CAAC;UACjB,GAAGO,MAAM;UACT;UACA;UACA;UACArF,GAAG,EAAEC,IAAI,CAACC,SAAS,CAACN,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEI,GAAG,CAAC;UAC/BuF,cAAc,EAAE1E,UAAU;UAC1BwD,MAAM,EAAE1D,QAAQ;UAChB6E,KAAK,EAAE5F,KAAK,CAACyE,MAAM;UACnBoB,aAAa,EAAE,CAAC;UAChBpE,WAAW,EAAE,CAACF,aAAa;UAC3Bf,OAAO,EAAEiF,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAElF,KAAK;UACtBE,OAAO,EAAEgF,MAAM,CAAChF,OAAO,CAACqF,IAAI,GAAGL,MAAM,CAAChF,OAAO,GAAG;QAClD,CAAC,CAAC,CACH,CACF;QACD9B,OAAO,CAACoH,OAAO,CAACjG,CAAC,CAAC,oCAAoC,CAAC,CAAC;QACxDa,QAAQ,CAAC3B,QAAQ,CAAC6B,cAAc,CAACC,KAAK,CAAC;MACzC,CAAC,CAAC,OAAOkF,KAAK,EAAE;QACdrH,OAAO,CAACqH,KAAK,CAAClG,CAAC,CAAC,iCAAiC,CAAC,CAAC;MACrD,CAAC,SAAS;QACRsB,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC,MAAM;MACL,IAAI;QACFA,UAAU,CAAC,IAAI,CAAC;QAChB,MAAM7B,SAAS,CAAC0G,UAAU,CACxB5G,cAAc,CAAC;UACb,GAAGoG,MAAM;UACT;UACA;UACA;UACAhB,MAAM,EAAE1D,QAAQ;UAChB8E,aAAa,EAAE,CAAC;UAChBpE,WAAW,EAAE,CAACF,aAAa;UAC3Bf,OAAO,EAAEiF,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAElF,KAAK;UACtBE,OAAO,EAAEgF,MAAM,CAAChF;QAClB,CAAC,CAAC,CACH;QACD9B,OAAO,CAACoH,OAAO,CAACjG,CAAC,CAAC,sCAAsC,CAAC,CAAC;QAC1Da,QAAQ,CAAC3B,QAAQ,CAAC6B,cAAc,CAACC,KAAK,CAAC;MACzC,CAAC,CAAC,OAAOkF,KAAK,EAAE;QACdrH,OAAO,CAACqH,KAAK,CAAClG,CAAC,CAAC,mCAAmC,CAAC,CAAC;QACrDnB,OAAO,CAACqH,KAAK,CAACA,KAAK,CAAC;MACtB,CAAC,SAAS;QACR5E,UAAU,CAAC,KAAK,CAAC;MACnB;IACF;EACF,CAAC;;EAED;EACA;EACA;;EAEA,oBACEjD;IAAK+H,SAAS,EAAC;EAA0B,gBACvC/H,oBAACS,GAAG;IAACuH,KAAK,EAAC,QAAQ;IAACD,SAAS,EAAC;EAAyB,gBACrD/H,gCACI6B,KAAK,IAAIC,YAAY,IAAIH,CAAC,CAAC,+BAA+B,CAAC,IAC1DE,KAAK,IAAIF,CAAC,CAAC,6BAA6B,CAAE,IAC3CA,CAAC,CAAC,+BAA+B,CAAC,CACjC,CACD,eAEN3B,oBAACM,IAAI,qBACHN,oBAACO,IAAI;IACHqB,IAAI,EAAEA,IAAK;IACXqG,KAAK,EAAE,KAAM;IACbC,MAAM,EAAC,UAAU;IACjBlG,aAAa,EAAEH,KAAK,GAAGG,aAAa,GAAG,CAAC,CAAE;IAC1CmG,cAAc,EAAExB,iBAAkB;IAClCyB,EAAE;IACFC,QAAQ,EAAEhB;EAAa,gBAEvBrH,oBAACS,GAAG;IAAC6H,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;EAAE,GAAEnH,eAAe,CAAC2C,cAAc,CAAC,CAAO,eAC7D9D,oBAACS,GAAG;IAACsH,SAAS,EAAC;EAAkC,gBAC/C/H,oBAACK,MAAM;IACL2D,IAAI,EAAC,SAAS;IACd+D,SAAS,EAAC,mBAAmB;IAC7BQ,OAAO,EAAE9F;EAAa,GAErBd,CAAC,CAAC,cAAc,CAAC,CACX,EACR,CAACG,YAAY,iBACZ9B,oBAACK,MAAM;IACL2C,OAAO,EAAEA,OAAQ;IACjBkB,QAAQ,EAAElB,OAAQ;IAClB+E,SAAS,EAAC,mBAAmB;IAC7B/D,IAAI,EAAC,SAAS;IACdwE,QAAQ,EAAC;EAAQ,GAEhB3G,KAAK,GACFF,CAAC,CAAC,gCAAgC,CAAC,GACnCA,CAAC,CAAC,gBAAgB,CAAC,CAE1B,CACG,CACD,CACF,CACH;AAEV;AAAA,GA3eSD,UAAU;EAAA,QACHtB,cAAc,EACbD,OAAO,EACJO,WAAW,EAQZC,WAAW;AAAA;AAAA,KAXrBe,UAAU;AA6enB,eAAeA,UAAU;AAAA;AAAA","names":["React","useEffect","useState","useForm","useTranslation","Button","Card","Form","message","Row","useLocation","useNavigate","isJSON","PATH_URL","listOptionLevel","COLDEF","COL_HAFT","TYPE_FIELD","appendFormData","renderFieldForm","courseApi","validate","IMAGE_URL","levelApi","checkBeforeUploadFile","UploadOutlined","CourseForm","t","form","state","isDetailMode","mode","initialValues","map","JSON","stringify","level","levelId","fileMap","fileName","navigate","handleCancel","MANAGER_COURSE","INDEX","addedArr","setAddedArr","deletedArr","setDeletedArr","loading","setLoading","isFile","setIsFile","isHiddenChart","setIsHiddenChart","isShowChart","listDeletedId","setListDeletedId","handleGetLevel","params","response","getLevels","data","dataFormCourse","colwidth","type","INPUT","disabled","name","maxLength","label","rules","required","max","number","empty","fieldName","TEXT_AREA","SELECT_SCROLL_LOADING","fetchData","listInitialId","returnOption","item","key","id","value","onChange","evt","numberPreventInput","target","UPLOAD_FIELD","maxFile","emptyImg","allowFileWindow","accept","defaultFileList","uid","children","icon","beforeUpload","coordinates","UPLOAD","initialFileList","images","url","CHECKBOX","checked","setData","handleValueChange","getFieldsValue","fileList","length","removeObjUndefined","obj","Object","keys","forEach","undefined","handleFinish","values","editCourse","deleteImageIds","image","maxHeightDiff","file","success","error","postCourse","className","align","colon","layout","onValuesChange","on","onFinish","gutter","onClick","htmlType"],"sources":["/home/huynd/animalwatch_admin/src/pages/manager/course/CourseForm.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useForm } from \"antd/es/form/Form\";\nimport { useTranslation } from \"react-i18next\";\nimport { Button, Card, Form, message, Row } from \"antd\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\n\nimport isJSON from \"@common/utils/checkJson\";\nimport PATH_URL from \"@common/config/pathURL\";\nimport listOptionLevel from \"@common/constant/course\";\nimport { COLDEF, COL_HAFT, TYPE_FIELD } from \"@common/constant/form\";\nimport { appendFormData } from \"@common/utils/appendFormData\";\nimport { renderFieldForm } from \"@common/utils/renderFieldForm\";\nimport { courseApi } from \"@services/apis/course\";\nimport { validate } from \"@validate/index\";\nimport { IMAGE_URL } from \"@common/config/endpoint\";\nimport { levelApi } from \"@services/apis/level\";\nimport { checkBeforeUploadFile } from \"@validate/validate\";\nimport { UploadOutlined } from \"@ant-design/icons\";\n\nfunction CourseForm() {\n  const { t } = useTranslation();\n  const [form] = useForm();\n  const { state } = useLocation();\n  const isDetailMode = state?.mode === \"DETAIL\";\n  const initialValues = {\n    ...state,\n    map: JSON.stringify(state?.map),\n    level: state?.levelId,\n    fileMap: state?.fileName,\n  };\n  const navigate = useNavigate();\n  const handleCancel = () => {\n    navigate(PATH_URL.MANAGER_COURSE.INDEX);\n  };\n  const [addedArr, setAddedArr] = useState([]);\n  const [deletedArr, setDeletedArr] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [isFile, setIsFile] = useState(\"\");\n  const [isHiddenChart, setIsHiddenChart] = useState(\n    !state?.isShowChart || false,\n  );\n  const [listDeletedId, setListDeletedId] = useState([]);\n\n  const handleGetLevel = async (params) => {\n    const response = await levelApi.getLevels(params);\n    return response.data;\n  };\n\n  const dataFormCourse = [\n    {\n      colwidth: COLDEF,\n      type: TYPE_FIELD.INPUT,\n      disabled: isDetailMode,\n      name: \"title\",\n      maxLength: 50,\n      label: t(\"managementCourses.form.title\"),\n      rules: [\n        {\n          required: true,\n          message: \"\",\n        },\n        {\n          max: 50,\n          message: t(\"validate.maxCharacter\", { number: 50 }),\n        },\n        validate.empty(\n          t(\"managementCourses.validate.notEmpty\", {\n            fieldName: t(\"managementCourses.form.title\"),\n          }),\n        ),\n      ],\n    },\n    {\n      type: TYPE_FIELD.TEXT_AREA,\n      disabled: isDetailMode,\n      name: \"description\",\n      label: t(\"managementCourses.form.description\"),\n      rules: [\n        {\n          required: true,\n          message: \"\",\n        },\n        validate.empty(\n          t(\"managementCourses.validate.notEmpty\", {\n            fieldName: t(\"managementCourses.form.description\"),\n          }),\n        ),\n      ],\n    },\n    {\n      type: TYPE_FIELD.SELECT_SCROLL_LOADING,\n      name: \"level\",\n      colwidth: COL_HAFT,\n      label: t(\"managementCourses.form.level\"),\n      setListDeletedId,\n      listDeletedId,\n      fetchData: handleGetLevel,\n      listInitialId: [state?.levelId],\n      returnOption: (item) => ({\n        key: item?.id,\n        label: item?.name,\n        value: item?.id,\n      }),\n      rules: [\n        {\n          required: true,\n          message: \"\",\n        },\n        validate.empty(\n          t(\"managementCourses.validate.notEmpty\", {\n            fieldName: t(\"managementCourses.form.level\"),\n          }),\n        ),\n      ],\n    },\n    {\n      colwidth: 12,\n      type: TYPE_FIELD.INPUT,\n      disabled: isDetailMode,\n      name: \"maxHeight\",\n      label: t(\"managementCourses.form.maxHeight\"),\n      onChange: (evt) =>\n        validate.numberPreventInput(evt.target.value, form, \"maxHeight\"),\n      rules: [\n        {\n          required: true,\n          message: \"\",\n        },\n        validate.empty(\n          t(\"managementCourses.validate.notEmpty\", {\n            fieldName: t(\"managementCourses.form.maxHeight\"),\n          }),\n        ),\n      ],\n    },\n    // {\n    //   type: TYPE_FIELD.TEXT_AREA,\n    //   disabled: isDetailMode || isFile === \"file\",\n    //   name: \"map\",\n    //   label: t(\"managementCourses.form.map\"),\n    //   rules: [\n    //     {\n    //       required: !isFile || isFile === \"area\",\n    //     },\n    //   ],\n    // },\n    {\n      type: TYPE_FIELD.UPLOAD_FIELD,\n      disabled: isDetailMode || isFile === \"area\",\n      maxFile: 1,\n      name: \"fileMap\",\n      label: t(\"managementCourses.form.fileMap\"),\n      // messageError: t(\"managementCourses.validate.fileMapValidate\"),\n      rules: [\n        {\n          required: true,\n          message: \"\",\n        },\n        validate.emptyImg(\n          t(\"managementCourses.validate.notEmpty\", {\n            fieldName: t(\"managementCourses.form.fileMap\"),\n          }),\n        ),\n      ],\n      // allowFiles: [\"application/geo+json\", \"application/json\"],\n      allowFileWindow: [\"geojson\", \"gpx\"],\n      accept: \".gpx,.geojson\",\n      defaultFileList: state?.fileName\n        ? [\n            {\n              uid: 1,\n              name: state.fileName,\n            },\n          ]\n        : [],\n      children: (\n        <Button disabled={isFile === \"area\"} icon={<UploadOutlined />}>\n          {t(\"managementCourses.form.choseFileMap\")}\n        </Button>\n      ),\n      beforeUpload: checkBeforeUploadFile,\n    },\n    {\n      colwidth: 12,\n      type: TYPE_FIELD.INPUT,\n      disabled: isDetailMode,\n      name: \"totalDistance\",\n      label: t(\"managementCourses.form.totalDistance\"),\n      onChange: (evt) =>\n        validate.numberPreventInput(evt.target.value, form, \"totalDistance\"),\n      rules: [\n        {\n          required: true,\n          message: \"\",\n        },\n        validate.empty(\n          t(\"managementCourses.validate.notEmpty\", {\n            fieldName: t(\"managementCourses.form.totalDistance\"),\n          }),\n        ),\n      ],\n    },\n    {\n      colwidth: 12,\n      type: TYPE_FIELD.INPUT,\n      disabled: isDetailMode,\n      name: \"slope\",\n      label: t(\"managementCourses.form.slope\"),\n      onChange: (evt) =>\n        validate.numberPreventInput(evt.target.value, form, \"slope\"),\n      rules: [\n        {\n          required: true,\n          message: \"\",\n        },\n        validate.empty(\n          t(\"managementCourses.validate.notEmpty\", {\n            fieldName: t(\"managementCourses.form.slope\"),\n          }),\n        ),\n      ],\n    },\n    {\n      colwidth: 12,\n      type: TYPE_FIELD.INPUT,\n      disabled: isDetailMode,\n      name: \"startLatitude\",\n      label: t(\"managementCourses.form.startLatitude\"),\n      onChange: (evt) =>\n        validate.coordinates(evt.target.value, form, \"startLatitude\", -90, 90),\n      rules: [\n        {\n          required: true,\n          message: \"\",\n        },\n        validate.empty(\n          t(\"managementCourses.validate.notEmpty\", {\n            fieldName: t(\"managementCourses.form.startLatitude\"),\n          }),\n        ),\n      ],\n    },\n    {\n      colwidth: 12,\n      type: TYPE_FIELD.INPUT,\n      disabled: isDetailMode,\n      name: \"startLongitude\",\n      label: t(\"managementCourses.form.startLongitude\"),\n      onChange: (evt) =>\n        validate.coordinates(\n          evt.target.value,\n          form,\n          \"startLongitude\",\n          -180,\n          180,\n        ),\n      rules: [\n        {\n          required: true,\n          message: \"\",\n        },\n        validate.empty(\n          t(\"managementCourses.validate.notEmpty\", {\n            fieldName: t(\"managementCourses.form.startLongitude\"),\n          }),\n        ),\n      ],\n    },\n    {\n      colwidth: 12,\n      type: TYPE_FIELD.INPUT,\n      disabled: isDetailMode,\n      name: \"endLatitude\",\n      label: t(\"managementCourses.form.endLatitude\"),\n      onChange: (evt) =>\n        validate.coordinates(evt.target.value, form, \"endLatitude\", -90, 90),\n      rules: [\n        {\n          required: true,\n          message: \"\",\n        },\n        validate.empty(\n          t(\"managementCourses.validate.notEmpty\", {\n            fieldName: t(\"managementCourses.form.endLatitude\"),\n          }),\n        ),\n      ],\n    },\n    {\n      colwidth: 12,\n      type: TYPE_FIELD.INPUT,\n      disabled: isDetailMode,\n      name: \"endLongitude\",\n      label: t(\"managementCourses.form.endLongitude\"),\n      onChange: (evt) =>\n        validate.coordinates(evt.target.value, form, \"endLongitude\", -180, 180),\n      rules: [\n        {\n          required: true,\n          message: \"\",\n        },\n        validate.empty(\n          t(\"managementCourses.validate.notEmpty\", {\n            fieldName: t(\"managementCourses.form.endLongitude\"),\n          }),\n        ),\n      ],\n    },\n    {\n      type: TYPE_FIELD.TEXT_AREA,\n      disabled: isDetailMode,\n      name: \"review\",\n      maxLength: 200,\n      label: t(\"managementCourses.form.review\"),\n      rules: [\n        {\n          max: 200,\n          message: t(\"validate.maxCharacter\", { number: 200 }),\n        },\n      ],\n    },\n    {\n      colwidth: COLDEF,\n      type: TYPE_FIELD.INPUT,\n      disabled: isDetailMode,\n      name: \"place\",\n      maxLength: 200,\n      label: t(\"managementCourses.form.place\"),\n      rules: [\n        {\n          required: true,\n          message: \"\",\n        },\n        {\n          max: 200,\n          message: t(\"validate.maxCharacter\", { number: 200 }),\n        },\n        validate.empty(\n          t(\"managementCourses.validate.notEmpty\", {\n            fieldName: t(\"managementCourses.form.place\"),\n          }),\n        ),\n      ],\n    },\n    {\n      type: TYPE_FIELD.UPLOAD,\n      disabled: isDetailMode,\n      name: \"images\",\n      label: t(\"managementCourses.form.images\"),\n      initialFileList: state\n        ? state.images.map((item) => {\n            return {\n              uid: item,\n              url: `${IMAGE_URL}${item}/original.jpg`,\n            };\n          })\n        : [],\n      setAddedArr,\n      deletedArr,\n      setDeletedArr,\n      rules: [\n        {\n          required: true,\n          message: \"\",\n        },\n        validate.emptyImg(\n          t(\"managementCourses.validate.notEmpty\", {\n            fieldName: t(\"managementCourses.form.images\"),\n          }),\n        ),\n      ],\n    },\n    {\n      type: TYPE_FIELD.CHECKBOX,\n      name: \"isHiddenChart\",\n      label: t(\"managementCourses.form.hiddenChart\"),\n      checked: isHiddenChart,\n      setData: (value) => setIsHiddenChart(value),\n    },\n  ];\n\n  const handleValueChange = () => {\n    const { map, fileMap } = form.getFieldsValue();\n\n    if (map) return setIsFile(\"area\");\n\n    if (fileMap?.fileList?.length) return setIsFile(\"file\");\n\n    return setIsFile(\"\");\n  };\n  const removeObjUndefined = (obj) => {\n    if (obj) {\n      Object.keys(obj).forEach((key) =>\n        obj[key] === undefined || obj[key] === \"\" || obj[key] === null\n          ? delete obj[key]\n          : {},\n      );\n      return obj;\n    }\n    return {};\n  };\n\n  const handleFinish = async (values) => {\n    if (state) {\n      try {\n        setLoading(true);\n        await courseApi.editCourse(\n          state?.id,\n          appendFormData(\n            removeObjUndefined({\n              ...values,\n              // map: isJSON(values?.map)\n              //   ? values?.map\n              //   : JSON.stringify(values?.map),\n              map: JSON.stringify(state?.map),\n              deleteImageIds: deletedArr,\n              images: addedArr,\n              image: state.images,\n              maxHeightDiff: 0,\n              isShowChart: !isHiddenChart,\n              levelId: values?.level,\n              fileMap: values.fileMap.file ? values.fileMap : null,\n            }),\n          ),\n        );\n        message.success(t(\"managementCourses.noti.editSuccess\"));\n        navigate(PATH_URL.MANAGER_COURSE.INDEX);\n      } catch (error) {\n        message.error(t(\"managementCourses.noti.editFail\"));\n      } finally {\n        setLoading(false);\n      }\n    } else {\n      try {\n        setLoading(true);\n        await courseApi.postCourse(\n          appendFormData({\n            ...values,\n            // map: isJSON(values?.map)\n            //   ? values?.map\n            //   : JSON.stringify(values?.map),\n            images: addedArr,\n            maxHeightDiff: 0,\n            isShowChart: !isHiddenChart,\n            levelId: values?.level,\n            fileMap: values.fileMap,\n          }),\n        );\n        message.success(t(\"managementCourses.noti.createSuccess\"));\n        navigate(PATH_URL.MANAGER_COURSE.INDEX);\n      } catch (error) {\n        message.error(t(\"managementCourses.noti.createFail\"));\n        message.error(error);\n      } finally {\n        setLoading(false);\n      }\n    }\n  };\n\n  // useEffect(() => {\n  //   if (state?.map) setIsFile(\"area\");\n  // }, [state?.map]);\n\n  return (\n    <div className=\"course-form form-default\">\n      <Row align=\"middle\" className=\"full-width header-table\">\n        <h1>\n          {(state && isDetailMode && t(\"managementCourses.titleDetail\")) ||\n            (state && t(\"managementCourses.titleEdit\")) ||\n            t(\"managementCourses.titleCreate\")}\n        </h1>\n      </Row>\n\n      <Card>\n        <Form\n          form={form}\n          colon={false}\n          layout=\"vertical\"\n          initialValues={state ? initialValues : {}}\n          onValuesChange={handleValueChange}\n          on\n          onFinish={handleFinish}\n        >\n          <Row gutter={[48, 8]}>{renderFieldForm(dataFormCourse)}</Row>\n          <Row className=\"flex jc-center gap-20 full-width\">\n            <Button\n              type=\"default\"\n              className=\"fw-600 cancel-btn\"\n              onClick={handleCancel}\n            >\n              {t(\"form.btnBack\")}\n            </Button>\n            {!isDetailMode && (\n              <Button\n                loading={loading}\n                disabled={loading}\n                className=\"fw-600 submit-btn\"\n                type=\"primary\"\n                htmlType=\"submit\"\n              >\n                {state\n                  ? t(\"managementCourses.form.btnEdit\")\n                  : t(\"form.btnCreate\")}\n              </Button>\n            )}\n          </Row>\n        </Form>\n      </Card>\n    </div>\n  );\n}\n\nexport default CourseForm;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}