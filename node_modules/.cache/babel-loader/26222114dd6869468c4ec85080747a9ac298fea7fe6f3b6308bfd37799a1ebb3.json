{"ast":null,"code":"import { replacePositionRangeNumber } from \"@common/utils/numberHelper\";\nimport { EMAIL_REGEXP, NUMBER_REGEX, PASSWORD_REGEXP } from \"@common/utils/regex\";\nimport { message, Upload } from \"antd\";\nexport const email = t => ({\n  validator(_, value) {\n    if (!value || !(value !== null && value !== void 0 && value.trim())) return Promise.reject(new Error(t(\"auth.message.emailRequire\")));\n    if (!EMAIL_REGEXP.test(value === null || value === void 0 ? void 0 : value.trim())) return Promise.reject(new Error(t(\"auth.message.incorrectEmail\")));\n    return Promise.resolve();\n  }\n});\nexport const number = t => ({\n  validator(_, value) {\n    if (!value || !(value !== null && value !== void 0 && value.trim())) return Promise.reject(new Error(t(\"auth.message.emailRequire\")));\n    if (!NUMBER_REGEX.test(value)) return Promise.reject(new Error(t(\"is require number\")));\n    return Promise.resolve();\n  }\n});\nexport const validatePassword = t => ({\n  validator(_, value) {\n    if (!value || !(value !== null && value !== void 0 && value.trim())) return Promise.reject(new Error(t(\"auth.message.passwordRequire\")));\n    if (!PASSWORD_REGEXP.test(value)) return Promise.reject(new Error(t(\"auth.message.incorrectPassword\")));\n    return Promise.resolve();\n  }\n});\nexport const validateCompareValue = (t, fieldName) => _ref => {\n  let {\n    getFieldValue\n  } = _ref;\n  return {\n    validator(_, value) {\n      if (!value || getFieldValue(fieldName) === value) {\n        return Promise.resolve();\n      }\n      return Promise.reject(new Error(t(\"auth.message.notMatchPassword\")));\n    }\n  };\n};\nexport const handleOnKeyPress = e => {\n  const specialCharRegex = /[0-9]/;\n  const pressedKey = String.fromCharCode(!e.charCode ? e.which : e.charCode);\n  if (!specialCharRegex.test(pressedKey)) {\n    e.preventDefault();\n    return false;\n  }\n  return false;\n};\nexport const empty = function () {\n  let mes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  return {\n    validator(_, value) {\n      const stringify = value === null || value === void 0 ? void 0 : value.toString();\n      if (value === undefined || value === null || (stringify === null || stringify === void 0 ? void 0 : stringify.trim()) === \"\") {\n        return Promise.reject(new Error(mes));\n      }\n      return Promise.resolve();\n    }\n  };\n};\nexport const emptyImg = function () {\n  let mes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  return {\n    validator(_, value) {\n      var _value$fileList;\n      if ((value === null || value === void 0 ? void 0 : value.fileList) === undefined || (value === null || value === void 0 ? void 0 : (_value$fileList = value.fileList) === null || _value$fileList === void 0 ? void 0 : _value$fileList.length) === 0) {\n        if (value !== null && value !== void 0 && value.length) {\n          return Promise.resolve();\n        }\n        return Promise.reject(new Error(mes));\n      }\n      return Promise.resolve();\n    }\n  };\n};\nexport const numberPreventInput = (value, form, field, fixNumber) => {\n  form.setFieldValue(field, replacePositionRangeNumber(value, null, null, fixNumber));\n};\nexport const coordinates = (value, form, field, posStart, posEnd) => {\n  form.setFieldValue(field, replacePositionRangeNumber(value, posStart, posEnd));\n};\nexport const checkBeforeUpload = (t, file, fileSize) => {\n  var _file$name, _file$name$split;\n  // check size file\n  const isLt8M = file.size / 1024 / 1024 < fileSize;\n  if (!isLt8M) {\n    message.error(t(\"validate.imageRequireLess2mb\"));\n    return isLt8M || Upload.LIST_IGNORE;\n  }\n\n  // check type file\n  const isJpgOrPng = [\"image/jpeg\", \"image/png\"].includes(file.type);\n  if (!isJpgOrPng) {\n    message.error(t(\"validate.notImageFormat\"));\n    return isJpgOrPng || Upload.LIST_IGNORE;\n  }\n\n  // check last file name includes jpeg or png\n  const checkLastNameFile = [\"jpg\", \"png\", \"jpeg\"].includes(file === null || file === void 0 ? void 0 : (_file$name = file.name) === null || _file$name === void 0 ? void 0 : (_file$name$split = _file$name.split(\".\")) === null || _file$name$split === void 0 ? void 0 : _file$name$split.at(-1));\n  if (!checkLastNameFile) {\n    message.error(t(\"validate.notImageFormat\"));\n    return checkLastNameFile || Upload.LIST_IGNORE;\n  }\n  return false;\n};\nexport const getFileExtension = fileName => {\n  const parts = fileName.split(\".\");\n  return parts[parts.length - 1].toLowerCase();\n};\nexport const checkBeforeUploadFile = (t, file, messageError, allowFiles, allowFileWindows) => {\n  const extension = getFileExtension(file.name);\n  const allowFileWindow = allowFileWindows.length && allowFileWindows.includes(extension);\n  if (!allowFileWindow) {\n    message.error(messageError);\n    return allowFileWindow || Upload.LIST_IGNORE;\n  }\n  return false;\n};","map":{"version":3,"mappings":"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","names":["replacePositionRangeNumber","EMAIL_REGEXP","NUMBER_REGEX","PASSWORD_REGEXP","message","Upload","email","t","validator","_","value","trim","Promise","reject","Error","test","resolve","number","validatePassword","validateCompareValue","fieldName","_ref","getFieldValue","handleOnKeyPress","e","specialCharRegex","pressedKey","String","fromCharCode","charCode","which","preventDefault","empty","mes","stringify","toString","undefined","emptyImg","fileList","length","numberPreventInput","form","field","fixNumber","setFieldValue","coordinates","posStart","posEnd","checkBeforeUpload","file","fileSize","isLt8M","size","error","LIST_IGNORE","isJpgOrPng","includes","type","checkLastNameFile","name","split","at","getFileExtension","fileName","parts","toLowerCase","checkBeforeUploadFile","messageError","allowFiles","allowFileWindows","extension","allowFileWindow"],"sources":["/home/huynd/animalwatch_admin/src/validate/validate.js"],"sourcesContent":["import { replacePositionRangeNumber } from \"@common/utils/numberHelper\";\nimport {\n  EMAIL_REGEXP,\n  NUMBER_REGEX,\n  PASSWORD_REGEXP,\n} from \"@common/utils/regex\";\nimport { message, Upload } from \"antd\";\n\nexport const email = (t) => ({\n  validator(_, value) {\n    if (!value || !value?.trim())\n      return Promise.reject(new Error(t(\"auth.message.emailRequire\")));\n\n    if (!EMAIL_REGEXP.test(value?.trim()))\n      return Promise.reject(new Error(t(\"auth.message.incorrectEmail\")));\n\n    return Promise.resolve();\n  },\n});\n\nexport const number = (t) => ({\n  validator(_, value) {\n    if (!value || !value?.trim())\n      return Promise.reject(new Error(t(\"auth.message.emailRequire\")));\n\n    if (!NUMBER_REGEX.test(value))\n      return Promise.reject(new Error(t(\"is require number\")));\n\n    return Promise.resolve();\n  },\n});\n\nexport const validatePassword = (t) => ({\n  validator(_, value) {\n    if (!value || !value?.trim())\n      return Promise.reject(new Error(t(\"auth.message.passwordRequire\")));\n\n    if (!PASSWORD_REGEXP.test(value))\n      return Promise.reject(new Error(t(\"auth.message.incorrectPassword\")));\n\n    return Promise.resolve();\n  },\n});\n\nexport const validateCompareValue =\n  (t, fieldName) =>\n  ({ getFieldValue }) => ({\n    validator(_, value) {\n      if (!value || getFieldValue(fieldName) === value) {\n        return Promise.resolve();\n      }\n      return Promise.reject(new Error(t(\"auth.message.notMatchPassword\")));\n    },\n  });\n\nexport const handleOnKeyPress = (e) => {\n  const specialCharRegex = /[0-9]/;\n  const pressedKey = String.fromCharCode(!e.charCode ? e.which : e.charCode);\n  if (!specialCharRegex.test(pressedKey)) {\n    e.preventDefault();\n    return false;\n  }\n  return false;\n};\n\nexport const empty = (mes = \"\") => ({\n  validator(_, value) {\n    const stringify = value?.toString();\n\n    if (value === undefined || value === null || stringify?.trim() === \"\") {\n      return Promise.reject(new Error(mes));\n    }\n    return Promise.resolve();\n  },\n});\n\nexport const emptyImg = (mes = \"\") => ({\n  validator(_, value) {\n    if (value?.fileList === undefined || value?.fileList?.length === 0) {\n      if (value?.length) {\n        return Promise.resolve();\n      }\n      return Promise.reject(new Error(mes));\n    }\n    return Promise.resolve();\n  },\n});\n\nexport const numberPreventInput = (value, form, field, fixNumber) => {\n  form.setFieldValue(\n    field,\n    replacePositionRangeNumber(value, null, null, fixNumber),\n  );\n};\n\nexport const coordinates = (value, form, field, posStart, posEnd) => {\n  form.setFieldValue(\n    field,\n    replacePositionRangeNumber(value, posStart, posEnd),\n  );\n};\n\nexport const checkBeforeUpload = (t, file, fileSize) => {\n  // check size file\n  const isLt8M = file.size / 1024 / 1024 < fileSize;\n  if (!isLt8M) {\n    message.error(t(\"validate.imageRequireLess2mb\"));\n    return isLt8M || Upload.LIST_IGNORE;\n  }\n\n  // check type file\n  const isJpgOrPng = [\"image/jpeg\", \"image/png\"].includes(file.type);\n\n  if (!isJpgOrPng) {\n    message.error(t(\"validate.notImageFormat\"));\n    return isJpgOrPng || Upload.LIST_IGNORE;\n  }\n\n  // check last file name includes jpeg or png\n  const checkLastNameFile = [\"jpg\", \"png\", \"jpeg\"].includes(\n    file?.name?.split(\".\")?.at(-1),\n  );\n\n  if (!checkLastNameFile) {\n    message.error(t(\"validate.notImageFormat\"));\n    return checkLastNameFile || Upload.LIST_IGNORE;\n  }\n\n  return false;\n};\n\nexport const getFileExtension = (fileName) => {\n  const parts = fileName.split(\".\");\n  return parts[parts.length - 1].toLowerCase();\n};\n\nexport const checkBeforeUploadFile = (\n  t,\n  file,\n  messageError,\n  allowFiles,\n  allowFileWindows,\n) => {\n  const extension = getFileExtension(file.name);\n  const allowFileWindow =\n    allowFileWindows.length && allowFileWindows.includes(extension);\n\n  if (!allowFileWindow) {\n    message.error(messageError);\n    return allowFileWindow || Upload.LIST_IGNORE;\n  }\n\n  return false;\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}