{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport dayjs from \"dayjs\";\nimport { t } from \"i18next\";\nimport { Button, Form, message } from \"antd\";\nimport { useForm } from \"antd/es/form/Form\";\nimport { CONDITIONS_DATA, UNIT_DATA, USER_TARGET } from \"@common/constant/masterData\";\nimport { MyComponents } from \"@components/form\";\nimport { numberPreventInput } from \"@validate/validate\";\nimport { adminApi } from \"@services/apis/admin\";\nimport { prepareCsvToDownload } from \"@common/utils/csv\";\nimport { disableAfterDateWithParams, disableBeforeDateWithParams } from \"@common/utils/dateHelper\";\nimport { UploadOutlined } from \"@ant-design/icons\";\nimport { validate } from \"@validate/index\";\nimport useFetch from \"@common/hooks/useFetch\";\nimport { groupApi } from \"@services/apis/group\";\nimport { appendFormData } from \"@common/utils/appendFormData\";\nfunction DataList() {\n  _s();\n  const [form] = useForm();\n  const [userTarget, setUserTarget] = useState(null);\n  const [pagination, setPagination] = useState({\n    page: 1,\n    limit: 10,\n    keyword: \"\"\n  });\n  const [dataCSV, setDataCSV] = useState([]);\n  const [loadingSubmit, setLoadingSubmit] = useState(false);\n  const {\n    value: listGroup\n  } = useFetch(ourRequest => groupApi.getGroups(pagination, ourRequest), [pagination]);\n  async function getDataGroup(id) {\n    try {\n      const response = await groupApi.getDetailGroups({\n        id\n      });\n      return response.users;\n    } catch (error) {\n      console.error(error);\n      throw error;\n    }\n  }\n  const handleFinish = async values => {\n    try {\n      var _values$userId;\n      setLoadingSubmit(true);\n      let userId = [];\n\n      // Get list UserId by All Group\n      if (values !== null && values !== void 0 && values.userId && values !== null && values !== void 0 && (_values$userId = values.userId) !== null && _values$userId !== void 0 && _values$userId.length) {\n        const promises = values === null || values === void 0 ? void 0 : values.userId.map(id => getDataGroup(id));\n        await Promise.all(promises).then(results => {\n          const listUserGroup = results.flatMap(subArray => subArray);\n          const uniqueIdsSet = new Set(listUserGroup.map(item => item.id));\n          userId = Array.from(uniqueIdsSet);\n        }).catch(error => {\n          console.error(error);\n        });\n      }\n      const payload = {\n        ...values,\n        start: dayjs(values.start).format(\"YYYY-MM-DD\"),\n        end: dayjs(values.end).format(\"YYYY-MM-DD\"),\n        take: parseInt(values.take, 10),\n        userId\n      };\n      delete payload.userTarget;\n      if (dataCSV[0]) {\n        delete payload.userId;\n      }\n      adminApi.postRideResultCsv(dataCSV !== null && dataCSV !== void 0 && dataCSV.length ? appendFormData({\n        ...payload,\n        file: dataCSV[0]\n      }) : payload).then(res => {\n        prepareCsvToDownload(res, `RideResult_${dayjs().format(\"YYYYMMDD_HHmmss\").toString()}`);\n      }).catch(err => {\n        var _err$response, _err$response2, _err$response2$data;\n        if ((err === null || err === void 0 ? void 0 : (_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.status) === 400 || (err === null || err === void 0 ? void 0 : (_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.message) === \"file_content_wrong_format\") {\n          message.error(t(\"dataManagement.csvError\"));\n        }\n      });\n    } catch (error) {\n      console.error({\n        error\n      });\n    } finally {\n      setLoadingSubmit(false);\n    }\n  };\n  const convertListOptions = list => {\n    if (!list) return [];\n    return list === null || list === void 0 ? void 0 : list.map(item => ({\n      key: item === null || item === void 0 ? void 0 : item.id,\n      value: item === null || item === void 0 ? void 0 : item.id,\n      label: item === null || item === void 0 ? void 0 : item.name\n    }));\n  };\n  const onChangeUserTarget = e => {\n    setUserTarget(e.target.value);\n    // clear data select\n    if (e.target.value !== 3) {\n      form.setFieldValue(\"file\", null);\n      setDataCSV([]);\n    } else if (e.target.value !== 2) form.setFieldValue(\"userId\", []);\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\"\n  }, /*#__PURE__*/React.createElement(Form, {\n    className: \"form-data-management\",\n    layout: \"vertical\",\n    colon: false,\n    form: form,\n    onFinish: handleFinish\n  }, /*#__PURE__*/React.createElement(MyComponents.Radio, {\n    label: t(\"dataManagement.userTarget\"),\n    name: \"userTarget\",\n    radioValues: USER_TARGET,\n    rules: [{\n      required: true\n    }],\n    onChange: onChangeUserTarget\n  }), userTarget === 2 && /*#__PURE__*/React.createElement(MyComponents.Select, {\n    name: \"userId\",\n    placeholder: t(\"dataManagement.group\"),\n    listOptions: convertListOptions((listGroup === null || listGroup === void 0 ? void 0 : listGroup.data) || []),\n    mode: \"multiple\",\n    rules: [{\n      required: true,\n      message: t(\"validate.notEmpty\", {\n        fieldName: t(\"dataManagement.group\")\n      })\n    }]\n  }), userTarget === 3 && /*#__PURE__*/React.createElement(MyComponents.UploadFile, {\n    name: \"file\",\n    rules: [{\n      required: true,\n      message: \"\"\n    }, validate.emptyImg(t(\"validate.notEmpty\", {\n      fieldName: t(\"dataManagement.uploadFile\")\n    }))],\n    setDataCSV: setDataCSV\n  }, /*#__PURE__*/React.createElement(Button, {\n    icon: /*#__PURE__*/React.createElement(UploadOutlined, null)\n  }, \"CSV\")), /*#__PURE__*/React.createElement(MyComponents.DatePicker, {\n    label: t(\"dataManagement.startDate\"),\n    placeholder: t(\"dataManagement.startDate\"),\n    name: \"start\",\n    className: \"form-item\",\n    rules: [{\n      required: true\n    }],\n    disableDate: currentDate => disableAfterDateWithParams(currentDate, form.getFieldValue(\"end\") || dayjs())\n  }), /*#__PURE__*/React.createElement(MyComponents.DatePicker, {\n    label: t(\"dataManagement.endDate\"),\n    placeholder: t(\"dataManagement.endDate\"),\n    name: \"end\",\n    className: \"form-item\",\n    rules: [{\n      required: true\n    }],\n    disableDate: currentDate => disableBeforeDateWithParams(currentDate, form.getFieldValue(\"start\")) || disableAfterDateWithParams(currentDate, dayjs())\n  }), /*#__PURE__*/React.createElement(MyComponents.TreeSelect, {\n    label: t(\"dataManagement.conditions\"),\n    name: \"conditionStatistics\",\n    isCheckable: false,\n    treeData: CONDITIONS_DATA,\n    rules: [{\n      required: true\n    }]\n  }), /*#__PURE__*/React.createElement(MyComponents.Radio, {\n    label: t(\"dataManagement.unit\"),\n    name: \"unitStatistics\",\n    radioValues: UNIT_DATA,\n    rules: [{\n      required: true\n    }]\n  }), /*#__PURE__*/React.createElement(MyComponents.TextField, {\n    label: t(\"dataManagement.ranking\"),\n    name: \"take\",\n    onChange: e => numberPreventInput(e.target.value, form, \"take\", 2),\n    rules: [{\n      required: true\n    }]\n  }), /*#__PURE__*/React.createElement(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: loadingSubmit\n  }, t(\"dataManagement.exportCsv\"))));\n}\n_s(DataList, \"RFTOugRC1s7kZrBs0gTcke0rdcE=\", false, function () {\n  return [useForm, useFetch];\n});\n_c = DataList;\nDataList.propTypes = {};\nexport default DataList;\nvar _c;\n$RefreshReg$(_c, \"DataList\");","map":{"version":3,"mappings":"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","names":["React","useState","dayjs","t","Button","Form","message","useForm","CONDITIONS_DATA","UNIT_DATA","USER_TARGET","MyComponents","numberPreventInput","adminApi","prepareCsvToDownload","disableAfterDateWithParams","disableBeforeDateWithParams","UploadOutlined","validate","useFetch","groupApi","appendFormData","DataList","form","userTarget","setUserTarget","pagination","setPagination","page","limit","keyword","dataCSV","setDataCSV","loadingSubmit","setLoadingSubmit","value","listGroup","ourRequest","getGroups","getDataGroup","id","response","getDetailGroups","users","error","console","handleFinish","values","userId","length","promises","map","Promise","all","then","results","listUserGroup","flatMap","subArray","uniqueIdsSet","Set","item","Array","from","catch","payload","start","format","end","take","parseInt","postRideResultCsv","file","res","toString","err","status","data","convertListOptions","list","key","label","name","onChangeUserTarget","e","target","setFieldValue","className","layout","colon","onFinish","Radio","radioValues","rules","required","onChange","Select","placeholder","listOptions","mode","fieldName","UploadFile","emptyImg","icon","DatePicker","disableDate","currentDate","getFieldValue","TreeSelect","isCheckable","treeData","TextField","type","htmlType","loading","propTypes"],"sources":["/home/huynd/animalwatch_admin/src/pages/manager/data/DataList.jsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport dayjs from \"dayjs\";\nimport { t } from \"i18next\";\nimport { Button, Form, message } from \"antd\";\nimport { useForm } from \"antd/es/form/Form\";\n\nimport {\n  CONDITIONS_DATA,\n  UNIT_DATA,\n  USER_TARGET,\n} from \"@common/constant/masterData\";\nimport { MyComponents } from \"@components/form\";\nimport { numberPreventInput } from \"@validate/validate\";\nimport { adminApi } from \"@services/apis/admin\";\nimport { prepareCsvToDownload } from \"@common/utils/csv\";\nimport {\n  disableAfterDateWithParams,\n  disableBeforeDateWithParams,\n} from \"@common/utils/dateHelper\";\nimport { UploadOutlined } from \"@ant-design/icons\";\nimport { validate } from \"@validate/index\";\nimport useFetch from \"@common/hooks/useFetch\";\nimport { groupApi } from \"@services/apis/group\";\nimport { appendFormData } from \"@common/utils/appendFormData\";\n\nfunction DataList() {\n  const [form] = useForm();\n  const [userTarget, setUserTarget] = useState(null);\n  const [pagination, setPagination] = useState({\n    page: 1,\n    limit: 10,\n    keyword: \"\",\n  });\n  const [dataCSV, setDataCSV] = useState([]);\n  const [loadingSubmit, setLoadingSubmit] = useState(false);\n\n  const { value: listGroup } = useFetch(\n    (ourRequest) => groupApi.getGroups(pagination, ourRequest),\n    [pagination],\n  );\n\n  async function getDataGroup(id) {\n    try {\n      const response = await groupApi.getDetailGroups({ id });\n      return response.users;\n    } catch (error) {\n      console.error(error);\n      throw error;\n    }\n  }\n\n  const handleFinish = async (values) => {\n    try {\n      setLoadingSubmit(true);\n      let userId = [];\n\n      // Get list UserId by All Group\n      if (values?.userId && values?.userId?.length) {\n        const promises = values?.userId.map((id) => getDataGroup(id));\n        await Promise.all(promises)\n          .then((results) => {\n            const listUserGroup = results.flatMap((subArray) => subArray);\n            const uniqueIdsSet = new Set(listUserGroup.map((item) => item.id));\n            userId = Array.from(uniqueIdsSet);\n          })\n          .catch((error) => {\n            console.error(error);\n          });\n      }\n\n      const payload = {\n        ...values,\n        start: dayjs(values.start).format(\"YYYY-MM-DD\"),\n        end: dayjs(values.end).format(\"YYYY-MM-DD\"),\n        take: parseInt(values.take, 10),\n        userId,\n      };\n      delete payload.userTarget;\n\n      if (dataCSV[0]) {\n        delete payload.userId;\n      }\n\n      adminApi\n        .postRideResultCsv(\n          dataCSV?.length\n            ? appendFormData({\n                ...payload,\n                file: dataCSV[0],\n              })\n            : payload,\n        )\n        .then((res) => {\n          prepareCsvToDownload(\n            res,\n            `RideResult_${dayjs().format(\"YYYYMMDD_HHmmss\").toString()}`,\n          );\n        })\n        .catch((err) => {\n          if (\n            err?.response?.status === 400 ||\n            err?.response?.data?.message === \"file_content_wrong_format\"\n          ) {\n            message.error(t(\"dataManagement.csvError\"));\n          }\n        });\n    } catch (error) {\n      console.error({ error });\n    } finally {\n      setLoadingSubmit(false);\n    }\n  };\n\n  const convertListOptions = (list) => {\n    if (!list) return [];\n    return list?.map((item) => ({\n      key: item?.id,\n      value: item?.id,\n      label: item?.name,\n    }));\n  };\n\n  const onChangeUserTarget = (e) => {\n    setUserTarget(e.target.value);\n    // clear data select\n    if (e.target.value !== 3) {\n      form.setFieldValue(\"file\", null);\n      setDataCSV([]);\n    } else if (e.target.value !== 2) form.setFieldValue(\"userId\", []);\n  };\n\n  return (\n    <div className=\"container\">\n      <Form\n        className=\"form-data-management\"\n        layout=\"vertical\"\n        colon={false}\n        form={form}\n        onFinish={handleFinish}\n      >\n        <MyComponents.Radio\n          label={t(\"dataManagement.userTarget\")}\n          name=\"userTarget\"\n          radioValues={USER_TARGET}\n          rules={[{ required: true }]}\n          onChange={onChangeUserTarget}\n        />\n        {userTarget === 2 && (\n          <MyComponents.Select\n            name=\"userId\"\n            placeholder={t(\"dataManagement.group\")}\n            listOptions={convertListOptions(listGroup?.data || [])}\n            mode=\"multiple\"\n            rules={[\n              {\n                required: true,\n                message: t(\"validate.notEmpty\", {\n                  fieldName: t(\"dataManagement.group\"),\n                }),\n              },\n            ]}\n          />\n        )}\n        {userTarget === 3 && (\n          <MyComponents.UploadFile\n            name=\"file\"\n            rules={[\n              {\n                required: true,\n                message: \"\",\n              },\n              validate.emptyImg(\n                t(\"validate.notEmpty\", {\n                  fieldName: t(\"dataManagement.uploadFile\"),\n                }),\n              ),\n            ]}\n            setDataCSV={setDataCSV}\n          >\n            <Button icon={<UploadOutlined />}>CSV</Button>\n          </MyComponents.UploadFile>\n        )}\n        <MyComponents.DatePicker\n          label={t(\"dataManagement.startDate\")}\n          placeholder={t(\"dataManagement.startDate\")}\n          name=\"start\"\n          className=\"form-item\"\n          rules={[{ required: true }]}\n          disableDate={(currentDate) =>\n            disableAfterDateWithParams(\n              currentDate,\n              form.getFieldValue(\"end\") || dayjs(),\n            )\n          }\n        />\n        <MyComponents.DatePicker\n          label={t(\"dataManagement.endDate\")}\n          placeholder={t(\"dataManagement.endDate\")}\n          name=\"end\"\n          className=\"form-item\"\n          rules={[{ required: true }]}\n          disableDate={(currentDate) =>\n            disableBeforeDateWithParams(\n              currentDate,\n              form.getFieldValue(\"start\"),\n            ) || disableAfterDateWithParams(currentDate, dayjs())\n          }\n        />\n        <MyComponents.TreeSelect\n          label={t(\"dataManagement.conditions\")}\n          name=\"conditionStatistics\"\n          isCheckable={false}\n          treeData={CONDITIONS_DATA}\n          rules={[{ required: true }]}\n        />\n        <MyComponents.Radio\n          label={t(\"dataManagement.unit\")}\n          name=\"unitStatistics\"\n          radioValues={UNIT_DATA}\n          rules={[{ required: true }]}\n        />\n        <MyComponents.TextField\n          label={t(\"dataManagement.ranking\")}\n          name=\"take\"\n          onChange={(e) => numberPreventInput(e.target.value, form, \"take\", 2)}\n          rules={[{ required: true }]}\n        />\n\n        <Button type=\"primary\" htmlType=\"submit\" loading={loadingSubmit}>\n          {t(\"dataManagement.exportCsv\")}\n        </Button>\n      </Form>\n    </div>\n  );\n}\n\nDataList.propTypes = {};\n\nexport default DataList;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}