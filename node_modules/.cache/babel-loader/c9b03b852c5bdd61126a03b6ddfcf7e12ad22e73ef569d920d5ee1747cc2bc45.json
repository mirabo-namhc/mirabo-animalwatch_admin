{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useCallback, useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Axios from \"axios\";\nfunction useFetch(callback) {\n  _s();\n  let dependencies = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState();\n  const [value, setValue] = useState();\n  const callbackMemoized = useCallback(ourRequest => {\n    setLoading(true);\n    setError(undefined);\n    // setValue(undefined);\n    callback(ourRequest).then(setValue).catch(setError).finally(() => setLoading(false));\n  }, dependencies);\n  useEffect(() => {\n    const ourRequest = Axios.CancelToken.source();\n    callbackMemoized(ourRequest.token);\n    return () => {\n      ourRequest.cancel();\n    };\n  }, [callbackMemoized]);\n  return {\n    loading,\n    error,\n    value\n  };\n}\n_s(useFetch, \"tllnvOFDsFTMvYuLPRYwnZrGrUQ=\");\nuseFetch.propTypes = {\n  callback: PropTypes.func,\n  dependencies: PropTypes.array\n};\nexport default useFetch;","map":{"version":3,"mappings":";AAAA,SAASA,WAAW,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AACxD,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,KAAK,MAAM,OAAO;AAEzB,SAASC,QAAQ,CAACC,QAAQ,EAAqB;EAAA;EAAA,IAAnBC,YAAY,uEAAG,EAAE;EAC3C,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACQ,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,EAAE;EACpC,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,EAAE;EAEpC,MAAMY,gBAAgB,GAAGd,WAAW,CAAEe,UAAU,IAAK;IACnDN,UAAU,CAAC,IAAI,CAAC;IAChBE,QAAQ,CAACK,SAAS,CAAC;IACnB;IACAV,QAAQ,CAACS,UAAU,CAAC,CACjBE,IAAI,CAACJ,QAAQ,CAAC,CACdK,KAAK,CAACP,QAAQ,CAAC,CACfQ,OAAO,CAAC,MAAMV,UAAU,CAAC,KAAK,CAAC,CAAC;EACrC,CAAC,EAAEF,YAAY,CAAC;EAEhBN,SAAS,CAAC,MAAM;IACd,MAAMc,UAAU,GAAGX,KAAK,CAACgB,WAAW,CAACC,MAAM,EAAE;IAC7CP,gBAAgB,CAACC,UAAU,CAACO,KAAK,CAAC;IAElC,OAAO,MAAM;MACXP,UAAU,CAACQ,MAAM,EAAE;IACrB,CAAC;EACH,CAAC,EAAE,CAACT,gBAAgB,CAAC,CAAC;EAEtB,OAAO;IAAEN,OAAO;IAAEE,KAAK;IAAEE;EAAM,CAAC;AAClC;AAAA,GAzBSP,QAAQ;AA2BjBA,QAAQ,CAACmB,SAAS,GAAG;EACnBlB,QAAQ,EAAEH,SAAS,CAACsB,IAAI;EACxBlB,YAAY,EAAEJ,SAAS,CAACuB;AAC1B,CAAC;AAED,eAAerB,QAAQ","names":["useCallback","useEffect","useState","PropTypes","Axios","useFetch","callback","dependencies","loading","setLoading","error","setError","value","setValue","callbackMemoized","ourRequest","undefined","then","catch","finally","CancelToken","source","token","cancel","propTypes","func","array"],"sources":["/home/huynd/animalwatch_admin/src/common/hooks/useFetch.jsx"],"sourcesContent":["import { useCallback, useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Axios from \"axios\";\n\nfunction useFetch(callback, dependencies = []) {\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState();\n  const [value, setValue] = useState();\n\n  const callbackMemoized = useCallback((ourRequest) => {\n    setLoading(true);\n    setError(undefined);\n    // setValue(undefined);\n    callback(ourRequest)\n      .then(setValue)\n      .catch(setError)\n      .finally(() => setLoading(false));\n  }, dependencies);\n\n  useEffect(() => {\n    const ourRequest = Axios.CancelToken.source();\n    callbackMemoized(ourRequest.token);\n\n    return () => {\n      ourRequest.cancel();\n    };\n  }, [callbackMemoized]);\n\n  return { loading, error, value };\n}\n\nuseFetch.propTypes = {\n  callback: PropTypes.func,\n  dependencies: PropTypes.array,\n};\n\nexport default useFetch;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}