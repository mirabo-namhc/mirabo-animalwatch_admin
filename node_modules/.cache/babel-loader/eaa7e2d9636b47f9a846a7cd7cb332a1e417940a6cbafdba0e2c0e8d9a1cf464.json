{"ast":null,"code":"var _s = $RefreshSig$();\nimport { t } from \"i18next\";\nimport PropTypes from \"prop-types\";\nimport React, { useState } from \"react\";\nimport { ExclamationCircleOutlined } from \"@ant-design/icons\";\nimport { IMAGE_URL } from \"@common/config/endpoint\";\nimport useFetch from \"@common/hooks/useFetch\";\nimport ComTable from \"@components/common/ComTable\";\nimport { courseApi } from \"@services/apis/course\";\nimport { Button, message, Modal } from \"antd\";\nfunction BadgeList(_ref) {\n  _s();\n  var _value$paginate;\n  let {\n    id,\n    reloadData,\n    onOpenModalBadge\n  } = _ref;\n  const [refetch, setRefetch] = useState(\"\");\n  const [pagination, setPagination] = useState({\n    page: 1,\n    limit: 10,\n    courseId: id\n  });\n  const {\n    loading,\n    value\n  } = useFetch(() => courseApi.getBadges(pagination), [pagination, refetch, reloadData]);\n  const handleDelete = badgeId => {\n    courseApi.deleteBadge(badgeId).then(() => {\n      setRefetch(`deleteBadge-${badgeId}`);\n      message.success(t(\"managementCourses.noti.deleteBadgeSuccess\"));\n    }).catch(() => {\n      message.error(t(\"managementCourses.noti.deleteBadgeFail\"));\n    });\n  };\n  const onChangePagination = (currentPage, totalItemPerPage) => {\n    setPagination(curState => ({\n      ...curState,\n      page: currentPage,\n      limit: totalItemPerPage\n    }));\n  };\n  const confirm = badgeId => {\n    Modal.confirm({\n      icon: /*#__PURE__*/React.createElement(ExclamationCircleOutlined, null),\n      centered: true,\n      content: t(\"managementCourses.modal.textConfirmDelBadge\"),\n      okText: t(\"managementCourses.modal.textYes\"),\n      cancelText: t(\"managementCourses.modal.textNo\"),\n      onOk: () => handleDelete(badgeId)\n    });\n  };\n  const columns = [{\n    title: \"ID\",\n    dataIndex: \"id\",\n    width: 100,\n    align: \"center\"\n  }, {\n    title: t(\"managementCourses.form.badge.title\"),\n    dataIndex: \"title\",\n    align: \"center\"\n  }, {\n    title: t(\"managementCourses.form.badge.image\"),\n    dataIndex: \"image\",\n    align: \"center\",\n    render: image => /*#__PURE__*/React.createElement(\"img\", {\n      className: \"img-badge\",\n      src: `${IMAGE_URL}${image}/original.jpg`,\n      alt: \"img-badge\"\n    })\n  }, {\n    title: t(\"managementCourses.form.badge.conditions\"),\n    dataIndex: \"condition\",\n    align: \"center\"\n  }, {\n    title: t(\"managementCourses.list.operation\"),\n    align: \"center\",\n    render: badge => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {\n      className: \"btn submit-btn ml-10\",\n      type: \"primary\",\n      onClick: e => {\n        e.stopPropagation();\n        onOpenModalBadge(\"EDIT\", badge);\n      }\n    }, \"\\u7DE8 \\u96C6\"), /*#__PURE__*/React.createElement(Button, {\n      className: \"btn submit-btn ml-10\",\n      type: \"primary\",\n      onClick: e => {\n        e.stopPropagation();\n        confirm(badge.id);\n      }\n    }, \"\\u524A \\u9664\"))\n  }];\n  const totalPage = value === null || value === void 0 ? void 0 : (_value$paginate = value.paginate) === null || _value$paginate === void 0 ? void 0 : _value$paginate.totalPage;\n  const paginationProp = {\n    position: [\"bottomRight\"],\n    total: totalPage * pagination.limit,\n    showSizeChanger: true,\n    onChange: onChangePagination,\n    current: pagination.page\n  };\n  return /*#__PURE__*/React.createElement(ComTable, {\n    title: t(\"managementCourses.titleTableBadge\"),\n    maxWidth: 900,\n    columns: columns,\n    loading: loading,\n    data: (value === null || value === void 0 ? void 0 : value.data) || [],\n    pagination: paginationProp\n  });\n}\n_s(BadgeList, \"kSJa4XznQ1oYuvFvPcXUSVQe2M4=\", false, function () {\n  return [useFetch];\n});\n_c = BadgeList;\nBadgeList.propTypes = {\n  id: PropTypes.number,\n  reloadData: PropTypes.bool,\n  onOpenModalBadge: PropTypes.func\n};\nexport default BadgeList;\nvar _c;\n$RefreshReg$(_c, \"BadgeList\");","map":{"version":3,"mappings":"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","names":["t","PropTypes","React","useState","ExclamationCircleOutlined","IMAGE_URL","useFetch","ComTable","courseApi","Button","message","Modal","BadgeList","id","reloadData","onOpenModalBadge","refetch","setRefetch","pagination","setPagination","page","limit","courseId","loading","value","getBadges","handleDelete","badgeId","deleteBadge","then","success","catch","error","onChangePagination","currentPage","totalItemPerPage","curState","confirm","icon","centered","content","okText","cancelText","onOk","columns","title","dataIndex","width","align","render","image","className","src","alt","badge","type","onClick","e","stopPropagation","totalPage","paginate","paginationProp","position","total","showSizeChanger","onChange","current","maxWidth","data","propTypes","number","bool","func"],"sources":["/home/huynd/animalwatch_admin/src/pages/manager/course/BadgeList.jsx"],"sourcesContent":["import { t } from \"i18next\";\nimport PropTypes from \"prop-types\";\nimport React, { useState } from \"react\";\n\nimport { ExclamationCircleOutlined } from \"@ant-design/icons\";\nimport { IMAGE_URL } from \"@common/config/endpoint\";\nimport useFetch from \"@common/hooks/useFetch\";\nimport ComTable from \"@components/common/ComTable\";\nimport { courseApi } from \"@services/apis/course\";\nimport { Button, message, Modal } from \"antd\";\n\nfunction BadgeList({ id, reloadData, onOpenModalBadge }) {\n  const [refetch, setRefetch] = useState(\"\");\n  const [pagination, setPagination] = useState({\n    page: 1,\n    limit: 10,\n    courseId: id,\n  });\n\n  const { loading, value } = useFetch(\n    () => courseApi.getBadges(pagination),\n    [pagination, refetch, reloadData],\n  );\n\n  const handleDelete = (badgeId) => {\n    courseApi\n      .deleteBadge(badgeId)\n      .then(() => {\n        setRefetch(`deleteBadge-${badgeId}`);\n        message.success(t(\"managementCourses.noti.deleteBadgeSuccess\"));\n      })\n      .catch(() => {\n        message.error(t(\"managementCourses.noti.deleteBadgeFail\"));\n      });\n  };\n\n  const onChangePagination = (currentPage, totalItemPerPage) => {\n    setPagination((curState) => ({\n      ...curState,\n      page: currentPage,\n      limit: totalItemPerPage,\n    }));\n  };\n\n  const confirm = (badgeId) => {\n    Modal.confirm({\n      icon: <ExclamationCircleOutlined />,\n      centered: true,\n      content: t(\"managementCourses.modal.textConfirmDelBadge\"),\n      okText: t(\"managementCourses.modal.textYes\"),\n      cancelText: t(\"managementCourses.modal.textNo\"),\n      onOk: () => handleDelete(badgeId),\n    });\n  };\n\n  const columns = [\n    { title: \"ID\", dataIndex: \"id\", width: 100, align: \"center\" },\n    {\n      title: t(\"managementCourses.form.badge.title\"),\n      dataIndex: \"title\",\n      align: \"center\",\n    },\n    {\n      title: t(\"managementCourses.form.badge.image\"),\n      dataIndex: \"image\",\n      align: \"center\",\n      render: (image) => (\n        <img\n          className=\"img-badge\"\n          src={`${IMAGE_URL}${image}/original.jpg`}\n          alt=\"img-badge\"\n        />\n      ),\n    },\n    {\n      title: t(\"managementCourses.form.badge.conditions\"),\n      dataIndex: \"condition\",\n      align: \"center\",\n    },\n    {\n      title: t(\"managementCourses.list.operation\"),\n      align: \"center\",\n      render: (badge) => (\n        <>\n          <Button\n            className=\"btn submit-btn ml-10\"\n            type=\"primary\"\n            onClick={(e) => {\n              e.stopPropagation();\n              onOpenModalBadge(\"EDIT\", badge);\n            }}\n          >\n            編 集\n          </Button>\n          <Button\n            className=\"btn submit-btn ml-10\"\n            type=\"primary\"\n            onClick={(e) => {\n              e.stopPropagation();\n              confirm(badge.id);\n            }}\n          >\n            削 除\n          </Button>\n        </>\n      ),\n    },\n  ];\n\n  const totalPage = value?.paginate?.totalPage;\n  const paginationProp = {\n    position: [\"bottomRight\"],\n    total: totalPage * pagination.limit,\n    showSizeChanger: true,\n    onChange: onChangePagination,\n    current: pagination.page,\n  };\n\n  return (\n    <ComTable\n      title={t(\"managementCourses.titleTableBadge\")}\n      maxWidth={900}\n      columns={columns}\n      loading={loading}\n      data={value?.data || []}\n      pagination={paginationProp}\n    />\n  );\n}\n\nBadgeList.propTypes = {\n  id: PropTypes.number,\n  reloadData: PropTypes.bool,\n  onOpenModalBadge: PropTypes.func,\n};\n\nexport default BadgeList;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}