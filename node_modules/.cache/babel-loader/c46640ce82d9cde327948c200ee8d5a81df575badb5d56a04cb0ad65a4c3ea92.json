{"ast":null,"code":"var _s = $RefreshSig$();\nimport { ExclamationCircleOutlined } from \"@ant-design/icons\";\nimport { Button, message, Modal } from \"antd\";\nimport { t } from \"i18next\";\nimport React, { useState } from \"react\";\nimport PATH_URL from \"@common/config/pathURL\";\nimport useFetch from \"@common/hooks/useFetch\";\nimport ComTable from \"@components/common/ComTable\";\nimport { groupApi } from \"@services/apis/group\";\nimport { useNavigate } from \"react-router-dom\";\nfunction GroupList() {\n  _s();\n  var _value$paginate;\n  const navigate = useNavigate();\n  const [refetch, setRefetch] = useState(false);\n  const [pagination, setPagination] = useState({\n    page: 1,\n    limit: 10,\n    keyword: \"\"\n  });\n  const {\n    loading,\n    value\n  } = useFetch(ourRequest => groupApi.getGroups(pagination, ourRequest), [pagination, refetch]);\n  const handleSearch = keyWord => {\n    setPagination(curState => ({\n      ...curState,\n      keyword: keyWord === null || keyWord === void 0 ? void 0 : keyWord.trim(),\n      page: 1\n    }));\n  };\n  const handleChangeTable = (currentPage, totalItemPerPage) => {\n    setPagination(curState => ({\n      ...curState,\n      page: currentPage,\n      limit: totalItemPerPage\n    }));\n  };\n  const handleCreate = () => {\n    navigate(PATH_URL.GROUP_MANAGERMENT.CREATE);\n  };\n  const handleEditGroup = (e, group) => {\n    e.stopPropagation();\n    navigate(PATH_URL.VERSION_MANAGERMENT.EDIT, {\n      state: group\n    });\n  };\n  const handleDetail = async record => {\n    navigate(PATH_URL.GROUP_MANAGERMENT.DETAIL, {\n      state: record\n    });\n  };\n  const handleDeleteGroup = groupId => {\n    groupApi.deleteGroup(groupId).then(() => {\n      setRefetch(preState => !preState);\n      message.success(t(\"groupManagement.message.deleteSuccess\"));\n    }).catch(() => {\n      message.error(t(\"groupManagement.message.deleteErr\"));\n    });\n  };\n  const confirm = groupId => {\n    Modal.confirm({\n      icon: /*#__PURE__*/React.createElement(ExclamationCircleOutlined, null),\n      centered: true,\n      content: t(\"groupManagement.modal.textConfirmDel\"),\n      okText: t(\"groupManagement.modal.textYes\"),\n      cancelText: t(\"groupManagement.modal.textNo\"),\n      onOk: () => handleDeleteGroup(groupId)\n    });\n  };\n  const columns = [{\n    title: t(\"groupManagement.list.id\"),\n    dataIndex: \"id\",\n    align: \"center\",\n    width: 120\n  }, {\n    title: t(\"groupManagement.list.name\"),\n    dataIndex: \"name\",\n    align: \"center\",\n    sorter: (a, b) => a.id - b.id,\n    sortDirections: [\"ascend\"]\n  }, {\n    title: t(\"groupManagement.list.operation\"),\n    align: \"center\",\n    width: 300,\n    render: group => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"full-height full-width\"\n    }, /*#__PURE__*/React.createElement(Button, {\n      type: \"primary\",\n      className: \"mr-10\",\n      onClick: e => handleEditGroup(e, group)\n    }, t(\"table.btnEdit\")), /*#__PURE__*/React.createElement(Button, {\n      type: \"primary\",\n      onClick: e => {\n        e.stopPropagation();\n        confirm(group.id);\n      }\n    }, t(\"table.btnDel\")))\n  }];\n  const totalPage = value === null || value === void 0 ? void 0 : (_value$paginate = value.paginate) === null || _value$paginate === void 0 ? void 0 : _value$paginate.totalPage;\n  const paginationProps = {\n    position: [\"bottomRight\"],\n    total: totalPage * 10,\n    current: pagination.page,\n    showSizeChanger: true,\n    onChange: handleChangeTable\n  };\n  return /*#__PURE__*/React.createElement(ComTable, {\n    title: t(\"groupManagement.title\"),\n    loading: loading,\n    columns: columns,\n    data: value === null || value === void 0 ? void 0 : value.data,\n    pagination: paginationProps,\n    onAddTable: handleCreate,\n    onSearch: handleSearch,\n    onClickRow: handleDetail\n  });\n}\n_s(GroupList, \"lh2BU8qi241iI/wTmUImrMH0dYc=\", false, function () {\n  return [useNavigate, useFetch];\n});\n_c = GroupList;\nexport default GroupList;\nvar _c;\n$RefreshReg$(_c, \"GroupList\");","map":{"version":3,"mappings":"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","names":["ExclamationCircleOutlined","Button","message","Modal","t","React","useState","PATH_URL","useFetch","ComTable","groupApi","useNavigate","GroupList","navigate","refetch","setRefetch","pagination","setPagination","page","limit","keyword","loading","value","ourRequest","getGroups","handleSearch","keyWord","curState","trim","handleChangeTable","currentPage","totalItemPerPage","handleCreate","GROUP_MANAGERMENT","CREATE","handleEditGroup","e","group","stopPropagation","VERSION_MANAGERMENT","EDIT","state","handleDetail","record","DETAIL","handleDeleteGroup","groupId","deleteGroup","then","preState","success","catch","error","confirm","icon","centered","content","okText","cancelText","onOk","columns","title","dataIndex","align","width","sorter","a","b","id","sortDirections","render","className","type","onClick","totalPage","paginate","paginationProps","position","total","current","showSizeChanger","onChange","data","onAddTable","onSearch","onClickRow"],"sources":["/home/huynd/animalwatch_admin/src/pages/manager/group/GroupList.jsx"],"sourcesContent":["import { ExclamationCircleOutlined } from \"@ant-design/icons\";\nimport { Button, message, Modal } from \"antd\";\nimport { t } from \"i18next\";\nimport React, { useState } from \"react\";\n\nimport PATH_URL from \"@common/config/pathURL\";\nimport useFetch from \"@common/hooks/useFetch\";\nimport ComTable from \"@components/common/ComTable\";\nimport { groupApi } from \"@services/apis/group\";\nimport { useNavigate } from \"react-router-dom\";\n\nfunction GroupList() {\n  const navigate = useNavigate();\n  const [refetch, setRefetch] = useState(false);\n  const [pagination, setPagination] = useState({\n    page: 1,\n    limit: 10,\n    keyword: \"\",\n  });\n\n  const { loading, value } = useFetch(\n    (ourRequest) => groupApi.getGroups(pagination, ourRequest),\n    [pagination, refetch],\n  );\n\n  const handleSearch = (keyWord) => {\n    setPagination((curState) => ({\n      ...curState,\n      keyword: keyWord?.trim(),\n      page: 1,\n    }));\n  };\n\n  const handleChangeTable = (currentPage, totalItemPerPage) => {\n    setPagination((curState) => ({\n      ...curState,\n      page: currentPage,\n      limit: totalItemPerPage,\n    }));\n  };\n\n  const handleCreate = () => {\n    navigate(PATH_URL.GROUP_MANAGERMENT.CREATE);\n  };\n\n  const handleEditGroup = (e, group) => {\n    e.stopPropagation();\n    navigate(PATH_URL.VERSION_MANAGERMENT.EDIT, { state: group });\n  };\n\n  const handleDetail = async (record) => {\n    navigate(PATH_URL.GROUP_MANAGERMENT.DETAIL, {\n      state: record,\n    });\n  };\n\n  const handleDeleteGroup = (groupId) => {\n    groupApi\n      .deleteGroup(groupId)\n      .then(() => {\n        setRefetch((preState) => !preState);\n        message.success(t(\"groupManagement.message.deleteSuccess\"));\n      })\n      .catch(() => {\n        message.error(t(\"groupManagement.message.deleteErr\"));\n      });\n  };\n\n  const confirm = (groupId) => {\n    Modal.confirm({\n      icon: <ExclamationCircleOutlined />,\n      centered: true,\n      content: t(\"groupManagement.modal.textConfirmDel\"),\n      okText: t(\"groupManagement.modal.textYes\"),\n      cancelText: t(\"groupManagement.modal.textNo\"),\n      onOk: () => handleDeleteGroup(groupId),\n    });\n  };\n\n  const columns = [\n    {\n      title: t(\"groupManagement.list.id\"),\n      dataIndex: \"id\",\n      align: \"center\",\n      width: 120,\n    },\n    {\n      title: t(\"groupManagement.list.name\"),\n      dataIndex: \"name\",\n      align: \"center\",\n      sorter: (a, b) => a.id - b.id,\n      sortDirections: [\"ascend\"],\n    },\n    {\n      title: t(\"groupManagement.list.operation\"),\n      align: \"center\",\n      width: 300,\n      render: (group) => (\n        <div className=\"full-height full-width\">\n          <Button\n            type=\"primary\"\n            className=\"mr-10\"\n            onClick={(e) => handleEditGroup(e, group)}\n          >\n            {t(\"table.btnEdit\")}\n          </Button>\n          <Button\n            type=\"primary\"\n            onClick={(e) => {\n              e.stopPropagation();\n              confirm(group.id);\n            }}\n          >\n            {t(\"table.btnDel\")}\n          </Button>\n        </div>\n      ),\n    },\n  ];\n\n  const totalPage = value?.paginate?.totalPage;\n  const paginationProps = {\n    position: [\"bottomRight\"],\n    total: totalPage * 10,\n    current: pagination.page,\n    showSizeChanger: true,\n    onChange: handleChangeTable,\n  };\n\n  return (\n    <ComTable\n      title={t(\"groupManagement.title\")}\n      loading={loading}\n      columns={columns}\n      data={value?.data}\n      pagination={paginationProps}\n      onAddTable={handleCreate}\n      onSearch={handleSearch}\n      onClickRow={handleDetail}\n    />\n  );\n}\n\nexport default GroupList;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}