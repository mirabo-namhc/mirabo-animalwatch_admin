{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { Button, message, Modal, Row, Form } from \"antd\";\nimport { useNavigate } from \"react-router-dom\";\nimport { ExclamationCircleOutlined, UploadOutlined } from \"@ant-design/icons\";\nimport { t } from \"i18next\";\nimport ComModal from \"@components/common/ComModal\";\nimport ComTable from \"@components/common/ComTable\";\nimport { userApi } from \"@services/apis/user\";\nimport useFetch from \"@common/hooks/useFetch\";\nimport PATH_URL from \"@common/config/pathURL\";\nimport { sortDataTable } from \"@common/utils/sortHelper\";\nimport { badgeApi } from \"@services/apis/badge\";\nimport { useForm } from \"antd/es/form/Form\";\nimport { TYPE_BADGE, UNIT_BADGE, USER_TARGET_BADGE } from \"@common/constant/masterData\";\nimport { MyComponents } from \"@components/form\";\nimport { validate } from \"@validate/index\";\nimport { appendFormData } from \"@common/utils/appendFormData\";\nfunction Badge() {\n  _s();\n  var _value$paginate;\n  const navigate = useNavigate();\n  const [openModalBadge, setOpenModalBadge] = useState(false);\n  const [refetch, setRefetch] = useState(\"\");\n  const [userTarget, setUserTarget] = useState(null);\n  const [dataCSV, setDataCSV] = useState([]);\n  const [loadingSubmit, setLoadingSubmit] = useState(false);\n  const [pagination, setPagination] = useState({\n    page: 1,\n    limit: 10,\n    keyword: \"\"\n  });\n  const [form] = useForm();\n  const {\n    loading,\n    value\n  } = useFetch(ourRequest => badgeApi.getBadges(pagination, ourRequest), [pagination, refetch]);\n  const [refetchBadges, setRefetchBadges] = useState(\"\");\n  const [paginationUsers, setPaginationUsers] = useState({\n    page: 1,\n    limit: 20,\n    keyword: \"\"\n  });\n  const {\n    loading: loadingFetchUser,\n    value: valueUsers\n  } = useFetch(ourRequest => {\n    return userApi.getAllUsers(ourRequest);\n  }, [paginationUsers]);\n  const {\n    value: listBadge\n  } = useFetch(ourRequest => {\n    return badgeApi.getAllTypeBadge(ourRequest);\n  }, [refetchBadges]);\n  const getStringType = (objects, type) => {\n    var _objs$;\n    const objs = objects.filter(obj => typeof obj === \"object\" && parseInt(obj.value, 10) === type);\n    return (_objs$ = objs[0]) === null || _objs$ === void 0 ? void 0 : _objs$.label;\n  };\n  const handleCreate = () => {\n    navigate(PATH_URL.BADGE.CREATE);\n  };\n  const handleSearch = keyWord => {\n    setPagination(curState => ({\n      ...curState,\n      keyword: keyWord === null || keyWord === void 0 ? void 0 : keyWord.trim(),\n      page: 1\n    }));\n  };\n  const handleChangeTable = (currentPage, totalItemPerPage) => {\n    setPagination(curState => ({\n      ...curState,\n      page: currentPage,\n      limit: totalItemPerPage\n    }));\n  };\n  const handleEditBadge = (e, badge) => {\n    e.stopPropagation();\n    navigate(PATH_URL.BADGE.EDIT, {\n      state: badge\n    });\n  };\n  const handleDeleteBadge = badgeId => {\n    badgeApi.deleteBadge(badgeId).then(() => {\n      setRefetch(`deleteUser-${badgeId}`);\n      message.success(t(\"badge.message.deleteSuccess\"));\n    }).catch(() => {\n      message.error(t(\"badge.message.deleteErr\"));\n    });\n  };\n  const handleDetailShow = badge => {\n    navigate(`${PATH_URL.BADGE.DETAIL}`, {\n      state: badge\n    });\n  };\n  const confirm = badgeId => {\n    Modal.confirm({\n      icon: /*#__PURE__*/React.createElement(ExclamationCircleOutlined, null),\n      centered: true,\n      content: t(\"badge.modal.textConfirmDel\"),\n      okText: t(\"badge.modal.textYes\"),\n      cancelText: t(\"badge.modal.textNo\"),\n      onOk: () => handleDeleteBadge(badgeId)\n    });\n  };\n  const columns = [{\n    title: \"ID\",\n    dataIndex: \"id\",\n    sorter: (a, b) => sortDataTable(a, b),\n    sortDirections: [\"ascend\"],\n    align: \"center\"\n  }, {\n    title: t(\"badge.list.type\"),\n    dataIndex: \"type\",\n    align: \"center\",\n    render: type => /*#__PURE__*/React.createElement(\"span\", null, getStringType(TYPE_BADGE, type))\n  }, {\n    title: t(\"badge.list.title\"),\n    dataIndex: \"title\",\n    align: \"center\"\n  }, {\n    title: t(\"badge.list.parameter\"),\n    dataIndex: \"achievement\",\n    align: \"center\"\n  }, {\n    title: t(\"badge.list.unit\"),\n    align: \"center\",\n    render: badge => /*#__PURE__*/React.createElement(\"span\", null, getStringType(UNIT_BADGE, badge.type))\n  }, {\n    title: t(\"badge.list.operation\"),\n    align: \"center\",\n    width: 200,\n    render: badge => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"full-height full-width\"\n    }, /*#__PURE__*/React.createElement(Button, {\n      type: \"primary\",\n      className: \"mr-10\",\n      onClick: e => handleEditBadge(e, badge)\n    }, t(\"badge.list.edit\")), /*#__PURE__*/React.createElement(Button, {\n      type: \"primary\",\n      onClick: e => {\n        e.stopPropagation();\n        confirm(badge.id);\n      }\n    }, t(\"badge.list.delete\")))\n  }];\n  const totalPage = value === null || value === void 0 ? void 0 : (_value$paginate = value.paginate) === null || _value$paginate === void 0 ? void 0 : _value$paginate.totalPage;\n  const paginationProps = {\n    position: [\"bottomRight\"],\n    total: totalPage * 10,\n    current: pagination.page,\n    showSizeChanger: true,\n    onChange: handleChangeTable\n  };\n  const onChangeBadge = e => {\n    setUserTarget(e.target.value);\n  };\n  const openModal = () => {\n    form.resetFields();\n    setOpenModalBadge(true);\n  };\n  const titleTable = () => {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, t(\"badge.titleBadge\"), /*#__PURE__*/React.createElement(Button, {\n      onClick: () => openModal()\n    }, t(\"badge.modal.openModal\")));\n  };\n  const convertListOptions = list => {\n    if (!list) return [];\n    return list === null || list === void 0 ? void 0 : list.map(item => ({\n      key: item === null || item === void 0 ? void 0 : item.id,\n      value: item === null || item === void 0 ? void 0 : item.id,\n      label: item === null || item === void 0 ? void 0 : item.username\n    }));\n  };\n  const convertListBadges = list => {\n    if (!list) return [];\n    return list === null || list === void 0 ? void 0 : list.map(item => ({\n      key: item === null || item === void 0 ? void 0 : item.id,\n      value: item === null || item === void 0 ? void 0 : item.id,\n      label: item === null || item === void 0 ? void 0 : item.title\n    }));\n  };\n  const handleFinish = async values => {\n    try {\n      setLoadingSubmit(true);\n      const payload = {\n        ...values\n      };\n      delete payload.userTarget;\n      if (dataCSV[0]) {\n        delete payload.userId;\n      }\n      badgeApi.postBadgeAttach(dataCSV !== null && dataCSV !== void 0 && dataCSV.length ? appendFormData({\n        ...payload,\n        file: dataCSV[0]\n      }) : payload).then(res => {\n        if (res) {\n          message.success(t(\"badge.modal.messSuccess\"));\n        }\n      }).catch(err => {\n        var _err$response, _err$response2, _err$response2$data;\n        if ((err === null || err === void 0 ? void 0 : (_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.status) === 400 || (err === null || err === void 0 ? void 0 : (_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.message) === \"file_content_wrong_format\") {\n          message.error(t(\"dataManagement.csvError\"));\n        }\n      });\n    } catch (error) {\n      message.error(t(\"badge.modal.messFail\"));\n    } finally {\n      setLoadingSubmit(false);\n    }\n    setOpenModalBadge(false);\n  };\n  const contentModal = () => {\n    return /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(Row, {\n      align: \"middle\",\n      className: \"full-width header-table title-badge-from\"\n    }, /*#__PURE__*/React.createElement(\"h3\", null, t(\"badge.modal.giftTypeBadge\"))), /*#__PURE__*/React.createElement(Form, {\n      className: \"form-data-management full-width\",\n      layout: \"vertical\",\n      colon: false,\n      form: form,\n      onFinish: handleFinish\n    }, /*#__PURE__*/React.createElement(MyComponents.Radio, {\n      label: t(\"badge.modal.badgeGrantType\"),\n      name: \"userTarget\",\n      radioValues: USER_TARGET_BADGE,\n      rules: [{\n        required: true\n      }],\n      onChange: onChangeBadge\n    }), userTarget === 2 && /*#__PURE__*/React.createElement(MyComponents.Select, {\n      label: t(\"badge.modal.userSetting\"),\n      optionFilterProp: \"children\",\n      name: \"userId\",\n      placeholder: t(\"badge.modal.userSetting\"),\n      options: convertListOptions(valueUsers || []),\n      returnOption: item => ({\n        key: item === null || item === void 0 ? void 0 : item.id,\n        label: item === null || item === void 0 ? void 0 : item.name,\n        value: item === null || item === void 0 ? void 0 : item.id\n      }),\n      rules: [{\n        required: true,\n        message: t(\"validate.notEmpty\", {\n          fieldName: t(\"badge.modal.userSetting\")\n        })\n      }]\n    }), userTarget === 3 && /*#__PURE__*/React.createElement(MyComponents.UploadFile, {\n      label: t(\"badge.modal.exportCSV\"),\n      name: \"file\",\n      rules: [{\n        required: true,\n        message: \"\"\n      }, validate.emptyImg(t(\"validate.notEmpty\", {\n        fieldName: t(\"dataManagement.uploadFile\")\n      }))],\n      setDataCSV: setDataCSV\n    }, /*#__PURE__*/React.createElement(Button, {\n      icon: /*#__PURE__*/React.createElement(UploadOutlined, null)\n    }, \"CSV\")), /*#__PURE__*/React.createElement(MyComponents.Select, {\n      label: t(\"badge.modal.typeBadge\"),\n      name: \"badgeId\",\n      placeholder: t(\"badge.modal.typeBadge\"),\n      listOptions: convertListBadges(listBadge || []),\n      rules: [{\n        required: true,\n        message: t(\"validate.notEmpty\", {\n          fieldName: t(\"badge.modal.typeBadge\")\n        })\n      }]\n    }), /*#__PURE__*/React.createElement(Row, {\n      className: \"text-right display-block\"\n    }, /*#__PURE__*/React.createElement(Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      loading: loadingSubmit\n    }, t(\"badge.modal.submit\")))));\n  };\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ComTable\n  // title={t(\"badge.titleBadge\")}\n  , {\n    title: titleTable(),\n    loading: loading,\n    columns: columns,\n    data: value === null || value === void 0 ? void 0 : value.data,\n    pagination: paginationProps,\n    onAddTable: handleCreate,\n    onSearch: handleSearch,\n    onClickRow: handleDetailShow\n  }), /*#__PURE__*/React.createElement(ComModal, {\n    open: openModalBadge,\n    onCancel: () => setOpenModalBadge(false),\n    okText: \"\\u767B \\u9332\",\n    cancelText: \"\\u623B\\u308B\",\n    destroyOnClose: true,\n    content: contentModal(),\n    footer: null\n  }));\n}\n_s(Badge, \"RVeAHzRcPZZQqcySf5XWmtzCUCI=\", false, function () {\n  return [useNavigate, useForm, useFetch, useFetch, useFetch];\n});\n_c = Badge;\nexport default Badge;\nvar _c;\n$RefreshReg$(_c, \"Badge\");","map":{"version":3,"mappings":"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","names":["React","useState","Button","message","Modal","Row","Form","useNavigate","ExclamationCircleOutlined","UploadOutlined","t","ComModal","ComTable","userApi","useFetch","PATH_URL","sortDataTable","badgeApi","useForm","TYPE_BADGE","UNIT_BADGE","USER_TARGET_BADGE","MyComponents","validate","appendFormData","Badge","navigate","openModalBadge","setOpenModalBadge","refetch","setRefetch","userTarget","setUserTarget","dataCSV","setDataCSV","loadingSubmit","setLoadingSubmit","pagination","setPagination","page","limit","keyword","form","loading","value","ourRequest","getBadges","refetchBadges","setRefetchBadges","paginationUsers","setPaginationUsers","loadingFetchUser","valueUsers","getAllUsers","listBadge","getAllTypeBadge","getStringType","objects","type","objs","filter","obj","parseInt","label","handleCreate","BADGE","CREATE","handleSearch","keyWord","curState","trim","handleChangeTable","currentPage","totalItemPerPage","handleEditBadge","e","badge","stopPropagation","EDIT","state","handleDeleteBadge","badgeId","deleteBadge","then","success","catch","error","handleDetailShow","DETAIL","confirm","icon","centered","content","okText","cancelText","onOk","columns","title","dataIndex","sorter","a","b","sortDirections","align","render","width","className","onClick","id","totalPage","paginate","paginationProps","position","total","current","showSizeChanger","onChange","onChangeBadge","target","openModal","resetFields","titleTable","convertListOptions","list","map","item","key","username","convertListBadges","handleFinish","values","payload","userId","postBadgeAttach","length","file","res","err","response","status","data","contentModal","layout","colon","onFinish","Radio","name","radioValues","rules","required","Select","optionFilterProp","placeholder","options","returnOption","fieldName","UploadFile","emptyImg","listOptions","htmlType","onAddTable","onSearch","onClickRow","open","onCancel","destroyOnClose","footer"],"sources":["/home/huynd/animalwatch_admin/src/pages/manager/badge/BadgeList.jsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { Button, message, Modal, Row, Form } from \"antd\";\nimport { useNavigate } from \"react-router-dom\";\nimport { ExclamationCircleOutlined, UploadOutlined } from \"@ant-design/icons\";\nimport { t } from \"i18next\";\nimport ComModal from \"@components/common/ComModal\";\nimport ComTable from \"@components/common/ComTable\";\nimport { userApi } from \"@services/apis/user\";\nimport useFetch from \"@common/hooks/useFetch\";\nimport PATH_URL from \"@common/config/pathURL\";\nimport { sortDataTable } from \"@common/utils/sortHelper\";\nimport { badgeApi } from \"@services/apis/badge\";\nimport { useForm } from \"antd/es/form/Form\";\nimport {\n  TYPE_BADGE,\n  UNIT_BADGE,\n  USER_TARGET_BADGE,\n} from \"@common/constant/masterData\";\nimport { MyComponents } from \"@components/form\";\nimport { validate } from \"@validate/index\";\nimport { appendFormData } from \"@common/utils/appendFormData\";\n\nfunction Badge() {\n  const navigate = useNavigate();\n  const [openModalBadge, setOpenModalBadge] = useState(false);\n  const [refetch, setRefetch] = useState(\"\");\n  const [userTarget, setUserTarget] = useState(null);\n  const [dataCSV, setDataCSV] = useState([]);\n  const [loadingSubmit, setLoadingSubmit] = useState(false);\n  const [pagination, setPagination] = useState({\n    page: 1,\n    limit: 10,\n    keyword: \"\",\n  });\n\n  const [form] = useForm();\n  const { loading, value } = useFetch(\n    (ourRequest) => badgeApi.getBadges(pagination, ourRequest),\n    [pagination, refetch],\n  );\n  const [refetchBadges, setRefetchBadges] = useState(\"\");\n  const [paginationUsers, setPaginationUsers] = useState({\n    page: 1,\n    limit: 20,\n    keyword: \"\",\n  });\n\n  const { loading: loadingFetchUser, value: valueUsers } = useFetch(\n    (ourRequest) => {\n      return userApi.getAllUsers(ourRequest);\n    },\n    [paginationUsers],\n  );\n\n  const { value: listBadge } = useFetch(\n    (ourRequest) => {\n      return badgeApi.getAllTypeBadge(ourRequest);\n    },\n    [refetchBadges],\n  );\n\n  const getStringType = (objects, type) => {\n    const objs = objects.filter(\n      (obj) => typeof obj === \"object\" && parseInt(obj.value, 10) === type,\n    );\n    return objs[0]?.label;\n  };\n\n  const handleCreate = () => {\n    navigate(PATH_URL.BADGE.CREATE);\n  };\n\n  const handleSearch = (keyWord) => {\n    setPagination((curState) => ({\n      ...curState,\n      keyword: keyWord?.trim(),\n      page: 1,\n    }));\n  };\n\n  const handleChangeTable = (currentPage, totalItemPerPage) => {\n    setPagination((curState) => ({\n      ...curState,\n      page: currentPage,\n      limit: totalItemPerPage,\n    }));\n  };\n\n  const handleEditBadge = (e, badge) => {\n    e.stopPropagation();\n    navigate(PATH_URL.BADGE.EDIT, { state: badge });\n  };\n\n  const handleDeleteBadge = (badgeId) => {\n    badgeApi\n      .deleteBadge(badgeId)\n      .then(() => {\n        setRefetch(`deleteUser-${badgeId}`);\n        message.success(t(\"badge.message.deleteSuccess\"));\n      })\n      .catch(() => {\n        message.error(t(\"badge.message.deleteErr\"));\n      });\n  };\n\n  const handleDetailShow = (badge) => {\n    navigate(`${PATH_URL.BADGE.DETAIL}`, { state: badge });\n  };\n\n  const confirm = (badgeId) => {\n    Modal.confirm({\n      icon: <ExclamationCircleOutlined />,\n      centered: true,\n      content: t(\"badge.modal.textConfirmDel\"),\n      okText: t(\"badge.modal.textYes\"),\n      cancelText: t(\"badge.modal.textNo\"),\n      onOk: () => handleDeleteBadge(badgeId),\n    });\n  };\n\n  const columns = [\n    {\n      title: \"ID\",\n      dataIndex: \"id\",\n      sorter: (a, b) => sortDataTable(a, b),\n      sortDirections: [\"ascend\"],\n      align: \"center\",\n    },\n    {\n      title: t(\"badge.list.type\"),\n      dataIndex: \"type\",\n      align: \"center\",\n      render: (type) => <span>{getStringType(TYPE_BADGE, type)}</span>,\n    },\n    {\n      title: t(\"badge.list.title\"),\n      dataIndex: \"title\",\n      align: \"center\",\n    },\n    {\n      title: t(\"badge.list.parameter\"),\n      dataIndex: \"achievement\",\n      align: \"center\",\n    },\n    {\n      title: t(\"badge.list.unit\"),\n      align: \"center\",\n      render: (badge) => <span>{getStringType(UNIT_BADGE, badge.type)}</span>,\n    },\n    {\n      title: t(\"badge.list.operation\"),\n      align: \"center\",\n      width: 200,\n      render: (badge) => (\n        <div className=\"full-height full-width\">\n          <Button\n            type=\"primary\"\n            className=\"mr-10\"\n            onClick={(e) => handleEditBadge(e, badge)}\n          >\n            {t(\"badge.list.edit\")}\n          </Button>\n          <Button\n            type=\"primary\"\n            onClick={(e) => {\n              e.stopPropagation();\n              confirm(badge.id);\n            }}\n          >\n            {t(\"badge.list.delete\")}\n          </Button>\n        </div>\n      ),\n    },\n  ];\n\n  const totalPage = value?.paginate?.totalPage;\n  const paginationProps = {\n    position: [\"bottomRight\"],\n    total: totalPage * 10,\n    current: pagination.page,\n    showSizeChanger: true,\n    onChange: handleChangeTable,\n  };\n\n  const onChangeBadge = (e) => {\n    setUserTarget(e.target.value);\n  };\n\n  const openModal = () => {\n    form.resetFields();\n    setOpenModalBadge(true);\n  };\n\n  const titleTable = () => {\n    return (\n      <>\n        {t(\"badge.titleBadge\")}\n        <Button onClick={() => openModal()}>\n          {t(\"badge.modal.openModal\")}\n        </Button>\n      </>\n    );\n  };\n\n  const convertListOptions = (list) => {\n    if (!list) return [];\n    return list?.map((item) => ({\n      key: item?.id,\n      value: item?.id,\n      label: item?.username,\n    }));\n  };\n\n  const convertListBadges = (list) => {\n    if (!list) return [];\n    return list?.map((item) => ({\n      key: item?.id,\n      value: item?.id,\n      label: item?.title,\n    }));\n  };\n\n  const handleFinish = async (values) => {\n    try {\n      setLoadingSubmit(true);\n      const payload = {\n        ...values,\n      };\n      delete payload.userTarget;\n      if (dataCSV[0]) {\n        delete payload.userId;\n      }\n\n      badgeApi\n        .postBadgeAttach(\n          dataCSV?.length\n            ? appendFormData({\n                ...payload,\n                file: dataCSV[0],\n              })\n            : payload,\n        )\n        .then((res) => {\n          if (res) {\n            message.success(t(\"badge.modal.messSuccess\"));\n          }\n        })\n        .catch((err) => {\n          if (\n            err?.response?.status === 400 ||\n            err?.response?.data?.message === \"file_content_wrong_format\"\n          ) {\n            message.error(t(\"dataManagement.csvError\"));\n          }\n        });\n    } catch (error) {\n      message.error(t(\"badge.modal.messFail\"));\n    } finally {\n      setLoadingSubmit(false);\n    }\n    setOpenModalBadge(false);\n  };\n\n  const contentModal = () => {\n    return (\n      <div>\n        <Row\n          align=\"middle\"\n          className=\"full-width header-table title-badge-from\"\n        >\n          <h3>{t(\"badge.modal.giftTypeBadge\")}</h3>\n        </Row>\n        <Form\n          className=\"form-data-management full-width\"\n          layout=\"vertical\"\n          colon={false}\n          form={form}\n          onFinish={handleFinish}\n        >\n          <MyComponents.Radio\n            label={t(\"badge.modal.badgeGrantType\")}\n            name=\"userTarget\"\n            radioValues={USER_TARGET_BADGE}\n            rules={[{ required: true }]}\n            onChange={onChangeBadge}\n          />\n          {userTarget === 2 && (\n            <MyComponents.Select\n              label={t(\"badge.modal.userSetting\")}\n              optionFilterProp=\"children\"\n              name=\"userId\"\n              placeholder={t(\"badge.modal.userSetting\")}\n              options={convertListOptions(valueUsers || [])}\n              returnOption={(item) => ({\n                key: item?.id,\n                label: item?.name,\n                value: item?.id,\n              })}\n              rules={[\n                {\n                  required: true,\n                  message: t(\"validate.notEmpty\", {\n                    fieldName: t(\"badge.modal.userSetting\"),\n                  }),\n                },\n              ]}\n            />\n          )}\n          {userTarget === 3 && (\n            <MyComponents.UploadFile\n              label={t(\"badge.modal.exportCSV\")}\n              name=\"file\"\n              rules={[\n                {\n                  required: true,\n                  message: \"\",\n                },\n                validate.emptyImg(\n                  t(\"validate.notEmpty\", {\n                    fieldName: t(\"dataManagement.uploadFile\"),\n                  }),\n                ),\n              ]}\n              setDataCSV={setDataCSV}\n            >\n              <Button icon={<UploadOutlined />}>CSV</Button>\n            </MyComponents.UploadFile>\n          )}\n          <MyComponents.Select\n            label={t(\"badge.modal.typeBadge\")}\n            name=\"badgeId\"\n            placeholder={t(\"badge.modal.typeBadge\")}\n            listOptions={convertListBadges(listBadge || [])}\n            rules={[\n              {\n                required: true,\n                message: t(\"validate.notEmpty\", {\n                  fieldName: t(\"badge.modal.typeBadge\"),\n                }),\n              },\n            ]}\n          />\n          <Row className=\"text-right display-block\">\n            <Button type=\"primary\" htmlType=\"submit\" loading={loadingSubmit}>\n              {t(\"badge.modal.submit\")}\n            </Button>\n          </Row>\n        </Form>\n      </div>\n    );\n  };\n\n  return (\n    <>\n      <ComTable\n        // title={t(\"badge.titleBadge\")}\n        title={titleTable()}\n        loading={loading}\n        columns={columns}\n        data={value?.data}\n        pagination={paginationProps}\n        onAddTable={handleCreate}\n        onSearch={handleSearch}\n        onClickRow={handleDetailShow}\n      />\n      <ComModal\n        open={openModalBadge}\n        onCancel={() => setOpenModalBadge(false)}\n        okText=\"登 録\"\n        cancelText=\"戻る\"\n        destroyOnClose\n        content={contentModal()}\n        footer={null}\n      />\n    </>\n  );\n}\n\nexport default Badge;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}