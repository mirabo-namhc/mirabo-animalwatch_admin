{"ast":null,"code":"import { ALPHABET_AND_LESS_THAN_O_REGEX, ALPHABET_REPLACE, DECIMAL } from \"./regex\";\nexport const replacePositionRangeNumber = (value, posStart, posEnd, fixNumber) => {\n  var _value$trim, _replaceChr$replace, _replaceChr$replace2;\n  const dynamicRegex = posStart ? ALPHABET_AND_LESS_THAN_O_REGEX : ALPHABET_REPLACE;\n  const replaceChr = value === null || value === void 0 ? void 0 : (_value$trim = value.trim()) === null || _value$trim === void 0 ? void 0 : _value$trim.replace(dynamicRegex, \"\");\n  const num = parseFloat(replaceChr);\n  if (posStart && num < posStart) return `${posStart}`;\n  if (posEnd && num > posEnd) return `${posEnd}`;\n  switch (fixNumber) {\n    case 2:\n      return replaceChr === null || replaceChr === void 0 ? void 0 : (_replaceChr$replace = replaceChr.replace(/(\\d+\\.\\d{2})\\d+/, \"$1\")) === null || _replaceChr$replace === void 0 ? void 0 : _replaceChr$replace.replace(DECIMAL, \"\");\n    default:\n      return replaceChr === null || replaceChr === void 0 ? void 0 : (_replaceChr$replace2 = replaceChr.replace(/(\\d+\\.\\d{15})\\d+/, \"$1\")) === null || _replaceChr$replace2 === void 0 ? void 0 : _replaceChr$replace2.replace(DECIMAL, \"\");\n  }\n};","map":{"version":3,"mappings":"AAAA,SACEA,8BAA8B,EAC9BC,gBAAgB,EAChBC,OAAO,QACF,SAAS;AAEhB,OAAO,MAAMC,0BAA0B,GAAG,CACxCC,KAAK,EACLC,QAAQ,EACRC,MAAM,EACNC,SAAS,KACN;EAAA;EACH,MAAMC,YAAY,GAAGH,QAAQ,GACzBL,8BAA8B,GAC9BC,gBAAgB;EACpB,MAAMQ,UAAU,GAAGL,KAAK,aAALA,KAAK,sCAALA,KAAK,CAAEM,IAAI,EAAE,gDAAbN,YAAeO,OAAO,CAACH,YAAY,EAAE,EAAE,CAAC;EAC3D,MAAMI,GAAG,GAAGC,UAAU,CAACJ,UAAU,CAAC;EAElC,IAAIJ,QAAQ,IAAIO,GAAG,GAAGP,QAAQ,EAAE,OAAQ,GAAEA,QAAS,EAAC;EACpD,IAAIC,MAAM,IAAIM,GAAG,GAAGN,MAAM,EAAE,OAAQ,GAAEA,MAAO,EAAC;EAE9C,QAAQC,SAAS;IACf,KAAK,CAAC;MACJ,OAAOE,UAAU,aAAVA,UAAU,8CAAVA,UAAU,CAAEE,OAAO,CAAC,iBAAiB,EAAE,IAAI,CAAC,wDAA5CF,oBAA8CE,OAAO,CAACT,OAAO,EAAE,EAAE,CAAC;IAC3E;MACE,OAAOO,UAAU,aAAVA,UAAU,+CAAVA,UAAU,CACbE,OAAO,CAAC,kBAAkB,EAAE,IAAI,CAAC,yDAD9BF,qBAEHE,OAAO,CAACT,OAAO,EAAE,EAAE,CAAC;EAAA;AAE9B,CAAC","names":["ALPHABET_AND_LESS_THAN_O_REGEX","ALPHABET_REPLACE","DECIMAL","replacePositionRangeNumber","value","posStart","posEnd","fixNumber","dynamicRegex","replaceChr","trim","replace","num","parseFloat"],"sources":["/home/huynd/animalwatch_admin/src/common/utils/numberHelper.js"],"sourcesContent":["import {\n  ALPHABET_AND_LESS_THAN_O_REGEX,\n  ALPHABET_REPLACE,\n  DECIMAL,\n} from \"./regex\";\n\nexport const replacePositionRangeNumber = (\n  value,\n  posStart,\n  posEnd,\n  fixNumber,\n) => {\n  const dynamicRegex = posStart\n    ? ALPHABET_AND_LESS_THAN_O_REGEX\n    : ALPHABET_REPLACE;\n  const replaceChr = value?.trim()?.replace(dynamicRegex, \"\");\n  const num = parseFloat(replaceChr);\n\n  if (posStart && num < posStart) return `${posStart}`;\n  if (posEnd && num > posEnd) return `${posEnd}`;\n\n  switch (fixNumber) {\n    case 2:\n      return replaceChr?.replace(/(\\d+\\.\\d{2})\\d+/, \"$1\")?.replace(DECIMAL, \"\");\n    default:\n      return replaceChr\n        ?.replace(/(\\d+\\.\\d{15})\\d+/, \"$1\")\n        ?.replace(DECIMAL, \"\");\n  }\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}