{"ast":null,"code":"var _s = $RefreshSig$();\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useTranslation } from \"react-i18next\";\nimport { Button, Card, Form, Row, message, Upload } from \"antd\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport PATH_URL from \"@common/config/pathURL\";\nimport { COLDEF, TYPE_FIELD } from \"@common/constant/form\";\nimport { useForm, useWatch } from \"antd/es/form/Form\";\nimport { renderFieldForm } from \"@common/utils/renderFieldForm\";\nimport { notificationApi } from \"@services/apis/notification\";\nimport { validate } from \"@validate/index\";\nimport { UploadOutlined } from \"@ant-design/icons\";\nimport { checkBeforeUploadFile } from \"@validate/validate\";\nimport { appendFormData } from \"@common/utils/appendFormData\";\nimport { TYPE_NOTI } from \"@common/constant/masterData\";\nfunction NotificationForm(props) {\n  _s();\n  const {\n    data,\n    isCreate = true\n  } = props;\n  const {\n    t\n  } = useTranslation();\n  const navigate = useNavigate();\n  const params = useParams();\n  const initialValues = {\n    ...data\n  };\n  const [form] = useForm();\n  const typeNotiWatch = useWatch(\"type\", form);\n  const listField = [{\n    type: TYPE_FIELD.SELECT,\n    name: \"type\",\n    label: t(\"notification.typeNoti\"),\n    listOptions: TYPE_NOTI\n  }, {\n    type: TYPE_FIELD.INPUT,\n    name: \"link\",\n    hidden: typeNotiWatch,\n    label: t(\"notification.linkNoti\"),\n    colwidth: COLDEF\n  }, {\n    type: TYPE_FIELD.TEXT_AREA,\n    name: \"description\",\n    hidden: typeNotiWatch,\n    label: t(\"notification.contentNoti\"),\n    colwidth: COLDEF,\n    rules: [{\n      required: true,\n      message: \"\"\n    }, validate.empty(t(\"notification.validate.notEmpty\", {\n      fieldName: t(\"notification.list.description\")\n    }))]\n  }].filter(field => !field.hidden);\n  const handleRedirectListPage = () => {\n    navigate(PATH_URL.NOTIFICATION.INDEX);\n  };\n  const createNotification = formData => {\n    notificationApi.createNotification(formData).then(response => {\n      if (response.success === true) {\n        message.success(t(\"notification.createSuccess\"));\n      } else {\n        message.error(t(\"notification.createSuccess\"));\n      }\n      handleRedirectListPage();\n    }).catch(() => {\n      message.error(t(\"notification.createFailure\"));\n    });\n    // notificationApi.postCsv(fileCsvBinary);\n  };\n\n  const editCheckPoint = formData => {\n    notificationApi.editCheckPoint(formData, params.id).then(response => {\n      if (response.success === true) {\n        message.success(t(\"checkpoint.form.editSuccess\"));\n      } else {\n        message.error(t(\"checkpoint.form.editError\"));\n      }\n      handleRedirectListPage();\n    }).catch(() => {\n      message.error(t(\"checkpoint.form.editError\"));\n    });\n  };\n  const onSubmit = values => {\n    var _values$description, _values$link;\n    const payload = {\n      ...values,\n      description: values === null || values === void 0 ? void 0 : (_values$description = values.description) === null || _values$description === void 0 ? void 0 : _values$description.trim(),\n      link: values === null || values === void 0 ? void 0 : (_values$link = values.link) === null || _values$link === void 0 ? void 0 : _values$link.trim()\n    };\n    const formData = appendFormData(payload);\n    if (isCreate === true) {\n      createNotification(formData);\n    } else {\n      editCheckPoint(payload);\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"notification-form form-default\"\n  }, /*#__PURE__*/React.createElement(Row, {\n    align: \"middle\",\n    className: \"full-width header-table\"\n  }, /*#__PURE__*/React.createElement(\"h1\", null, isCreate ? t(\"notification.titleCreate\") : t(\"notification.titleCreate\"))), /*#__PURE__*/React.createElement(Card, null, /*#__PURE__*/React.createElement(Form, {\n    form: form,\n    layout: \"vertical\",\n    colon: false,\n    onFinish: onSubmit,\n    initialValues: initialValues\n  }, /*#__PURE__*/React.createElement(Row, {\n    gutter: [48, 8]\n  }, renderFieldForm(listField)), typeNotiWatch ? /*#__PURE__*/React.createElement(Form.Item, {\n    name: \"file\"\n  }, /*#__PURE__*/React.createElement(Upload, {\n    maxCount: 1,\n    beforeUpload: file => checkBeforeUploadFile(t, file)\n  }, /*#__PURE__*/React.createElement(Button, {\n    icon: /*#__PURE__*/React.createElement(UploadOutlined, null)\n  }, t(\"notification.btnChoseFileCsv\")))) : null, /*#__PURE__*/React.createElement(Row, {\n    className: \"flex jc-center gap-20 full-width\"\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: handleRedirectListPage,\n    className: \"fw-600 cancel-btn\",\n    type: \"default\"\n  }, t(\"checkpoint.form.btnBack\")), /*#__PURE__*/React.createElement(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    className: \"fw-600 submit-btn\"\n  }, isCreate ? t(\"checkpoint.form.btnSubmit\") : t(\"checkpoint.form.btnEdit\"))))));\n}\n_s(NotificationForm, \"zqje5wAIupirbXG9IakzOM/mM/k=\", false, function () {\n  return [useTranslation, useNavigate, useParams, useForm, useWatch];\n});\n_c = NotificationForm;\nNotificationForm.propTypes = {\n  data: PropTypes.object,\n  isCreate: PropTypes.bool\n};\nexport default NotificationForm;\nvar _c;\n$RefreshReg$(_c, \"NotificationForm\");","map":{"version":3,"mappings":"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","names":["React","PropTypes","useTranslation","Button","Card","Form","Row","message","Upload","useNavigate","useParams","PATH_URL","COLDEF","TYPE_FIELD","useForm","useWatch","renderFieldForm","notificationApi","validate","UploadOutlined","checkBeforeUploadFile","appendFormData","TYPE_NOTI","NotificationForm","props","data","isCreate","t","navigate","params","initialValues","form","typeNotiWatch","listField","type","SELECT","name","label","listOptions","INPUT","hidden","colwidth","TEXT_AREA","rules","required","empty","fieldName","filter","field","handleRedirectListPage","NOTIFICATION","INDEX","createNotification","formData","then","response","success","error","catch","editCheckPoint","id","onSubmit","values","payload","description","trim","link","className","align","layout","colon","onFinish","gutter","Item","maxCount","beforeUpload","file","icon","onClick","htmlType","propTypes","object","bool"],"sources":["/home/huynd/animalwatch_admin/src/pages/notification/NotificationForm.jsx"],"sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Button, Card, Form, Row, message, Upload } from \"antd\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\n\r\nimport PATH_URL from \"@common/config/pathURL\";\r\nimport { COLDEF, TYPE_FIELD } from \"@common/constant/form\";\r\nimport { useForm, useWatch } from \"antd/es/form/Form\";\r\nimport { renderFieldForm } from \"@common/utils/renderFieldForm\";\r\nimport { notificationApi } from \"@services/apis/notification\";\r\nimport { validate } from \"@validate/index\";\r\nimport { UploadOutlined } from \"@ant-design/icons\";\r\nimport { checkBeforeUploadFile } from \"@validate/validate\";\r\nimport { appendFormData } from \"@common/utils/appendFormData\";\r\nimport { TYPE_NOTI } from \"@common/constant/masterData\";\r\n\r\nfunction NotificationForm(props) {\r\n  const { data, isCreate = true } = props;\r\n  const { t } = useTranslation();\r\n  const navigate = useNavigate();\r\n  const params = useParams();\r\n  const initialValues = {\r\n    ...data,\r\n  };\r\n  const [form] = useForm();\r\n  const typeNotiWatch = useWatch(\"type\", form);\r\n\r\n  const listField = [\r\n    {\r\n      type: TYPE_FIELD.SELECT,\r\n      name: \"type\",\r\n      label: t(\"notification.typeNoti\"),\r\n      listOptions: TYPE_NOTI,\r\n    },\r\n    {\r\n      type: TYPE_FIELD.INPUT,\r\n      name: \"link\",\r\n      hidden: typeNotiWatch,\r\n      label: t(\"notification.linkNoti\"),\r\n      colwidth: COLDEF,\r\n    },\r\n    {\r\n      type: TYPE_FIELD.TEXT_AREA,\r\n      name: \"description\",\r\n      hidden: typeNotiWatch,\r\n      label: t(\"notification.contentNoti\"),\r\n      colwidth: COLDEF,\r\n      rules: [\r\n        {\r\n          required: true,\r\n          message: \"\",\r\n        },\r\n        validate.empty(\r\n          t(\"notification.validate.notEmpty\", {\r\n            fieldName: t(\"notification.list.description\"),\r\n          }),\r\n        ),\r\n      ],\r\n    },\r\n  ].filter((field) => !field.hidden);\r\n\r\n  const handleRedirectListPage = () => {\r\n    navigate(PATH_URL.NOTIFICATION.INDEX);\r\n  };\r\n\r\n  const createNotification = (formData) => {\r\n    notificationApi\r\n      .createNotification(formData)\r\n      .then((response) => {\r\n        if (response.success === true) {\r\n          message.success(t(\"notification.createSuccess\"));\r\n        } else {\r\n          message.error(t(\"notification.createSuccess\"));\r\n        }\r\n        handleRedirectListPage();\r\n      })\r\n      .catch(() => {\r\n        message.error(t(\"notification.createFailure\"));\r\n      });\r\n    // notificationApi.postCsv(fileCsvBinary);\r\n  };\r\n\r\n  const editCheckPoint = (formData) => {\r\n    notificationApi\r\n      .editCheckPoint(formData, params.id)\r\n      .then((response) => {\r\n        if (response.success === true) {\r\n          message.success(t(\"checkpoint.form.editSuccess\"));\r\n        } else {\r\n          message.error(t(\"checkpoint.form.editError\"));\r\n        }\r\n        handleRedirectListPage();\r\n      })\r\n      .catch(() => {\r\n        message.error(t(\"checkpoint.form.editError\"));\r\n      });\r\n  };\r\n\r\n  const onSubmit = (values) => {\r\n    const payload = {\r\n      ...values,\r\n      description: values?.description?.trim(),\r\n      link: values?.link?.trim(),\r\n    };\r\n    const formData = appendFormData(payload);\r\n\r\n    if (isCreate === true) {\r\n      createNotification(formData);\r\n    } else {\r\n      editCheckPoint(payload);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"notification-form form-default\">\r\n      <Row align=\"middle\" className=\"full-width header-table\">\r\n        <h1>\r\n          {isCreate\r\n            ? t(\"notification.titleCreate\")\r\n            : t(\"notification.titleCreate\")}\r\n        </h1>\r\n      </Row>\r\n\r\n      <Card>\r\n        <Form\r\n          form={form}\r\n          layout=\"vertical\"\r\n          colon={false}\r\n          onFinish={onSubmit}\r\n          initialValues={initialValues}\r\n        >\r\n          <Row gutter={[48, 8]}>{renderFieldForm(listField)}</Row>\r\n\r\n          {typeNotiWatch ? (\r\n            <Form.Item name=\"file\">\r\n              <Upload\r\n                maxCount={1}\r\n                beforeUpload={(file) => checkBeforeUploadFile(t, file)}\r\n              >\r\n                <Button icon={<UploadOutlined />}>\r\n                  {t(\"notification.btnChoseFileCsv\")}\r\n                </Button>\r\n              </Upload>\r\n            </Form.Item>\r\n          ) : null}\r\n\r\n          <Row className=\"flex jc-center gap-20 full-width\">\r\n            <Button\r\n              onClick={handleRedirectListPage}\r\n              className=\"fw-600 cancel-btn\"\r\n              type=\"default\"\r\n            >\r\n              {t(\"checkpoint.form.btnBack\")}\r\n            </Button>\r\n            <Button\r\n              type=\"primary\"\r\n              htmlType=\"submit\"\r\n              className=\"fw-600 submit-btn\"\r\n            >\r\n              {isCreate\r\n                ? t(\"checkpoint.form.btnSubmit\")\r\n                : t(\"checkpoint.form.btnEdit\")}\r\n            </Button>\r\n          </Row>\r\n        </Form>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n\r\nNotificationForm.propTypes = {\r\n  data: PropTypes.object,\r\n  isCreate: PropTypes.bool,\r\n};\r\nexport default NotificationForm;\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}