{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { IMAGE_URL } from \"@common/config/endpoint\";\nimport PATH_URL from \"@common/config/pathURL\";\nimport { COL_HAFT, TYPE_FIELD } from \"@common/constant/form\";\nimport { TYPE_CHECKPOINT } from \"@common/constant/masterData\";\nimport { appendFormData } from \"@common/utils/appendFormData\";\nimport { renderFieldForm } from \"@common/utils/renderFieldForm\";\nimport { checkPointApi } from \"@services/apis/checkpoint\";\nimport { courseApi } from \"@services/apis/course\";\nimport { validate, validates } from \"@validate/index\";\nimport { numberPreventInput } from \"@validate/validate\";\nimport { Button, Card, Form, Row, message, Skeleton } from \"antd\";\nimport { useTranslation } from \"react-i18next\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport useFetch from \"@common/hooks/useFetch\";\nfunction CheckPointForm() {\n  _s();\n  var _value$data;\n  const {\n    t\n  } = useTranslation();\n  const navigate = useNavigate();\n  const location = useLocation();\n  const data = location.state;\n  const [form] = Form.useForm();\n  const [, forceUpdate] = useState({});\n  const [addedArr, setAddedArr] = useState([]);\n  const [listDeletedId, setListDeletedId] = useState([]);\n  const [deletedArr, setDeletedArr] = useState([]);\n  const initialValues = {\n    ...data,\n    imagesCheckPoint: (data === null || data === void 0 ? void 0 : data.image) || []\n  };\n  const {\n    value,\n    loading\n  } = useFetch(ourRequest => courseApi.getCourses({\n    limit: 10000,\n    page: 1\n  }, ourRequest), []);\n  const formatListOptions = value === null || value === void 0 ? void 0 : (_value$data = value.data) === null || _value$data === void 0 ? void 0 : _value$data.map(option => ({\n    key: option === null || option === void 0 ? void 0 : option.id,\n    value: option === null || option === void 0 ? void 0 : option.id,\n    label: option === null || option === void 0 ? void 0 : option.title\n  }));\n  const listField = [{\n    type: TYPE_FIELD.SELECT,\n    name: \"courseId\",\n    label: t(\"checkpoint.form.routeId\"),\n    colwidth: COL_HAFT,\n    // hideField: true,\n    listOptions: formatListOptions,\n    rules: [{\n      required: true,\n      message: \"\"\n    }, validate.empty(t(\"checkpoint.validate.notEmpty\", {\n      fieldName: t(\"checkpoint.form.routeId\")\n    }))]\n  }, {\n    type: TYPE_FIELD.INPUT,\n    name: \"name\",\n    label: t(\"checkpoint.form.name\"),\n    colwidth: COL_HAFT,\n    rules: [{\n      required: true,\n      message: \"\"\n    }, {\n      max: 50,\n      message: t(\"validate.maxCharacter\", {\n        number: 50\n      })\n    }, validate.empty(t(\"checkpoint.validate.notEmpty\", {\n      fieldName: t(\"checkpoint.form.name\")\n    }))],\n    maxLength: 50\n  }, {\n    type: TYPE_FIELD.INPUT,\n    name: \"place\",\n    label: t(\"checkpoint.form.place\"),\n    colwidth: COL_HAFT,\n    rules: [{\n      required: true,\n      message: \"\"\n    }, {\n      max: 200,\n      message: t(\"validate.maxCharacter\", {\n        number: 200\n      })\n    }, validate.empty(t(\"checkpoint.validate.notEmpty\", {\n      fieldName: t(\"checkpoint.form.place\")\n    }))],\n    maxLength: 200\n  }, {\n    type: TYPE_FIELD.SELECT,\n    name: \"type\",\n    label: t(\"checkpoint.form.type\"),\n    colwidth: COL_HAFT,\n    listOptions: TYPE_CHECKPOINT,\n    rules: [{\n      required: true,\n      message: \"\"\n    }, validate.empty(t(\"checkpoint.validate.notEmpty\", {\n      fieldName: t(\"checkpoint.form.type\")\n    }))]\n  }, {\n    type: TYPE_FIELD.TEXT_AREA,\n    name: \"description\",\n    label: t(\"checkpoint.form.description\"),\n    rules: [{\n      required: true,\n      message: \"\"\n    }, validate.empty(t(\"checkpoint.validate.notEmpty\", {\n      fieldName: t(\"checkpoint.form.description\")\n    }))]\n  }, {\n    type: TYPE_FIELD.UPLOAD,\n    name: \"imagesCheckPoint\",\n    label: t(\"checkpoint.form.images\"),\n    colwidth: COL_HAFT,\n    initialFileList: data ? data === null || data === void 0 ? void 0 : data.image.map(item => {\n      return {\n        uid: item,\n        url: `${IMAGE_URL}${item}/original.jpg`\n      };\n    }) : [],\n    deletedArr,\n    setAddedArr,\n    setDeletedArr,\n    rules: [{\n      required: true,\n      message: \"\"\n    }, validate.emptyImg(t(\"checkpoint.validate.notEmpty\", {\n      fieldName: t(\"checkpoint.form.images\")\n    }))]\n  }, {\n    type: TYPE_FIELD.INPUT,\n    name: \"distance\",\n    label: t(\"checkpoint.form.distance\"),\n    onChange: e => numberPreventInput(e.target.value, form, \"distance\", 2),\n    colwidth: COL_HAFT,\n    rules: [{\n      required: true,\n      message: \"\"\n    }, validate.empty(t(\"checkpoint.validate.notEmpty\", {\n      fieldName: t(\"checkpoint.form.distance\")\n    }))]\n  }, {\n    type: TYPE_FIELD.INPUT,\n    name: \"height\",\n    label: t(\"checkpoint.form.height\"),\n    colwidth: COL_HAFT,\n    onChange: e => numberPreventInput(e.target.value, form, \"height\", 2),\n    rules: [{\n      required: true,\n      message: \"\"\n    }, validate.empty(t(\"checkpoint.validate.notEmpty\", {\n      fieldName: t(\"checkpoint.form.height\")\n    }))]\n  }, {\n    type: TYPE_FIELD.INPUT,\n    name: \"latitude\",\n    label: t(\"checkpoint.form.latitude\"),\n    colwidth: COL_HAFT,\n    onChange: e => validates.checkpoint.coordinates(e.target.value, form, \"latitude\", -90, 90),\n    rules: [{\n      required: true,\n      message: \"\"\n    }, validate.empty(t(\"checkpoint.validate.notEmpty\", {\n      fieldName: t(\"checkpoint.form.latitude\")\n    }))]\n  }, {\n    type: TYPE_FIELD.INPUT,\n    name: \"longitude\",\n    label: t(\"checkpoint.form.longitude\"),\n    colwidth: COL_HAFT,\n    onChange: e => validates.checkpoint.coordinates(e.target.value, form, \"longitude\", -180, 180),\n    rules: [{\n      required: true,\n      message: \"\"\n    }, validate.empty(t(\"checkpoint.validate.notEmpty\", {\n      fieldName: t(\"checkpoint.form.longitude\")\n    }))]\n  }, {\n    type: TYPE_FIELD.TEXT_AREA,\n    name: \"review\",\n    label: t(\"checkpoint.form.review\"),\n    maxLength: 200,\n    showCount: true\n  }];\n  const handleRedirectListPage = () => {\n    navigate(PATH_URL.CHECKPOINT.INDEX);\n  };\n  const createCheckPoint = formData => {\n    checkPointApi.createCheckPoint(formData).then(response => {\n      if (response.success === true) {\n        message.success(t(\"checkpoint.form.createSuccess\"));\n      } else {\n        message.error(t(\"checkpoint.form.createError\"));\n      }\n      handleRedirectListPage();\n    }).catch(() => {\n      message.error(t(\"checkpoint.form.createError\"));\n    });\n  };\n  const editCheckPoint = formData => {\n    checkPointApi.editCheckPoint(formData, data.id).then(response => {\n      if (response.success === true) {\n        message.success(t(\"checkpoint.form.editSuccess\"));\n      } else {\n        message.error(t(\"checkpoint.form.editError\"));\n      }\n      handleRedirectListPage();\n    }).catch(() => {\n      message.error(t(\"checkpoint.form.editError\"));\n    });\n  };\n  const onSubmit = values => {\n    let payload = {\n      ...values,\n      imagesAddCheckPoint: addedArr\n    };\n    if (!data) {\n      const formData = appendFormData(payload);\n      createCheckPoint(formData);\n    } else {\n      payload = {\n        ...values,\n        deleteImageIds: deletedArr.length > 0 ? deletedArr : [],\n        imagesCheckPoint: data.image,\n        imagesAddCheckPoint: addedArr\n      };\n      const formData = appendFormData(payload);\n      editCheckPoint(formData);\n    }\n  };\n  useEffect(() => forceUpdate({}), []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"checkpoint-form form-default\"\n  }, /*#__PURE__*/React.createElement(Row, {\n    align: \"middle\",\n    className: \"full-width header-table\"\n  }, /*#__PURE__*/React.createElement(\"h1\", null, !data ? t(\"checkpoint.form.createCheckPoint\") : t(\"checkpoint.form.editCheckPoint\"))), loading ? /*#__PURE__*/React.createElement(Skeleton, {\n    active: true\n  }) : /*#__PURE__*/React.createElement(Card, null, /*#__PURE__*/React.createElement(Form, {\n    form: form,\n    layout: \"vertical\",\n    colon: false,\n    onFinish: onSubmit,\n    initialValues: initialValues,\n    validateTrigger: [\"onChange\"]\n  }, /*#__PURE__*/React.createElement(Row, {\n    gutter: [48, 8]\n  }, renderFieldForm(listField)), /*#__PURE__*/React.createElement(Row, {\n    className: \"flex jc-center gap-20 full-width\"\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: handleRedirectListPage,\n    className: \"fw-600 cancel-btn\",\n    type: \"default\"\n  }, t(\"checkpoint.form.btnBack\")), /*#__PURE__*/React.createElement(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    className: \"fw-600 submit-btn\"\n  }, !data ? t(\"checkpoint.form.btnSubmit\") : t(\"checkpoint.form.btnSave\"))))));\n}\n_s(CheckPointForm, \"iUzUN1xESVp3GFHjBr+GQonAfEg=\", false, function () {\n  return [useTranslation, useNavigate, useLocation, Form.useForm, useFetch];\n});\n_c = CheckPointForm;\nCheckPointForm.propTypes = {};\nexport default CheckPointForm;\nvar _c;\n$RefreshReg$(_c, \"CheckPointForm\");","map":{"version":3,"mappings":"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","names":["React","useState","useEffect","IMAGE_URL","PATH_URL","COL_HAFT","TYPE_FIELD","TYPE_CHECKPOINT","appendFormData","renderFieldForm","checkPointApi","courseApi","validate","validates","numberPreventInput","Button","Card","Form","Row","message","Skeleton","useTranslation","useLocation","useNavigate","useFetch","CheckPointForm","t","navigate","location","data","state","form","useForm","forceUpdate","addedArr","setAddedArr","listDeletedId","setListDeletedId","deletedArr","setDeletedArr","initialValues","imagesCheckPoint","image","value","loading","ourRequest","getCourses","limit","page","formatListOptions","map","option","key","id","label","title","listField","type","SELECT","name","colwidth","listOptions","rules","required","empty","fieldName","INPUT","max","number","maxLength","TEXT_AREA","UPLOAD","initialFileList","item","uid","url","emptyImg","onChange","e","target","checkpoint","coordinates","showCount","handleRedirectListPage","CHECKPOINT","INDEX","createCheckPoint","formData","then","response","success","error","catch","editCheckPoint","onSubmit","values","payload","imagesAddCheckPoint","deleteImageIds","length","className","align","active","layout","colon","onFinish","validateTrigger","gutter","onClick","htmlType","propTypes"],"sources":["/home/huynd/animalwatch_admin/src/pages/checkpoint/CheckPointForm.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { IMAGE_URL } from \"@common/config/endpoint\";\nimport PATH_URL from \"@common/config/pathURL\";\nimport { COL_HAFT, TYPE_FIELD } from \"@common/constant/form\";\nimport { TYPE_CHECKPOINT } from \"@common/constant/masterData\";\nimport { appendFormData } from \"@common/utils/appendFormData\";\nimport { renderFieldForm } from \"@common/utils/renderFieldForm\";\nimport { checkPointApi } from \"@services/apis/checkpoint\";\nimport { courseApi } from \"@services/apis/course\";\nimport { validate, validates } from \"@validate/index\";\nimport { numberPreventInput } from \"@validate/validate\";\nimport { Button, Card, Form, Row, message, Skeleton } from \"antd\";\nimport { useTranslation } from \"react-i18next\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport useFetch from \"@common/hooks/useFetch\";\n\nfunction CheckPointForm() {\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const location = useLocation();\n  const data = location.state;\n\n  const [form] = Form.useForm();\n  const [, forceUpdate] = useState({});\n  const [addedArr, setAddedArr] = useState([]);\n  const [listDeletedId, setListDeletedId] = useState([]);\n  const [deletedArr, setDeletedArr] = useState([]);\n  const initialValues = {\n    ...data,\n    imagesCheckPoint: data?.image || [],\n  };\n\n  const { value, loading } = useFetch(\n    (ourRequest) => courseApi.getCourses({ limit: 10000, page: 1 }, ourRequest),\n    [],\n  );\n\n  const formatListOptions = value?.data?.map((option) => ({\n    key: option?.id,\n    value: option?.id,\n    label: option?.title,\n  }));\n\n  const listField = [\n    {\n      type: TYPE_FIELD.SELECT,\n      name: \"courseId\",\n      label: t(\"checkpoint.form.routeId\"),\n      colwidth: COL_HAFT,\n      // hideField: true,\n      listOptions: formatListOptions,\n      rules: [\n        {\n          required: true,\n          message: \"\",\n        },\n        validate.empty(\n          t(\"checkpoint.validate.notEmpty\", {\n            fieldName: t(\"checkpoint.form.routeId\"),\n          }),\n        ),\n      ],\n    },\n    {\n      type: TYPE_FIELD.INPUT,\n      name: \"name\",\n      label: t(\"checkpoint.form.name\"),\n      colwidth: COL_HAFT,\n      rules: [\n        {\n          required: true,\n          message: \"\",\n        },\n        {\n          max: 50,\n          message: t(\"validate.maxCharacter\", { number: 50 }),\n        },\n        validate.empty(\n          t(\"checkpoint.validate.notEmpty\", {\n            fieldName: t(\"checkpoint.form.name\"),\n          }),\n        ),\n      ],\n      maxLength: 50,\n    },\n    {\n      type: TYPE_FIELD.INPUT,\n      name: \"place\",\n      label: t(\"checkpoint.form.place\"),\n      colwidth: COL_HAFT,\n      rules: [\n        {\n          required: true,\n          message: \"\",\n        },\n        {\n          max: 200,\n          message: t(\"validate.maxCharacter\", { number: 200 }),\n        },\n        validate.empty(\n          t(\"checkpoint.validate.notEmpty\", {\n            fieldName: t(\"checkpoint.form.place\"),\n          }),\n        ),\n      ],\n      maxLength: 200,\n    },\n    {\n      type: TYPE_FIELD.SELECT,\n      name: \"type\",\n      label: t(\"checkpoint.form.type\"),\n      colwidth: COL_HAFT,\n      listOptions: TYPE_CHECKPOINT,\n      rules: [\n        {\n          required: true,\n          message: \"\",\n        },\n        validate.empty(\n          t(\"checkpoint.validate.notEmpty\", {\n            fieldName: t(\"checkpoint.form.type\"),\n          }),\n        ),\n      ],\n    },\n    {\n      type: TYPE_FIELD.TEXT_AREA,\n      name: \"description\",\n      label: t(\"checkpoint.form.description\"),\n      rules: [\n        {\n          required: true,\n          message: \"\",\n        },\n        validate.empty(\n          t(\"checkpoint.validate.notEmpty\", {\n            fieldName: t(\"checkpoint.form.description\"),\n          }),\n        ),\n      ],\n    },\n    {\n      type: TYPE_FIELD.UPLOAD,\n      name: \"imagesCheckPoint\",\n      label: t(\"checkpoint.form.images\"),\n      colwidth: COL_HAFT,\n      initialFileList: data\n        ? data?.image.map((item) => {\n            return {\n              uid: item,\n              url: `${IMAGE_URL}${item}/original.jpg`,\n            };\n          })\n        : [],\n      deletedArr,\n      setAddedArr,\n      setDeletedArr,\n      rules: [\n        {\n          required: true,\n          message: \"\",\n        },\n        validate.emptyImg(\n          t(\"checkpoint.validate.notEmpty\", {\n            fieldName: t(\"checkpoint.form.images\"),\n          }),\n        ),\n      ],\n    },\n    {\n      type: TYPE_FIELD.INPUT,\n      name: \"distance\",\n      label: t(\"checkpoint.form.distance\"),\n      onChange: (e) => numberPreventInput(e.target.value, form, \"distance\", 2),\n      colwidth: COL_HAFT,\n      rules: [\n        {\n          required: true,\n          message: \"\",\n        },\n        validate.empty(\n          t(\"checkpoint.validate.notEmpty\", {\n            fieldName: t(\"checkpoint.form.distance\"),\n          }),\n        ),\n      ],\n    },\n    {\n      type: TYPE_FIELD.INPUT,\n      name: \"height\",\n      label: t(\"checkpoint.form.height\"),\n      colwidth: COL_HAFT,\n      onChange: (e) => numberPreventInput(e.target.value, form, \"height\", 2),\n      rules: [\n        {\n          required: true,\n          message: \"\",\n        },\n        validate.empty(\n          t(\"checkpoint.validate.notEmpty\", {\n            fieldName: t(\"checkpoint.form.height\"),\n          }),\n        ),\n      ],\n    },\n    {\n      type: TYPE_FIELD.INPUT,\n      name: \"latitude\",\n      label: t(\"checkpoint.form.latitude\"),\n      colwidth: COL_HAFT,\n      onChange: (e) =>\n        validates.checkpoint.coordinates(\n          e.target.value,\n          form,\n          \"latitude\",\n          -90,\n          90,\n        ),\n      rules: [\n        {\n          required: true,\n          message: \"\",\n        },\n        validate.empty(\n          t(\"checkpoint.validate.notEmpty\", {\n            fieldName: t(\"checkpoint.form.latitude\"),\n          }),\n        ),\n      ],\n    },\n    {\n      type: TYPE_FIELD.INPUT,\n      name: \"longitude\",\n      label: t(\"checkpoint.form.longitude\"),\n      colwidth: COL_HAFT,\n      onChange: (e) =>\n        validates.checkpoint.coordinates(\n          e.target.value,\n          form,\n          \"longitude\",\n          -180,\n          180,\n        ),\n      rules: [\n        {\n          required: true,\n          message: \"\",\n        },\n        validate.empty(\n          t(\"checkpoint.validate.notEmpty\", {\n            fieldName: t(\"checkpoint.form.longitude\"),\n          }),\n        ),\n      ],\n    },\n    {\n      type: TYPE_FIELD.TEXT_AREA,\n      name: \"review\",\n      label: t(\"checkpoint.form.review\"),\n      maxLength: 200,\n      showCount: true,\n    },\n  ];\n\n  const handleRedirectListPage = () => {\n    navigate(PATH_URL.CHECKPOINT.INDEX);\n  };\n\n  const createCheckPoint = (formData) => {\n    checkPointApi\n      .createCheckPoint(formData)\n      .then((response) => {\n        if (response.success === true) {\n          message.success(t(\"checkpoint.form.createSuccess\"));\n        } else {\n          message.error(t(\"checkpoint.form.createError\"));\n        }\n        handleRedirectListPage();\n      })\n      .catch(() => {\n        message.error(t(\"checkpoint.form.createError\"));\n      });\n  };\n\n  const editCheckPoint = (formData) => {\n    checkPointApi\n      .editCheckPoint(formData, data.id)\n      .then((response) => {\n        if (response.success === true) {\n          message.success(t(\"checkpoint.form.editSuccess\"));\n        } else {\n          message.error(t(\"checkpoint.form.editError\"));\n        }\n        handleRedirectListPage();\n      })\n      .catch(() => {\n        message.error(t(\"checkpoint.form.editError\"));\n      });\n  };\n\n  const onSubmit = (values) => {\n    let payload = {\n      ...values,\n      imagesAddCheckPoint: addedArr,\n    };\n\n    if (!data) {\n      const formData = appendFormData(payload);\n      createCheckPoint(formData);\n    } else {\n      payload = {\n        ...values,\n        deleteImageIds: deletedArr.length > 0 ? deletedArr : [],\n        imagesCheckPoint: data.image,\n        imagesAddCheckPoint: addedArr,\n      };\n      const formData = appendFormData(payload);\n      editCheckPoint(formData);\n    }\n  };\n\n  useEffect(() => forceUpdate({}), []);\n\n  return (\n    <div className=\"checkpoint-form form-default\">\n      <Row align=\"middle\" className=\"full-width header-table\">\n        <h1>\n          {!data\n            ? t(\"checkpoint.form.createCheckPoint\")\n            : t(\"checkpoint.form.editCheckPoint\")}\n        </h1>\n      </Row>\n\n      {loading ? (\n        <Skeleton active />\n      ) : (\n        <Card>\n          <Form\n            form={form}\n            layout=\"vertical\"\n            colon={false}\n            onFinish={onSubmit}\n            initialValues={initialValues}\n            validateTrigger={[\"onChange\"]}\n          >\n            <Row gutter={[48, 8]}>{renderFieldForm(listField)}</Row>\n            <Row className=\"flex jc-center gap-20 full-width\">\n              <Button\n                onClick={handleRedirectListPage}\n                className=\"fw-600 cancel-btn\"\n                type=\"default\"\n              >\n                {t(\"checkpoint.form.btnBack\")}\n              </Button>\n              <Button\n                type=\"primary\"\n                htmlType=\"submit\"\n                className=\"fw-600 submit-btn\"\n              >\n                {!data\n                  ? t(\"checkpoint.form.btnSubmit\")\n                  : t(\"checkpoint.form.btnSave\")}\n              </Button>\n            </Row>\n          </Form>\n        </Card>\n      )}\n    </div>\n  );\n}\n\nCheckPointForm.propTypes = {};\nexport default CheckPointForm;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}