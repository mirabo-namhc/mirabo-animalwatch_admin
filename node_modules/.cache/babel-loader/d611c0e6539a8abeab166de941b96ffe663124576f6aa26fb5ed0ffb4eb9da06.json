{"ast":null,"code":"var _s = $RefreshSig$();\nimport { Button, Card, Form, Row, message } from \"antd\";\nimport { useForm } from \"antd/es/form/Form\";\nimport PropTypes from \"prop-types\";\nimport React, { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { IMAGE_URL } from \"@common/config/endpoint\";\nimport { COLDEF, TYPE_FIELD } from \"@common/constant/form\";\nimport { appendFormData } from \"@common/utils/appendFormData\";\nimport { renderFieldForm } from \"@common/utils/renderFieldForm\";\nimport { courseApi } from \"@services/apis/course\";\nimport { validate } from \"@validate/index\";\nimport { numberPreventInput } from \"@validate/validate\";\nfunction BadgeForm(_ref) {\n  _s();\n  var _state$value, _state$value2;\n  let {\n    state,\n    onCloseModal,\n    setReloadData\n  } = _ref;\n  const {\n    t\n  } = useTranslation();\n  const [form] = useForm();\n  const isCreateMode = (state === null || state === void 0 ? void 0 : state.mode) === \"CREATE\";\n  const [addedArr, setAddedArr] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const handleCancel = () => {\n    onCloseModal();\n  };\n  const dataFormCourse = [{\n    colwidth: COLDEF,\n    type: TYPE_FIELD.INPUT,\n    name: \"title\",\n    maxLength: 50,\n    label: t(\"managementCourses.form.badge.title\"),\n    rules: [{\n      required: true,\n      message: \"\"\n    }, {\n      max: 50,\n      message: t(\"validate.maxCharacter\", {\n        number: 50\n      })\n    }, validate.empty(t(\"managementCourses.validate.notEmpty\", {\n      fieldName: t(\"managementCourses.form.badge.title\")\n    }))]\n  }, {\n    type: TYPE_FIELD.INPUT,\n    name: \"condition\",\n    label: t(\"managementCourses.form.badge.conditions\"),\n    onChange: e => numberPreventInput(e.target.value, form, \"condition\", 2),\n    rules: [{\n      required: true,\n      message: \"\"\n    }, validate.empty(t(\"managementCourses.validate.notEmpty\", {\n      fieldName: t(\"managementCourses.form.badge.conditions\")\n    }))]\n  }, {\n    type: TYPE_FIELD.UPLOAD,\n    name: \"image\",\n    label: t(\"managementCourses.form.badge.image\"),\n    length: 1,\n    initialFileList: state !== null && state !== void 0 && (_state$value = state.value) !== null && _state$value !== void 0 && _state$value.image ? [{\n      uid: \"\",\n      url: `${IMAGE_URL}${state === null || state === void 0 ? void 0 : (_state$value2 = state.value) === null || _state$value2 === void 0 ? void 0 : _state$value2.image}/original.jpg`\n    }] : [],\n    setAddedArr,\n    rules: [{\n      required: true,\n      message: \"\"\n    }, validate.emptyImg(t(\"managementCourses.validate.notEmpty\", {\n      fieldName: t(\"managementCourses.form.images\")\n    }))]\n  }];\n  const handleFinish = async values => {\n    if (!isCreateMode) {\n      try {\n        var _state$value3;\n        setLoading(true);\n        await courseApi.editBadge(state === null || state === void 0 ? void 0 : (_state$value3 = state.value) === null || _state$value3 === void 0 ? void 0 : _state$value3.id, addedArr.length ? appendFormData({\n          ...values,\n          imageBadge: addedArr,\n          courseId: state.courseId\n        }) : {\n          ...values,\n          courseId: state.courseId\n        });\n        message.success(t(\"managementCourses.noti.editBadgeSuccess\"));\n        handleCancel();\n        setReloadData(preState => !preState);\n      } catch (error) {\n        message.success(t(\"managementCourses.noti.editBadgeFail\"));\n      } finally {\n        setLoading(false);\n      }\n    } else {\n      try {\n        setLoading(true);\n        await courseApi.postBadge(appendFormData({\n          ...values,\n          courseId: state.courseId,\n          imageBadge: addedArr,\n          description: \"\"\n        }));\n        message.success(t(\"managementCourses.noti.createBadgeSuccess\"));\n        handleCancel();\n        setReloadData(preState => !preState);\n      } catch (error) {\n        message.error(t(\"managementCourses.noti.createBadgeFail\"));\n        message.error(error);\n      } finally {\n        setLoading(false);\n      }\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"course-form form-default\"\n  }, /*#__PURE__*/React.createElement(Row, {\n    align: \"middle\",\n    className: \"full-width header-table title-badge-from\"\n  }, /*#__PURE__*/React.createElement(\"h3\", null, isCreateMode ? t(\"managementCourses.form.titleCreateBadge\") : t(\"managementCourses.form.titleEditBadge\"))), /*#__PURE__*/React.createElement(Card, {\n    className: \"badge-form\"\n  }, /*#__PURE__*/React.createElement(Form, {\n    form: form,\n    colon: false,\n    layout: \"vertical\",\n    initialValues: (state === null || state === void 0 ? void 0 : state.value) || {},\n    onFinish: handleFinish,\n    autoComplete: \"off\"\n  }, /*#__PURE__*/React.createElement(Row, {\n    gutter: [48, 8]\n  }, renderFieldForm(dataFormCourse)), /*#__PURE__*/React.createElement(Row, {\n    className: \"flex jc-center gap-20 full-width\"\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: \"default\",\n    className: \"fw-600 cancel-btn\",\n    onClick: handleCancel\n  }, t(\"form.btnBack\")), /*#__PURE__*/React.createElement(Button, {\n    loading: loading,\n    disabled: loading,\n    className: \"fw-600 submit-btn\",\n    type: \"primary\",\n    htmlType: \"submit\"\n  }, !isCreateMode ? t(\"managementCourses.form.btnEdit\") : t(\"form.btnCreate\"))))));\n}\n_s(BadgeForm, \"tx4JHa8VBiL+lni3Cz/KOoVmzgU=\", false, function () {\n  return [useTranslation, useForm];\n});\n_c = BadgeForm;\nBadgeForm.propTypes = {\n  state: PropTypes.object,\n  onCloseModal: PropTypes.func,\n  setReloadData: PropTypes.func\n};\nexport default BadgeForm;\nvar _c;\n$RefreshReg$(_c, \"BadgeForm\");","map":{"version":3,"mappings":"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","names":["Button","Card","Form","Row","message","useForm","PropTypes","React","useState","useTranslation","IMAGE_URL","COLDEF","TYPE_FIELD","appendFormData","renderFieldForm","courseApi","validate","numberPreventInput","BadgeForm","state","onCloseModal","setReloadData","t","form","isCreateMode","mode","addedArr","setAddedArr","loading","setLoading","handleCancel","dataFormCourse","colwidth","type","INPUT","name","maxLength","label","rules","required","max","number","empty","fieldName","onChange","e","target","value","UPLOAD","length","initialFileList","image","uid","url","emptyImg","handleFinish","values","editBadge","id","imageBadge","courseId","success","preState","error","postBadge","description","className","align","colon","layout","initialValues","onFinish","autoComplete","gutter","onClick","disabled","htmlType","propTypes","object","func"],"sources":["/home/huynd/animalwatch_admin/src/pages/manager/course/BadgeForm.jsx"],"sourcesContent":["import { Button, Card, Form, Row, message } from \"antd\";\nimport { useForm } from \"antd/es/form/Form\";\nimport PropTypes from \"prop-types\";\nimport React, { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { IMAGE_URL } from \"@common/config/endpoint\";\nimport { COLDEF, TYPE_FIELD } from \"@common/constant/form\";\nimport { appendFormData } from \"@common/utils/appendFormData\";\nimport { renderFieldForm } from \"@common/utils/renderFieldForm\";\nimport { courseApi } from \"@services/apis/course\";\nimport { validate } from \"@validate/index\";\nimport { numberPreventInput } from \"@validate/validate\";\n\nfunction BadgeForm({ state, onCloseModal, setReloadData }) {\n  const { t } = useTranslation();\n  const [form] = useForm();\n  const isCreateMode = state?.mode === \"CREATE\";\n  const [addedArr, setAddedArr] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  const handleCancel = () => {\n    onCloseModal();\n  };\n\n  const dataFormCourse = [\n    {\n      colwidth: COLDEF,\n      type: TYPE_FIELD.INPUT,\n      name: \"title\",\n      maxLength: 50,\n      label: t(\"managementCourses.form.badge.title\"),\n      rules: [\n        {\n          required: true,\n          message: \"\",\n        },\n        {\n          max: 50,\n          message: t(\"validate.maxCharacter\", { number: 50 }),\n        },\n        validate.empty(\n          t(\"managementCourses.validate.notEmpty\", {\n            fieldName: t(\"managementCourses.form.badge.title\"),\n          }),\n        ),\n      ],\n    },\n    {\n      type: TYPE_FIELD.INPUT,\n      name: \"condition\",\n      label: t(\"managementCourses.form.badge.conditions\"),\n      onChange: (e) => numberPreventInput(e.target.value, form, \"condition\", 2),\n      rules: [\n        {\n          required: true,\n          message: \"\",\n        },\n        validate.empty(\n          t(\"managementCourses.validate.notEmpty\", {\n            fieldName: t(\"managementCourses.form.badge.conditions\"),\n          }),\n        ),\n      ],\n    },\n    {\n      type: TYPE_FIELD.UPLOAD,\n      name: \"image\",\n      label: t(\"managementCourses.form.badge.image\"),\n      length: 1,\n      initialFileList: state?.value?.image\n        ? [{ uid: \"\", url: `${IMAGE_URL}${state?.value?.image}/original.jpg` }]\n        : [],\n      setAddedArr,\n      rules: [\n        {\n          required: true,\n          message: \"\",\n        },\n        validate.emptyImg(\n          t(\"managementCourses.validate.notEmpty\", {\n            fieldName: t(\"managementCourses.form.images\"),\n          }),\n        ),\n      ],\n    },\n  ];\n\n  const handleFinish = async (values) => {\n    if (!isCreateMode) {\n      try {\n        setLoading(true);\n        await courseApi.editBadge(\n          state?.value?.id,\n          addedArr.length\n            ? appendFormData({\n                ...values,\n                imageBadge: addedArr,\n                courseId: state.courseId,\n              })\n            : { ...values, courseId: state.courseId },\n        );\n        message.success(t(\"managementCourses.noti.editBadgeSuccess\"));\n        handleCancel();\n        setReloadData((preState) => !preState);\n      } catch (error) {\n        message.success(t(\"managementCourses.noti.editBadgeFail\"));\n      } finally {\n        setLoading(false);\n      }\n    } else {\n      try {\n        setLoading(true);\n        await courseApi.postBadge(\n          appendFormData({\n            ...values,\n            courseId: state.courseId,\n            imageBadge: addedArr,\n            description: \"\",\n          }),\n        );\n        message.success(t(\"managementCourses.noti.createBadgeSuccess\"));\n        handleCancel();\n        setReloadData((preState) => !preState);\n      } catch (error) {\n        message.error(t(\"managementCourses.noti.createBadgeFail\"));\n        message.error(error);\n      } finally {\n        setLoading(false);\n      }\n    }\n  };\n\n  return (\n    <div className=\"course-form form-default\">\n      <Row align=\"middle\" className=\"full-width header-table title-badge-from\">\n        <h3>\n          {isCreateMode\n            ? t(\"managementCourses.form.titleCreateBadge\")\n            : t(\"managementCourses.form.titleEditBadge\")}\n        </h3>\n      </Row>\n\n      <Card className=\"badge-form\">\n        <Form\n          form={form}\n          colon={false}\n          layout=\"vertical\"\n          initialValues={state?.value || {}}\n          onFinish={handleFinish}\n          autoComplete=\"off\"\n        >\n          <Row gutter={[48, 8]}>{renderFieldForm(dataFormCourse)}</Row>\n          <Row className=\"flex jc-center gap-20 full-width\">\n            <Button\n              type=\"default\"\n              className=\"fw-600 cancel-btn\"\n              onClick={handleCancel}\n            >\n              {t(\"form.btnBack\")}\n            </Button>\n            <Button\n              loading={loading}\n              disabled={loading}\n              className=\"fw-600 submit-btn\"\n              type=\"primary\"\n              htmlType=\"submit\"\n            >\n              {!isCreateMode\n                ? t(\"managementCourses.form.btnEdit\")\n                : t(\"form.btnCreate\")}\n            </Button>\n          </Row>\n        </Form>\n      </Card>\n    </div>\n  );\n}\n\nBadgeForm.propTypes = {\n  state: PropTypes.object,\n  onCloseModal: PropTypes.func,\n  setReloadData: PropTypes.func,\n};\n\nexport default BadgeForm;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}