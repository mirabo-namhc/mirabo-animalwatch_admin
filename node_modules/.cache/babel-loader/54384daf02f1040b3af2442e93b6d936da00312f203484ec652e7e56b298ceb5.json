{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport PATH_URL from \"@common/config/pathURL\";\nimport useFetch from \"@common/hooks/useFetch\";\nimport { formatDateTimeTable } from \"@common/utils/dateHelper\";\nimport ComTable from \"@components/common/ComTable\";\nimport { notificationApi } from \"@services/apis/notification\";\nimport { useTranslation } from \"react-i18next\";\nimport { useNavigate } from \"react-router-dom\";\nimport { TYPE_SORT } from \"@common/constant/masterData\";\nfunction NotificationList(props) {\n  _s();\n  var _value$paginate;\n  const {\n    t\n  } = useTranslation();\n  const navigate = useNavigate();\n  const [refetch, setRefetch] = useState(\"\");\n  const [pagination, setPagination] = useState({\n    page: 1,\n    take: 10,\n    keyword: \"\"\n  });\n  const {\n    loading,\n    value\n  } = useFetch(ourRequest => notificationApi.getNotifications(pagination, ourRequest), [pagination, refetch]);\n  const handleSearch = keyWord => {\n    setPagination(curState => ({\n      ...curState,\n      page: 1,\n      keyword: keyWord.trim()\n    }));\n  };\n  const handleCreate = () => {\n    navigate(PATH_URL.CHECKPOINT.CREATE);\n  };\n  const handleChangeTable = (paginate, filter, sorter) => {\n    const paginateState = {\n      page: paginate === null || paginate === void 0 ? void 0 : paginate.current,\n      take: paginate === null || paginate === void 0 ? void 0 : paginate.pageSize,\n      sort: sorter.field && sorter.order ? `${sorter === null || sorter === void 0 ? void 0 : sorter.field}:${TYPE_SORT[sorter === null || sorter === void 0 ? void 0 : sorter.order]}` : \"\"\n    };\n    if (!paginateState.sort) delete paginateState.sort;\n    setPagination(curState => {\n      const {\n        sort,\n        ...rest\n      } = curState;\n      return paginateState.sort ? {\n        ...curState,\n        ...paginateState\n      } : {\n        ...rest,\n        ...paginateState\n      };\n    });\n  };\n  const totalPage = value === null || value === void 0 ? void 0 : (_value$paginate = value.paginate) === null || _value$paginate === void 0 ? void 0 : _value$paginate.totalPage;\n  const paginationProp = {\n    position: [\"bottomRight\"],\n    total: totalPage * pagination.take,\n    current: pagination.page,\n    showSizeChanger: true\n  };\n  const handleDetailShow = noti => {\n    navigate(`/management-notification/detail/${noti.id}`);\n  };\n  const columns = [{\n    title: t(\"notification.list.notificationID\"),\n    dataIndex: \"id\",\n    width: 150,\n    align: \"center\",\n    sorter: true\n  }, {\n    title: t(\"notification.typeNoti\"),\n    dataIndex: \"recipientId\",\n    width: 400,\n    align: \"center\",\n    render: recipientId => /*#__PURE__*/React.createElement(\"span\", null, !recipientId ? t(\"notification.allUser\") : t(\"notification.onlyUser\"))\n  }, {\n    title: t(\"notification.list.description\"),\n    dataIndex: \"description\",\n    width: 400,\n    align: \"center\",\n    sorter: true\n  }, {\n    title: t(\"notification.list.link\"),\n    dataIndex: \"link\",\n    align: \"center\"\n  }, {\n    title: t(\"notification.list.createdAt\"),\n    dataIndex: \"createdAt\",\n    align: \"center\",\n    render: values => {\n      return formatDateTimeTable(values);\n    },\n    width: 200\n  }, {\n    title: t(\"notification.userId\"),\n    dataIndex: \"recipientId\",\n    align: \"center\",\n    width: 100\n  }];\n  return /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(ComTable, {\n    title: t(\"notification.listTitle\"),\n    loading: loading,\n    columns: columns,\n    data: value === null || value === void 0 ? void 0 : value.data,\n    pagination: paginationProp,\n    onAddTable: handleCreate,\n    onSearch: handleSearch,\n    onClickRow: handleDetailShow,\n    onChangeTable: handleChangeTable\n  }));\n}\n_s(NotificationList, \"zgKe1pYgKLOaa9Fvzf3uvZunnhA=\", false, function () {\n  return [useTranslation, useNavigate, useFetch];\n});\n_c = NotificationList;\nNotificationList.propTypes = {};\nexport default NotificationList;\nvar _c;\n$RefreshReg$(_c, \"NotificationList\");","map":{"version":3,"mappings":"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","names":["React","useState","PATH_URL","useFetch","formatDateTimeTable","ComTable","notificationApi","useTranslation","useNavigate","TYPE_SORT","NotificationList","props","t","navigate","refetch","setRefetch","pagination","setPagination","page","take","keyword","loading","value","ourRequest","getNotifications","handleSearch","keyWord","curState","trim","handleCreate","CHECKPOINT","CREATE","handleChangeTable","paginate","filter","sorter","paginateState","current","pageSize","sort","field","order","rest","totalPage","paginationProp","position","total","showSizeChanger","handleDetailShow","noti","id","columns","title","dataIndex","width","align","render","recipientId","values","data","onAddTable","onSearch","onClickRow","onChangeTable","propTypes"],"sources":["/home/huynd/animalwatch_admin/src/pages/notification/NotificationList.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport PATH_URL from \"@common/config/pathURL\";\r\nimport useFetch from \"@common/hooks/useFetch\";\r\nimport { formatDateTimeTable } from \"@common/utils/dateHelper\";\r\nimport ComTable from \"@components/common/ComTable\";\r\nimport { notificationApi } from \"@services/apis/notification\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { TYPE_SORT } from \"@common/constant/masterData\";\r\n\r\nfunction NotificationList(props) {\r\n  const { t } = useTranslation();\r\n  const navigate = useNavigate();\r\n  const [refetch, setRefetch] = useState(\"\");\r\n  const [pagination, setPagination] = useState({\r\n    page: 1,\r\n    take: 10,\r\n    keyword: \"\",\r\n  });\r\n\r\n  const { loading, value } = useFetch(\r\n    (ourRequest) => notificationApi.getNotifications(pagination, ourRequest),\r\n    [pagination, refetch],\r\n  );\r\n\r\n  const handleSearch = (keyWord) => {\r\n    setPagination((curState) => ({\r\n      ...curState,\r\n      page: 1,\r\n      keyword: keyWord.trim(),\r\n    }));\r\n  };\r\n\r\n  const handleCreate = () => {\r\n    navigate(PATH_URL.CHECKPOINT.CREATE);\r\n  };\r\n\r\n  const handleChangeTable = (paginate, filter, sorter) => {\r\n    const paginateState = {\r\n      page: paginate?.current,\r\n      take: paginate?.pageSize,\r\n      sort:\r\n        sorter.field && sorter.order\r\n          ? `${sorter?.field}:${TYPE_SORT[sorter?.order]}`\r\n          : \"\",\r\n    };\r\n\r\n    if (!paginateState.sort) delete paginateState.sort;\r\n    setPagination((curState) => {\r\n      const { sort, ...rest } = curState;\r\n\r\n      return paginateState.sort\r\n        ? {\r\n            ...curState,\r\n            ...paginateState,\r\n          }\r\n        : {\r\n            ...rest,\r\n            ...paginateState,\r\n          };\r\n    });\r\n  };\r\n\r\n  const totalPage = value?.paginate?.totalPage;\r\n  const paginationProp = {\r\n    position: [\"bottomRight\"],\r\n    total: totalPage * pagination.take,\r\n    current: pagination.page,\r\n    showSizeChanger: true,\r\n  };\r\n\r\n  const handleDetailShow = (noti) => {\r\n    navigate(`/management-notification/detail/${noti.id}`);\r\n  };\r\n\r\n  const columns = [\r\n    {\r\n      title: t(\"notification.list.notificationID\"),\r\n      dataIndex: \"id\",\r\n      width: 150,\r\n      align: \"center\",\r\n      sorter: true,\r\n    },\r\n    {\r\n      title: t(\"notification.typeNoti\"),\r\n      dataIndex: \"recipientId\",\r\n      width: 400,\r\n      align: \"center\",\r\n      render: (recipientId) => (\r\n        <span>\r\n          {!recipientId\r\n            ? t(\"notification.allUser\")\r\n            : t(\"notification.onlyUser\")}\r\n        </span>\r\n      ),\r\n    },\r\n    {\r\n      title: t(\"notification.list.description\"),\r\n      dataIndex: \"description\",\r\n      width: 400,\r\n      align: \"center\",\r\n      sorter: true,\r\n    },\r\n    {\r\n      title: t(\"notification.list.link\"),\r\n      dataIndex: \"link\",\r\n      align: \"center\",\r\n    },\r\n    {\r\n      title: t(\"notification.list.createdAt\"),\r\n      dataIndex: \"createdAt\",\r\n      align: \"center\",\r\n      render: (values) => {\r\n        return formatDateTimeTable(values);\r\n      },\r\n      width: 200,\r\n    },\r\n    {\r\n      title: t(\"notification.userId\"),\r\n      dataIndex: \"recipientId\",\r\n      align: \"center\",\r\n      width: 100,\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <div>\r\n      <ComTable\r\n        title={t(\"notification.listTitle\")}\r\n        loading={loading}\r\n        columns={columns}\r\n        data={value?.data}\r\n        pagination={paginationProp}\r\n        onAddTable={handleCreate}\r\n        onSearch={handleSearch}\r\n        onClickRow={handleDetailShow}\r\n        onChangeTable={handleChangeTable}\r\n      />\r\n    </div>\r\n  );\r\n}\r\nNotificationList.propTypes = {};\r\n\r\nexport default NotificationList;\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}