{"ast":null,"code":"var _s = $RefreshSig$();\nimport { Button, Card, Form, Row, message } from \"antd\";\nimport { useForm, useWatch } from \"antd/es/form/Form\";\nimport React, { useEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport PATH_URL from \"@common/config/pathURL\";\nimport { COLDEF, TYPE_FIELD } from \"@common/constant/form\";\nimport { renderFieldForm } from \"@common/utils/renderFieldForm\";\nimport { resultImageApi } from \"@services/apis/result-image\";\nimport { validate } from \"@validate/index\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport { TYPE_RESULT_IMG } from \"@common/constant/masterData\";\nimport { IMAGE_URL } from \"@common/config/endpoint\";\nimport { appendFormData } from \"@common/utils/appendFormData\";\nfunction ResultImageForm() {\n  _s();\n  const {\n    t\n  } = useTranslation();\n  const [form] = useForm();\n  const {\n    state\n  } = useLocation();\n  const isDetailPage = window.location.href.includes(\"detail\");\n  const [loading, setLoading] = useState(false);\n  const listUserSelect = useWatch(\"userId\", form);\n  const navigate = useNavigate();\n  const [addedArr, setAddedArr] = useState([]);\n  const initialValues = {\n    ...state\n  };\n  const handleCancel = () => {\n    navigate(PATH_URL.RESULT_IMAGE_MANAGERMENT.INDEX);\n  };\n  const showTitle = () => {\n    return state ? t(\"resultImageManagement.titleEdit\") : t(\"resultImageManagement.titleCreate\");\n  };\n  const dataForm = [{\n    colwidth: COLDEF,\n    type: TYPE_FIELD.SELECT,\n    disabled: isDetailPage,\n    name: \"type\",\n    label: t(\"resultImageManagement.list.type\"),\n    listOptions: TYPE_RESULT_IMG,\n    rules: [{\n      required: true\n    }]\n  }, {\n    colwidth: COLDEF,\n    type: TYPE_FIELD.INPUT,\n    name: \"title\",\n    maxLength: 50,\n    label: t(\"resultImageManagement.list.title\"),\n    readOnly: isDetailPage,\n    rules: [{\n      required: true,\n      message: \"\"\n    }, {\n      max: 50,\n      message: t(\"validate.maxCharacter\", {\n        number: 50\n      })\n    }, validate.empty(t(\"validate.notEmpty\", {\n      fieldName: t(\"resultImageManagement.list.title\")\n    }))]\n  }, {\n    type: TYPE_FIELD.UPLOAD,\n    name: \"image\",\n    label: t(\"resultImageManagement.list.image\"),\n    length: 1,\n    initialFileList: state !== null && state !== void 0 && state.image ? [{\n      uid: \"\",\n      url: `${IMAGE_URL}${state === null || state === void 0 ? void 0 : state.image}/original.jpg`\n    }] : [],\n    setAddedArr,\n    rules: [{\n      required: true,\n      message: \"\"\n    }, validate.emptyImg(t(\"validate.notEmpty\", {\n      fieldName: t(\"resultImageManagement.list.image\")\n    }))]\n  }, {\n    colwidth: 12,\n    type: TYPE_FIELD.INPUT,\n    disabled: isDetailPage,\n    name: \"initialCondition\",\n    label: t(\"resultImageManagement.list.initialCondition\"),\n    onChange: evt => validate.numberPreventInput(evt.target.value, form, \"initialCondition\"),\n    rules: [{\n      required: true,\n      message: \"\"\n    }, validate.empty(t(\"managementCourses.validate.notEmpty\", {\n      fieldName: t(\"resultImageManagement.list.initialCondition\")\n    }))]\n  }, {\n    colwidth: 12,\n    type: TYPE_FIELD.INPUT,\n    disabled: isDetailPage,\n    name: \"finalCondition\",\n    label: t(\"resultImageManagement.list.finalCondition\"),\n    onChange: evt => validate.numberPreventInput(evt.target.value, form, \"finalCondition\"),\n    rules: [{\n      validator: (rule, value) => {\n        if (value && Number(value) <= Number(form.getFieldValue(\"initialCondition\"))) {\n          return Promise.reject(t(\"resultImageManagement.message.greaterThanError\"));\n        }\n        return Promise.resolve();\n      }\n    }]\n  }];\n  const handleFinish = async values => {\n    if (state) {\n      try {\n        setLoading(true);\n        if (!(values !== null && values !== void 0 && values.finalCondition) || (values === null || values === void 0 ? void 0 : values.finalCondition) === \"\") {\n          values.finalCondition = null;\n        }\n        await resultImageApi.putResultImage(state === null || state === void 0 ? void 0 : state.id, addedArr.length ? appendFormData({\n          ...values,\n          imageBadge: addedArr\n        }) : {\n          ...values\n        });\n        message.success(t(\"resultImageManagement.message.editSuccess\"));\n        handleCancel();\n      } catch (error) {\n        var _error$response, _error$response$data;\n        if (error && (error === null || error === void 0 ? void 0 : (_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) === \"result_image_already_exist\") {\n          message.error(t(\"resultImageManagement.message.duplicateError\"));\n        } else message.error(t(\"resultImageManagement.message.editError\"));\n      } finally {\n        setLoading(false);\n      }\n    } else {\n      try {\n        setLoading(true);\n        if (!(values !== null && values !== void 0 && values.finalCondition) || (values === null || values === void 0 ? void 0 : values.finalCondition) === \"\") {\n          values.finalCondition = null;\n        }\n        await resultImageApi.postResultImage(appendFormData({\n          ...values,\n          imageBadge: addedArr\n        }));\n        message.success(t(\"resultImageManagement.message.createSuccess\"));\n        handleCancel();\n      } catch (error) {\n        var _error$response2, _error$response2$data;\n        if (error && (error === null || error === void 0 ? void 0 : (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) === \"result_image_already_exist\") {\n          message.error(t(\"resultImageManagement.message.duplicateError\"));\n        } else message.error(t(\"resultImageManagement.message.createError\"));\n      } finally {\n        setLoading(false);\n      }\n    }\n  };\n  useEffect(() => {\n    form.validateFields([\"userId\"]);\n  }, [listUserSelect]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"course-form form-default\"\n  }, /*#__PURE__*/React.createElement(Row, {\n    align: \"middle\",\n    className: \"full-width header-table\"\n  }, /*#__PURE__*/React.createElement(\"h3\", null, showTitle())), /*#__PURE__*/React.createElement(Card, null, /*#__PURE__*/React.createElement(Form, {\n    form: form,\n    colon: false,\n    layout: \"vertical\",\n    initialValues: state ? initialValues : {},\n    onFinish: handleFinish,\n    autoComplete: \"off\"\n  }, /*#__PURE__*/React.createElement(Row, {\n    gutter: [48, 8]\n  }, renderFieldForm(dataForm)), /*#__PURE__*/React.createElement(Row, {\n    className: \"flex jc-center gap-20 mt-15 full-width\"\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: \"default\",\n    className: \"fw-600 cancel-btn\",\n    onClick: handleCancel\n  }, t(\"form.btnBack\")), /*#__PURE__*/React.createElement(Button, {\n    loading: loading,\n    disabled: loading,\n    className: \"fw-600 submit-btn\",\n    type: \"primary\",\n    htmlType: \"submit\"\n  }, state ? t(\"form.btnEdit\") : t(\"form.btnCreate\"))))));\n}\n_s(ResultImageForm, \"VIGD+UZeVC2Rk5kwFFob/M9qNvg=\", false, function () {\n  return [useTranslation, useForm, useLocation, useWatch, useNavigate];\n});\n_c = ResultImageForm;\nResultImageForm.propTypes = {};\nexport default ResultImageForm;\nvar _c;\n$RefreshReg$(_c, \"ResultImageForm\");","map":{"version":3,"mappings":"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","names":["Button","Card","Form","Row","message","useForm","useWatch","React","useEffect","useState","useTranslation","PATH_URL","COLDEF","TYPE_FIELD","renderFieldForm","resultImageApi","validate","useLocation","useNavigate","TYPE_RESULT_IMG","IMAGE_URL","appendFormData","ResultImageForm","t","form","state","isDetailPage","window","location","href","includes","loading","setLoading","listUserSelect","navigate","addedArr","setAddedArr","initialValues","handleCancel","RESULT_IMAGE_MANAGERMENT","INDEX","showTitle","dataForm","colwidth","type","SELECT","disabled","name","label","listOptions","rules","required","INPUT","maxLength","readOnly","max","number","empty","fieldName","UPLOAD","length","initialFileList","image","uid","url","emptyImg","onChange","evt","numberPreventInput","target","value","validator","rule","Number","getFieldValue","Promise","reject","resolve","handleFinish","values","finalCondition","putResultImage","id","imageBadge","success","error","response","data","postResultImage","validateFields","className","align","colon","layout","onFinish","autoComplete","gutter","onClick","htmlType","propTypes"],"sources":["/home/huynd/animalwatch_admin/src/pages/manager/result-image/ResultImageForm.jsx"],"sourcesContent":["import { Button, Card, Form, Row, message } from \"antd\";\nimport { useForm, useWatch } from \"antd/es/form/Form\";\nimport React, { useEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nimport PATH_URL from \"@common/config/pathURL\";\nimport { COLDEF, TYPE_FIELD } from \"@common/constant/form\";\nimport { renderFieldForm } from \"@common/utils/renderFieldForm\";\nimport { resultImageApi } from \"@services/apis/result-image\";\nimport { validate } from \"@validate/index\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport { TYPE_RESULT_IMG } from \"@common/constant/masterData\";\nimport { IMAGE_URL } from \"@common/config/endpoint\";\nimport { appendFormData } from \"@common/utils/appendFormData\";\n\nfunction ResultImageForm() {\n  const { t } = useTranslation();\n  const [form] = useForm();\n  const { state } = useLocation();\n  const isDetailPage = window.location.href.includes(\"detail\");\n  const [loading, setLoading] = useState(false);\n  const listUserSelect = useWatch(\"userId\", form);\n  const navigate = useNavigate();\n  const [addedArr, setAddedArr] = useState([]);\n\n  const initialValues = {\n    ...state,\n  };\n\n  const handleCancel = () => {\n    navigate(PATH_URL.RESULT_IMAGE_MANAGERMENT.INDEX);\n  };\n\n  const showTitle = () => {\n    return state\n      ? t(\"resultImageManagement.titleEdit\")\n      : t(\"resultImageManagement.titleCreate\");\n  };\n\n  const dataForm = [\n    {\n      colwidth: COLDEF,\n      type: TYPE_FIELD.SELECT,\n      disabled: isDetailPage,\n      name: \"type\",\n      label: t(\"resultImageManagement.list.type\"),\n      listOptions: TYPE_RESULT_IMG,\n      rules: [\n        {\n          required: true,\n        },\n      ],\n    },\n    {\n      colwidth: COLDEF,\n      type: TYPE_FIELD.INPUT,\n      name: \"title\",\n      maxLength: 50,\n      label: t(\"resultImageManagement.list.title\"),\n      readOnly: isDetailPage,\n      rules: [\n        {\n          required: true,\n          message: \"\",\n        },\n        {\n          max: 50,\n          message: t(\"validate.maxCharacter\", { number: 50 }),\n        },\n        validate.empty(\n          t(\"validate.notEmpty\", {\n            fieldName: t(\"resultImageManagement.list.title\"),\n          }),\n        ),\n      ],\n    },\n    {\n      type: TYPE_FIELD.UPLOAD,\n      name: \"image\",\n      label: t(\"resultImageManagement.list.image\"),\n      length: 1,\n      initialFileList: state?.image\n        ? [{ uid: \"\", url: `${IMAGE_URL}${state?.image}/original.jpg` }]\n        : [],\n      setAddedArr,\n      rules: [\n        {\n          required: true,\n          message: \"\",\n        },\n        validate.emptyImg(\n          t(\"validate.notEmpty\", {\n            fieldName: t(\"resultImageManagement.list.image\"),\n          }),\n        ),\n      ],\n    },\n    {\n      colwidth: 12,\n      type: TYPE_FIELD.INPUT,\n      disabled: isDetailPage,\n      name: \"initialCondition\",\n      label: t(\"resultImageManagement.list.initialCondition\"),\n      onChange: (evt) =>\n        validate.numberPreventInput(evt.target.value, form, \"initialCondition\"),\n      rules: [\n        {\n          required: true,\n          message: \"\",\n        },\n        validate.empty(\n          t(\"managementCourses.validate.notEmpty\", {\n            fieldName: t(\"resultImageManagement.list.initialCondition\"),\n          }),\n        ),\n      ],\n    },\n    {\n      colwidth: 12,\n      type: TYPE_FIELD.INPUT,\n      disabled: isDetailPage,\n      name: \"finalCondition\",\n      label: t(\"resultImageManagement.list.finalCondition\"),\n      onChange: (evt) =>\n        validate.numberPreventInput(evt.target.value, form, \"finalCondition\"),\n      rules: [\n        {\n          validator: (rule, value) => {\n            if (\n              value &&\n              Number(value) <= Number(form.getFieldValue(\"initialCondition\"))\n            ) {\n              return Promise.reject(\n                t(\"resultImageManagement.message.greaterThanError\"),\n              );\n            }\n            return Promise.resolve();\n          },\n        },\n      ],\n    },\n  ];\n\n  const handleFinish = async (values) => {\n    if (state) {\n      try {\n        setLoading(true);\n        if (!values?.finalCondition || values?.finalCondition === \"\") {\n          values.finalCondition = null;\n        }\n\n        await resultImageApi.putResultImage(\n          state?.id,\n          addedArr.length\n            ? appendFormData({\n                ...values,\n                imageBadge: addedArr,\n              })\n            : { ...values },\n        );\n        message.success(t(\"resultImageManagement.message.editSuccess\"));\n        handleCancel();\n      } catch (error) {\n        if (\n          error &&\n          error?.response?.data?.message === \"result_image_already_exist\"\n        ) {\n          message.error(t(\"resultImageManagement.message.duplicateError\"));\n        } else message.error(t(\"resultImageManagement.message.editError\"));\n      } finally {\n        setLoading(false);\n      }\n    } else {\n      try {\n        setLoading(true);\n        if (!values?.finalCondition || values?.finalCondition === \"\") {\n          values.finalCondition = null;\n        }\n        await resultImageApi.postResultImage(\n          appendFormData({\n            ...values,\n            imageBadge: addedArr,\n          }),\n        );\n        message.success(t(\"resultImageManagement.message.createSuccess\"));\n        handleCancel();\n      } catch (error) {\n        if (\n          error &&\n          error?.response?.data?.message === \"result_image_already_exist\"\n        ) {\n          message.error(t(\"resultImageManagement.message.duplicateError\"));\n        } else message.error(t(\"resultImageManagement.message.createError\"));\n      } finally {\n        setLoading(false);\n      }\n    }\n  };\n\n  useEffect(() => {\n    form.validateFields([\"userId\"]);\n  }, [listUserSelect]);\n\n  return (\n    <div className=\"course-form form-default\">\n      <Row align=\"middle\" className=\"full-width header-table\">\n        <h3>{showTitle()}</h3>\n      </Row>\n\n      <Card>\n        <Form\n          form={form}\n          colon={false}\n          layout=\"vertical\"\n          initialValues={state ? initialValues : {}}\n          onFinish={handleFinish}\n          autoComplete=\"off\"\n        >\n          <Row gutter={[48, 8]}>{renderFieldForm(dataForm)}</Row>\n          <Row className=\"flex jc-center gap-20 mt-15 full-width\">\n            <Button\n              type=\"default\"\n              className=\"fw-600 cancel-btn\"\n              onClick={handleCancel}\n            >\n              {t(\"form.btnBack\")}\n            </Button>\n            <Button\n              loading={loading}\n              disabled={loading}\n              className=\"fw-600 submit-btn\"\n              type=\"primary\"\n              htmlType=\"submit\"\n            >\n              {state ? t(\"form.btnEdit\") : t(\"form.btnCreate\")}\n            </Button>\n          </Row>\n        </Form>\n      </Card>\n    </div>\n  );\n}\n\nResultImageForm.propTypes = {};\n\nexport default ResultImageForm;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}