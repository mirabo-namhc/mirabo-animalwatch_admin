{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { IMAGE_URL } from \"@common/config/endpoint\";\nimport PATH_URL from \"@common/config/pathURL\";\nimport TYPE_COLLECTION from \"@common/constant/collection\";\nimport { TYPE_FIELD } from \"@common/constant/form\";\nimport { appendFormData } from \"@common/utils/appendFormData\";\nimport { renderFieldForm } from \"@common/utils/renderFieldForm\";\nimport { collectionApi } from \"@services/apis/collection\";\nimport { courseApi } from \"@services/apis/course\";\nimport { validate } from \"@validate/index\";\nimport { Button, Card, Form, message, Row } from \"antd\";\nimport { useForm, useWatch } from \"antd/es/form/Form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport { checkPointApi } from \"@services/apis/checkpoint\";\nfunction CollectionForm() {\n  _s();\n  var _state$checkPoints, _state$courses, _state$checkPoints2, _state$checkPoints3, _state$courses2;\n  const {\n    t\n  } = useTranslation();\n  const {\n    state\n  } = useLocation();\n  const initialValues = {\n    ...state,\n    listCheckpointId: state === null || state === void 0 ? void 0 : (_state$checkPoints = state.checkPoints) === null || _state$checkPoints === void 0 ? void 0 : _state$checkPoints.map(item => {\n      return {\n        value: item === null || item === void 0 ? void 0 : item.id,\n        key: item === null || item === void 0 ? void 0 : item.id,\n        label: item === null || item === void 0 ? void 0 : item.name\n      };\n    }),\n    listCoursesId: state === null || state === void 0 ? void 0 : (_state$courses = state.courses) === null || _state$courses === void 0 ? void 0 : _state$courses.map(item => {\n      return {\n        value: item === null || item === void 0 ? void 0 : item.id,\n        key: item === null || item === void 0 ? void 0 : item.id,\n        label: item === null || item === void 0 ? void 0 : item.title\n      };\n    }),\n    type: state !== null && state !== void 0 && state.courseCount || state !== null && state !== void 0 && (_state$checkPoints2 = state.checkPoints) !== null && _state$checkPoints2 !== void 0 && _state$checkPoints2.length ? TYPE_COLLECTION[1].value : TYPE_COLLECTION[0].value\n  };\n  const navigate = useNavigate();\n  const [form] = useForm();\n  const listCourseWatch = useWatch(\"listCoursesId\", form);\n  const listCheckpointWatch = useWatch(\"listCheckpointId\", form);\n  const [loading, setLoading] = useState(false);\n  const [addedArr, setAddedArr] = useState([]);\n  const [listDeletedId, setListDeletedId] = useState([]);\n  const [isTypeRoutes, setIsTypeRoutes] = useState(!!(initialValues !== null && initialValues !== void 0 && initialValues.type));\n  const handleGetCheckPoint = async params => {\n    const response = await checkPointApi.getCheckPoints(params);\n    return response.data;\n  };\n  const handleGetCourse = async params => {\n    const response = await courseApi.getCourses(params);\n    return response.data;\n  };\n  const handleCancel = () => {\n    navigate(PATH_URL.MANAGER_COLLECTION.INDEX);\n  };\n  const handleChangeType = type => {\n    if (type) {\n      setIsTypeRoutes(true);\n    } else {\n      setIsTypeRoutes(false);\n    }\n  };\n  useEffect(() => {\n    form.validateFields([\"listCheckpointId\", \"listCoursesId\"]);\n  }, [listCourseWatch, listCheckpointWatch]);\n  const dataFormCollection = [{\n    colwidth: 12,\n    type: TYPE_FIELD.SELECT,\n    name: \"type\",\n    disabled: state,\n    label: t(\"managementCollections.form.type\"),\n    listOptions: TYPE_COLLECTION,\n    onChange: e => handleChangeType(e),\n    rules: [{\n      required: true,\n      message: t(\"managementCollections.validate.notEmpty\", {\n        fieldName: t(\"managementCollections.form.type\")\n      })\n    }]\n  }, {\n    colwidth: 12,\n    type: TYPE_FIELD.INPUT,\n    name: \"title\",\n    label: t(\"managementCollections.form.title\"),\n    rules: [{\n      required: true,\n      message: \"\"\n    }, validate.empty(t(\"managementCollections.validate.notEmpty\", {\n      fieldName: t(\"managementCollections.form.title\")\n    })), {\n      max: 50\n    }],\n    maxLength: 50\n  }, {\n    type: TYPE_FIELD.TEXT_AREA,\n    name: \"description\",\n    label: t(\"managementCollections.form.description\"),\n    rules: [{\n      required: true,\n      message: \"\"\n    }, validate.empty(t(\"managementCollections.validate.notEmpty\", {\n      fieldName: t(\"managementCollections.form.description\")\n    }))]\n  }, {\n    type: TYPE_FIELD.UPLOAD,\n    name: \"images\",\n    label: t(\"managementCourses.form.images\"),\n    setAddedArr,\n    initialFileList: state ? [{\n      uid: state === null || state === void 0 ? void 0 : state.images,\n      url: `${IMAGE_URL}${state === null || state === void 0 ? void 0 : state.images}/original.jpg`\n    }] : [],\n    length: 1,\n    rules: [{\n      required: true,\n      message: \"\"\n    }, validate.emptyImg(t(\"managementCollections.validate.notEmpty\", {\n      fieldName: t(\"managementCourses.form.images\")\n    }))]\n  }, {\n    type: TYPE_FIELD.SELECT_SCROLL_LOADING,\n    mode: \"multiple\",\n    name: \"listCheckpointId\",\n    hideField: isTypeRoutes,\n    fetchData: handleGetCheckPoint,\n    setListDeletedId,\n    listInitialId: state === null || state === void 0 ? void 0 : (_state$checkPoints3 = state.checkPoints) === null || _state$checkPoints3 === void 0 ? void 0 : _state$checkPoints3.map(item => {\n      return item === null || item === void 0 ? void 0 : item.id;\n    }),\n    returnOption: item => ({\n      key: item === null || item === void 0 ? void 0 : item.id,\n      label: item === null || item === void 0 ? void 0 : item.name,\n      value: item === null || item === void 0 ? void 0 : item.id\n    }),\n    listDeletedId,\n    label: t(\"managementCollections.form.checkPoint\"),\n    rules: [{\n      required: !(listCourseWatch !== null && listCourseWatch !== void 0 && listCourseWatch.length),\n      message: t(\"managementCollections.validate.notEmpty\", {\n        fieldName: t(\"managementCollections.form.checkPoint\")\n      })\n    }]\n  }, {\n    type: TYPE_FIELD.SELECT_SCROLL_LOADING,\n    mode: \"multiple\",\n    name: \"listCoursesId\",\n    hideField: isTypeRoutes,\n    fetchData: handleGetCourse,\n    setListDeletedId,\n    listInitialId: state === null || state === void 0 ? void 0 : (_state$courses2 = state.courses) === null || _state$courses2 === void 0 ? void 0 : _state$courses2.map(item => {\n      return item === null || item === void 0 ? void 0 : item.id;\n    }),\n    returnOption: item => ({\n      key: item === null || item === void 0 ? void 0 : item.id,\n      label: item === null || item === void 0 ? void 0 : item.title,\n      value: item === null || item === void 0 ? void 0 : item.id\n    }),\n    listDeletedId,\n    label: t(\"managementCollections.form.listRoutes\"),\n    rules: [{\n      required: !(listCheckpointWatch !== null && listCheckpointWatch !== void 0 && listCheckpointWatch.length),\n      message: t(\"managementCollections.validate.notEmpty\", {\n        fieldName: t(\"managementCollections.form.listRoutes\")\n      })\n    }]\n  }, {\n    type: TYPE_FIELD.INPUT,\n    name: \"link\",\n    hideField: isTypeRoutes,\n    label: t(\"managementCollections.form.link\"),\n    rules: [{\n      required: true,\n      message: t(\"managementCollections.validate.notEmpty\", {\n        fieldName: t(\"managementCollections.form.link\")\n      })\n    }, {\n      max: 200,\n      message: t(\"validate.maxCharacter\", {\n        number: 200\n      })\n    }],\n    maxLength: 200\n  }];\n  const handleEdit = async () => {\n    try {\n      const res = await collectionApi.getDetailCollection(state === null || state === void 0 ? void 0 : state.id);\n      navigate(PATH_URL.MANAGER_COLLECTION.EDIT, {\n        state: res\n      });\n    } catch (error) {\n      message.error(error);\n    }\n  };\n  const handleFinish = async values => {\n    if (!state) {\n      setLoading(true);\n      try {\n        await collectionApi.postCollections(appendFormData({\n          ...values,\n          images: addedArr\n        }));\n        message.success(t(\"managementCollections.noti.createSuccess\"));\n        navigate(PATH_URL.MANAGER_COLLECTION.INDEX);\n      } catch (error) {\n        message.error(t(\"managementCollections.noti.createFail\"));\n      } finally {\n        setLoading(false);\n      }\n    } else {\n      try {\n        var _values$listCoursesId, _values$listCheckpoin;\n        setLoading(true);\n        await collectionApi.editCollection(state === null || state === void 0 ? void 0 : state.id, appendFormData({\n          ...values,\n          images: addedArr || state.images,\n          listCoursesId: values === null || values === void 0 ? void 0 : (_values$listCoursesId = values.listCoursesId) === null || _values$listCoursesId === void 0 ? void 0 : _values$listCoursesId.map(item => {\n            if (item.value) {\n              return item === null || item === void 0 ? void 0 : item.value;\n            }\n            return item;\n          }),\n          listCheckpointId: values === null || values === void 0 ? void 0 : (_values$listCheckpoin = values.listCheckpointId) === null || _values$listCheckpoin === void 0 ? void 0 : _values$listCheckpoin.map(item => {\n            if (item.value) {\n              return item === null || item === void 0 ? void 0 : item.value;\n            }\n            return item;\n          })\n        }) || []);\n        message.success(t(\"managementCollections.noti.editSuccess\"));\n        navigate(PATH_URL.MANAGER_COLLECTION.INDEX);\n      } catch (error) {\n        message.error(t(\"managementCollections.noti.editFail\"));\n      } finally {\n        setLoading(false);\n      }\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"course-form form-default\"\n  }, /*#__PURE__*/React.createElement(Row, {\n    align: \"middle\",\n    className: \"full-width header-table\"\n  }, /*#__PURE__*/React.createElement(\"h1\", null, state ? t(\"managementCollections.titleEdit\") : t(\"managementCollections.titleCreate\"))), /*#__PURE__*/React.createElement(Card, null, /*#__PURE__*/React.createElement(Form, {\n    form: form,\n    colon: false,\n    onFinish: handleFinish,\n    layout: \"vertical\",\n    initialValues: state ? initialValues : {}\n  }, /*#__PURE__*/React.createElement(Row, {\n    gutter: [48, 8]\n  }, renderFieldForm(dataFormCollection)), /*#__PURE__*/React.createElement(Row, {\n    className: \"flex jc-center gap-20 full-width\"\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: \"default\",\n    className: \"fw-600 cancel-btn\",\n    onClick: handleCancel\n  }, \"\\u623B\\u308B\"), /*#__PURE__*/React.createElement(Button, {\n    className: \"fw-600 submit-btn\",\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: loading,\n    disabled: loading\n  }, state ? t(\"managementCourses.form.btnEdit\") : t(\"form.btnCreate\"))))));\n}\n_s(CollectionForm, \"0fUx0d3L1eKSRfg/HtA5wm+bt6E=\", false, function () {\n  return [useTranslation, useLocation, useNavigate, useForm, useWatch, useWatch];\n});\n_c = CollectionForm;\nexport default CollectionForm;\nvar _c;\n$RefreshReg$(_c, \"CollectionForm\");","map":{"version":3,"mappings":"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","names":["React","useEffect","useState","IMAGE_URL","PATH_URL","TYPE_COLLECTION","TYPE_FIELD","appendFormData","renderFieldForm","collectionApi","courseApi","validate","Button","Card","Form","message","Row","useForm","useWatch","useTranslation","useLocation","useNavigate","checkPointApi","CollectionForm","t","state","initialValues","listCheckpointId","checkPoints","map","item","value","id","key","label","name","listCoursesId","courses","title","type","courseCount","length","navigate","form","listCourseWatch","listCheckpointWatch","loading","setLoading","addedArr","setAddedArr","listDeletedId","setListDeletedId","isTypeRoutes","setIsTypeRoutes","handleGetCheckPoint","params","response","getCheckPoints","data","handleGetCourse","getCourses","handleCancel","MANAGER_COLLECTION","INDEX","handleChangeType","validateFields","dataFormCollection","colwidth","SELECT","disabled","listOptions","onChange","e","rules","required","fieldName","INPUT","empty","max","maxLength","TEXT_AREA","UPLOAD","initialFileList","uid","images","url","emptyImg","SELECT_SCROLL_LOADING","mode","hideField","fetchData","listInitialId","returnOption","number","handleEdit","res","getDetailCollection","EDIT","error","handleFinish","values","postCollections","success","editCollection","className","align","colon","onFinish","layout","gutter","onClick","htmlType"],"sources":["/home/huynd/animalwatch_admin/src/pages/manager/collection/CollectionForm.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { IMAGE_URL } from \"@common/config/endpoint\";\nimport PATH_URL from \"@common/config/pathURL\";\nimport TYPE_COLLECTION from \"@common/constant/collection\";\nimport { TYPE_FIELD } from \"@common/constant/form\";\nimport { appendFormData } from \"@common/utils/appendFormData\";\nimport { renderFieldForm } from \"@common/utils/renderFieldForm\";\nimport { collectionApi } from \"@services/apis/collection\";\nimport { courseApi } from \"@services/apis/course\";\nimport { validate } from \"@validate/index\";\nimport { Button, Card, Form, message, Row } from \"antd\";\nimport { useForm, useWatch } from \"antd/es/form/Form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport { checkPointApi } from \"@services/apis/checkpoint\";\n\nfunction CollectionForm() {\n  const { t } = useTranslation();\n  const { state } = useLocation();\n  const initialValues = {\n    ...state,\n    listCheckpointId: state?.checkPoints?.map((item) => {\n      return { value: item?.id, key: item?.id, label: item?.name };\n    }),\n    listCoursesId: state?.courses?.map((item) => {\n      return { value: item?.id, key: item?.id, label: item?.title };\n    }),\n    type:\n      state?.courseCount || state?.checkPoints?.length\n        ? TYPE_COLLECTION[1].value\n        : TYPE_COLLECTION[0].value,\n  };\n  const navigate = useNavigate();\n  const [form] = useForm();\n  const listCourseWatch = useWatch(\"listCoursesId\", form);\n  const listCheckpointWatch = useWatch(\"listCheckpointId\", form);\n\n  const [loading, setLoading] = useState(false);\n  const [addedArr, setAddedArr] = useState([]);\n  const [listDeletedId, setListDeletedId] = useState([]);\n  const [isTypeRoutes, setIsTypeRoutes] = useState(!!initialValues?.type);\n\n  const handleGetCheckPoint = async (params) => {\n    const response = await checkPointApi.getCheckPoints(params);\n    return response.data;\n  };\n\n  const handleGetCourse = async (params) => {\n    const response = await courseApi.getCourses(params);\n    return response.data;\n  };\n\n  const handleCancel = () => {\n    navigate(PATH_URL.MANAGER_COLLECTION.INDEX);\n  };\n\n  const handleChangeType = (type) => {\n    if (type) {\n      setIsTypeRoutes(true);\n    } else {\n      setIsTypeRoutes(false);\n    }\n  };\n\n  useEffect(() => {\n    form.validateFields([\"listCheckpointId\", \"listCoursesId\"]);\n  }, [listCourseWatch, listCheckpointWatch]);\n\n  const dataFormCollection = [\n    {\n      colwidth: 12,\n      type: TYPE_FIELD.SELECT,\n      name: \"type\",\n      disabled: state,\n      label: t(\"managementCollections.form.type\"),\n      listOptions: TYPE_COLLECTION,\n      onChange: (e) => handleChangeType(e),\n      rules: [\n        {\n          required: true,\n          message: t(\"managementCollections.validate.notEmpty\", {\n            fieldName: t(\"managementCollections.form.type\"),\n          }),\n        },\n      ],\n    },\n    {\n      colwidth: 12,\n      type: TYPE_FIELD.INPUT,\n      name: \"title\",\n      label: t(\"managementCollections.form.title\"),\n      rules: [\n        { required: true, message: \"\" },\n        validate.empty(\n          t(\"managementCollections.validate.notEmpty\", {\n            fieldName: t(\"managementCollections.form.title\"),\n          }),\n        ),\n        {\n          max: 50,\n        },\n      ],\n      maxLength: 50,\n    },\n    {\n      type: TYPE_FIELD.TEXT_AREA,\n      name: \"description\",\n      label: t(\"managementCollections.form.description\"),\n      rules: [\n        { required: true, message: \"\" },\n        validate.empty(\n          t(\"managementCollections.validate.notEmpty\", {\n            fieldName: t(\"managementCollections.form.description\"),\n          }),\n        ),\n      ],\n    },\n    {\n      type: TYPE_FIELD.UPLOAD,\n      name: \"images\",\n      label: t(\"managementCourses.form.images\"),\n      setAddedArr,\n      initialFileList: state\n        ? [\n            {\n              uid: state?.images,\n              url: `${IMAGE_URL}${state?.images}/original.jpg`,\n            },\n          ]\n        : [],\n      length: 1,\n      rules: [\n        {\n          required: true,\n          message: \"\",\n        },\n        validate.emptyImg(\n          t(\"managementCollections.validate.notEmpty\", {\n            fieldName: t(\"managementCourses.form.images\"),\n          }),\n        ),\n      ],\n    },\n    {\n      type: TYPE_FIELD.SELECT_SCROLL_LOADING,\n      mode: \"multiple\",\n      name: \"listCheckpointId\",\n      hideField: isTypeRoutes,\n      fetchData: handleGetCheckPoint,\n      setListDeletedId,\n      listInitialId: state?.checkPoints?.map((item) => {\n        return item?.id;\n      }),\n      returnOption: (item) => ({\n        key: item?.id,\n        label: item?.name,\n        value: item?.id,\n      }),\n      listDeletedId,\n      label: t(\"managementCollections.form.checkPoint\"),\n      rules: [\n        {\n          required: !listCourseWatch?.length,\n          message: t(\"managementCollections.validate.notEmpty\", {\n            fieldName: t(\"managementCollections.form.checkPoint\"),\n          }),\n        },\n      ],\n    },\n    {\n      type: TYPE_FIELD.SELECT_SCROLL_LOADING,\n      mode: \"multiple\",\n      name: \"listCoursesId\",\n      hideField: isTypeRoutes,\n      fetchData: handleGetCourse,\n      setListDeletedId,\n      listInitialId: state?.courses?.map((item) => {\n        return item?.id;\n      }),\n      returnOption: (item) => ({\n        key: item?.id,\n        label: item?.title,\n        value: item?.id,\n      }),\n      listDeletedId,\n      label: t(\"managementCollections.form.listRoutes\"),\n      rules: [\n        {\n          required: !listCheckpointWatch?.length,\n          message: t(\"managementCollections.validate.notEmpty\", {\n            fieldName: t(\"managementCollections.form.listRoutes\"),\n          }),\n        },\n      ],\n    },\n    {\n      type: TYPE_FIELD.INPUT,\n      name: \"link\",\n      hideField: isTypeRoutes,\n      label: t(\"managementCollections.form.link\"),\n      rules: [\n        {\n          required: true,\n          message: t(\"managementCollections.validate.notEmpty\", {\n            fieldName: t(\"managementCollections.form.link\"),\n          }),\n        },\n        {\n          max: 200,\n          message: t(\"validate.maxCharacter\", { number: 200 }),\n        },\n      ],\n      maxLength: 200,\n    },\n  ];\n\n  const handleEdit = async () => {\n    try {\n      const res = await collectionApi.getDetailCollection(state?.id);\n      navigate(PATH_URL.MANAGER_COLLECTION.EDIT, { state: res });\n    } catch (error) {\n      message.error(error);\n    }\n  };\n\n  const handleFinish = async (values) => {\n    if (!state) {\n      setLoading(true);\n      try {\n        await collectionApi.postCollections(\n          appendFormData({\n            ...values,\n            images: addedArr,\n          }),\n        );\n        message.success(t(\"managementCollections.noti.createSuccess\"));\n        navigate(PATH_URL.MANAGER_COLLECTION.INDEX);\n      } catch (error) {\n        message.error(t(\"managementCollections.noti.createFail\"));\n      } finally {\n        setLoading(false);\n      }\n    } else {\n      try {\n        setLoading(true);\n        await collectionApi.editCollection(\n          state?.id,\n          appendFormData({\n            ...values,\n            images: addedArr || state.images,\n            listCoursesId: values?.listCoursesId?.map((item) => {\n              if (item.value) {\n                return item?.value;\n              }\n              return item;\n            }),\n            listCheckpointId: values?.listCheckpointId?.map((item) => {\n              if (item.value) {\n                return item?.value;\n              }\n              return item;\n            }),\n          }) || [],\n        );\n        message.success(t(\"managementCollections.noti.editSuccess\"));\n        navigate(PATH_URL.MANAGER_COLLECTION.INDEX);\n      } catch (error) {\n        message.error(t(\"managementCollections.noti.editFail\"));\n      } finally {\n        setLoading(false);\n      }\n    }\n  };\n\n  return (\n    <div className=\"course-form form-default\">\n      <Row align=\"middle\" className=\"full-width header-table\">\n        <h1>\n          {state\n            ? t(\"managementCollections.titleEdit\")\n            : t(\"managementCollections.titleCreate\")}\n        </h1>\n      </Row>\n\n      <Card>\n        <Form\n          form={form}\n          colon={false}\n          onFinish={handleFinish}\n          layout=\"vertical\"\n          initialValues={state ? initialValues : {}}\n        >\n          <Row gutter={[48, 8]}>{renderFieldForm(dataFormCollection)}</Row>\n          <Row className=\"flex jc-center gap-20 full-width\">\n            <Button\n              type=\"default\"\n              className=\"fw-600 cancel-btn\"\n              onClick={handleCancel}\n            >\n              戻る\n            </Button>\n            <Button\n              className=\"fw-600 submit-btn\"\n              type=\"primary\"\n              htmlType=\"submit\"\n              loading={loading}\n              disabled={loading}\n            >\n              {state\n                ? t(\"managementCourses.form.btnEdit\")\n                : t(\"form.btnCreate\")}\n            </Button>\n          </Row>\n        </Form>\n      </Card>\n    </div>\n  );\n}\n\nexport default CollectionForm;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}