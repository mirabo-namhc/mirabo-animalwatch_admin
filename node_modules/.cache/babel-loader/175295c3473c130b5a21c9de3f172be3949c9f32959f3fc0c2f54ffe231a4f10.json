{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { Button, Card, Form, message, Row } from \"antd\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport { useForm, useWatch } from \"antd/es/form/Form\";\nimport { renderFieldForm } from \"@common/utils/renderFieldForm\";\nimport { TYPE_FIELD } from \"@common/constant/form\";\nimport { numberPreventInput } from \"@validate/validate\";\nimport { validate } from \"@validate/index\";\nimport { TYPE_BADGE, UNIT_BADGE } from \"@common/constant/masterData\";\nimport { appendFormData } from \"@common/utils/appendFormData\";\nimport { badgeApi } from \"@services/apis/badge\";\nimport { IMAGE_URL } from \"@common/config/endpoint\";\nfunction BadgeForm() {\n  _s();\n  var _state$achievement;\n  const {\n    t\n  } = useTranslation();\n  const {\n    state\n  } = useLocation();\n  const [form] = useForm();\n  const [addedArr, setAddedArr] = useState([]);\n  const [deletedArr, setDeletedArr] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [isTypeBadge, setIsTypeBadge] = useState(false);\n  const typeWatched = useWatch(\"type\", form);\n  const navigate = useNavigate();\n  const initialValues = {\n    ...state,\n    achievement: state === null || state === void 0 ? void 0 : (_state$achievement = state.achievement) === null || _state$achievement === void 0 ? void 0 : _state$achievement.toString(),\n    type: state === null || state === void 0 ? void 0 : state.type.toString(),\n    imageBadge: [state === null || state === void 0 ? void 0 : state.image]\n  };\n  const handleEdit = payload => {\n    badgeApi.putBadge(state === null || state === void 0 ? void 0 : state.id, payload).then(() => {\n      message.success(t(\"badge.message.editSuccess\"));\n      navigate(\"..\");\n    }).catch(() => message.error(t(\"badge.message.editErr\"))).finally(() => setLoading(false));\n  };\n  const handleCreate = payload => {\n    badgeApi.postBadge(payload).then(() => {\n      message.success(t(\"badge.message.createSuccess\"));\n      navigate(\"..\");\n    }).catch(() => message.error(t(\"badge.message.createErr\"))).finally(() => setLoading(false));\n  };\n  const handleFinish = values => {\n    if (state) delete values.unit;\n    setLoading(true);\n    if (state) {\n      let payload;\n      if (addedArr.length > 0) {\n        payload = appendFormData({\n          ...values,\n          imageBadge: addedArr || [state.image]\n        });\n      } else {\n        delete values.image;\n        delete values.imageBadge;\n        payload = appendFormData({\n          ...values\n        });\n      }\n      handleEdit(payload);\n    } else {\n      const payload = appendFormData({\n        ...values,\n        imageBadge: addedArr\n      });\n      handleCreate(payload);\n    }\n  };\n  const handleChangeType = type => {\n    if (type === TYPE_BADGE[2].value) {\n      setIsTypeBadge(true);\n    } else {\n      setIsTypeBadge(false);\n    }\n  };\n  const getStringType = (objects, type) => {\n    var _objs$;\n    const objs = objects.filter(obj => typeof obj === \"object\" && obj.value === type);\n    return (_objs$ = objs[0]) === null || _objs$ === void 0 ? void 0 : _objs$.label;\n  };\n  useEffect(() => {\n    form.setFieldValue(\"unit\", getStringType(UNIT_BADGE, typeWatched));\n  }, [typeWatched]);\n  useEffect(() => {\n    if (initialValues.type === TYPE_BADGE[2].value) {\n      setIsTypeBadge(true);\n    }\n  }, [initialValues]);\n  const badgeField = [{\n    type: TYPE_FIELD.SELECT,\n    name: \"type\",\n    label: t(\"badge.form.type\"),\n    listOptions: TYPE_BADGE,\n    onChange: e => handleChangeType(e),\n    rules: [{\n      required: true,\n      message: \"\"\n    }, validate.emptyImg(t(\"badge.validate.notEmpty\", {\n      fieldName: t(\"badge.form.type\")\n    }))]\n  }, {\n    type: TYPE_FIELD.INPUT,\n    name: \"title\",\n    label: t(\"badge.form.title\"),\n    rules: [{\n      required: true,\n      message: \"\"\n    }, validate.emptyImg(t(\"badge.validate.notEmpty\", {\n      fieldName: t(\"badge.form.title\")\n    })), {\n      max: 200,\n      message: t(\"validate.maxCharacter\", {\n        number: 50\n      })\n    }],\n    maxLength: 200\n  }, {\n    type: TYPE_FIELD.TEXT_AREA,\n    name: \"description\",\n    label: t(\"badge.form.description\"),\n    rules: [{\n      required: true,\n      message: \"\"\n    }, validate.emptyImg(t(\"badge.validate.notEmpty\", {\n      fieldName: t(\"badge.form.description\")\n    }))]\n  }, {\n    type: TYPE_FIELD.INPUT,\n    name: \"achievement\",\n    hideField: isTypeBadge,\n    label: t(\"badge.form.parameter\"),\n    onChange: e => numberPreventInput(e.target.value, form, \"achievement\"),\n    rules: [{\n      required: true,\n      message: \"\"\n    }, validate.emptyImg(t(\"badge.validate.notEmpty\", {\n      fieldName: t(\"badge.form.parameter\")\n    }))]\n  }, {\n    type: TYPE_FIELD.INPUT,\n    name: \"unit\",\n    hideField: isTypeBadge,\n    label: t(\"badge.form.unit\"),\n    readOnly: true\n  }, {\n    type: TYPE_FIELD.UPLOAD,\n    name: \"imageBadge\",\n    label: t(\"badge.form.image\"),\n    initialFileList: state ? [{\n      uid: state === null || state === void 0 ? void 0 : state.image,\n      url: `${IMAGE_URL}${state === null || state === void 0 ? void 0 : state.image}/original.jpg`\n    }] : [],\n    deletedArr,\n    setAddedArr,\n    setDeletedArr,\n    length: 1,\n    rules: [{\n      required: true,\n      message: \"\"\n    }, validate.emptyImg(t(\"managementCourses.validate.notEmpty\", {\n      fieldName: t(\"managementCourses.form.images\")\n    }))]\n  }];\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"course-form form-default\"\n  }, /*#__PURE__*/React.createElement(Row, {\n    align: \"middle\",\n    className: \"full-width header-table\"\n  }, /*#__PURE__*/React.createElement(\"h1\", null, t(\"badge.titleBadge\"))), /*#__PURE__*/React.createElement(Card, null, /*#__PURE__*/React.createElement(Form, {\n    form: form,\n    colon: false,\n    onFinish: handleFinish,\n    layout: \"vertical\",\n    initialValues: state ? initialValues : {}\n  }, /*#__PURE__*/React.createElement(Row, {\n    gutter: [48, 8]\n  }, renderFieldForm(badgeField)), /*#__PURE__*/React.createElement(Row, {\n    className: \"flex jc-center gap-20 full-width\"\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: \"default\",\n    className: \"fw-600 cancel-btn\",\n    onClick: () => navigate(\"..\")\n  }, t(\"form.btnBack\")), /*#__PURE__*/React.createElement(Button, {\n    className: \"fw-600 submit-btn\",\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: loading,\n    disabled: loading\n  }, state ? t(\"badge.form.btnSave\") : t(\"badge.form.btnSubmit\"))))));\n}\n_s(BadgeForm, \"zG0DKJgAQKPQNAURT/4m7lFH7Dk=\", false, function () {\n  return [useTranslation, useLocation, useForm, useWatch, useNavigate];\n});\n_c = BadgeForm;\nBadgeForm.propTypes = {};\nexport default BadgeForm;\nvar _c;\n$RefreshReg$(_c, \"BadgeForm\");","map":{"version":3,"mappings":"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","names":["React","useEffect","useState","Button","Card","Form","message","Row","useLocation","useNavigate","useTranslation","useForm","useWatch","renderFieldForm","TYPE_FIELD","numberPreventInput","validate","TYPE_BADGE","UNIT_BADGE","appendFormData","badgeApi","IMAGE_URL","BadgeForm","t","state","form","addedArr","setAddedArr","deletedArr","setDeletedArr","loading","setLoading","isTypeBadge","setIsTypeBadge","typeWatched","navigate","initialValues","achievement","toString","type","imageBadge","image","handleEdit","payload","putBadge","id","then","success","catch","error","finally","handleCreate","postBadge","handleFinish","values","unit","length","handleChangeType","value","getStringType","objects","objs","filter","obj","label","setFieldValue","badgeField","SELECT","name","listOptions","onChange","e","rules","required","emptyImg","fieldName","INPUT","max","number","maxLength","TEXT_AREA","hideField","target","readOnly","UPLOAD","initialFileList","uid","url","className","align","colon","onFinish","layout","gutter","onClick","htmlType","disabled","propTypes"],"sources":["/home/huynd/animalwatch_admin/src/pages/manager/badge/BadgeForm.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Button, Card, Form, message, Row } from \"antd\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport { useForm, useWatch } from \"antd/es/form/Form\";\nimport { renderFieldForm } from \"@common/utils/renderFieldForm\";\nimport { TYPE_FIELD } from \"@common/constant/form\";\nimport { numberPreventInput } from \"@validate/validate\";\nimport { validate } from \"@validate/index\";\nimport { TYPE_BADGE, UNIT_BADGE } from \"@common/constant/masterData\";\nimport { appendFormData } from \"@common/utils/appendFormData\";\nimport { badgeApi } from \"@services/apis/badge\";\nimport { IMAGE_URL } from \"@common/config/endpoint\";\n\nfunction BadgeForm() {\n  const { t } = useTranslation();\n  const { state } = useLocation();\n\n  const [form] = useForm();\n  const [addedArr, setAddedArr] = useState([]);\n  const [deletedArr, setDeletedArr] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [isTypeBadge, setIsTypeBadge] = useState(false);\n  const typeWatched = useWatch(\"type\", form);\n\n  const navigate = useNavigate();\n  const initialValues = {\n    ...state,\n    achievement: state?.achievement?.toString(),\n    type: state?.type.toString(),\n    imageBadge: [state?.image],\n  };\n\n  const handleEdit = (payload) => {\n    badgeApi\n      .putBadge(state?.id, payload)\n      .then(() => {\n        message.success(t(\"badge.message.editSuccess\"));\n        navigate(\"..\");\n      })\n      .catch(() => message.error(t(\"badge.message.editErr\")))\n      .finally(() => setLoading(false));\n  };\n\n  const handleCreate = (payload) => {\n    badgeApi\n      .postBadge(payload)\n      .then(() => {\n        message.success(t(\"badge.message.createSuccess\"));\n        navigate(\"..\");\n      })\n      .catch(() => message.error(t(\"badge.message.createErr\")))\n      .finally(() => setLoading(false));\n  };\n\n  const handleFinish = (values) => {\n    if (state) delete values.unit;\n    setLoading(true);\n    if (state) {\n      let payload;\n      if (addedArr.length > 0) {\n        payload = appendFormData({\n          ...values,\n          imageBadge: addedArr || [state.image],\n        });\n      } else {\n        delete values.image;\n        delete values.imageBadge;\n        payload = appendFormData({\n          ...values,\n        });\n      }\n      handleEdit(payload);\n    } else {\n      const payload = appendFormData({\n        ...values,\n        imageBadge: addedArr,\n      });\n      handleCreate(payload);\n    }\n  };\n\n  const handleChangeType = (type) => {\n    if (type === TYPE_BADGE[2].value) {\n      setIsTypeBadge(true);\n    } else {\n      setIsTypeBadge(false);\n    }\n  };\n\n  const getStringType = (objects, type) => {\n    const objs = objects.filter(\n      (obj) => typeof obj === \"object\" && obj.value === type,\n    );\n    return objs[0]?.label;\n  };\n\n  useEffect(() => {\n    form.setFieldValue(\"unit\", getStringType(UNIT_BADGE, typeWatched));\n  }, [typeWatched]);\n\n  useEffect(() => {\n    if (initialValues.type === TYPE_BADGE[2].value) {\n      setIsTypeBadge(true);\n    }\n  }, [initialValues]);\n\n  const badgeField = [\n    {\n      type: TYPE_FIELD.SELECT,\n      name: \"type\",\n      label: t(\"badge.form.type\"),\n      listOptions: TYPE_BADGE,\n      onChange: (e) => handleChangeType(e),\n      rules: [\n        {\n          required: true,\n          message: \"\",\n        },\n        validate.emptyImg(\n          t(\"badge.validate.notEmpty\", {\n            fieldName: t(\"badge.form.type\"),\n          }),\n        ),\n      ],\n    },\n    {\n      type: TYPE_FIELD.INPUT,\n      name: \"title\",\n      label: t(\"badge.form.title\"),\n      rules: [\n        {\n          required: true,\n          message: \"\",\n        },\n        validate.emptyImg(\n          t(\"badge.validate.notEmpty\", {\n            fieldName: t(\"badge.form.title\"),\n          }),\n        ),\n        {\n          max: 200,\n          message: t(\"validate.maxCharacter\", { number: 50 }),\n        },\n      ],\n      maxLength: 200,\n    },\n    {\n      type: TYPE_FIELD.TEXT_AREA,\n      name: \"description\",\n      label: t(\"badge.form.description\"),\n      rules: [\n        {\n          required: true,\n          message: \"\",\n        },\n        validate.emptyImg(\n          t(\"badge.validate.notEmpty\", {\n            fieldName: t(\"badge.form.description\"),\n          }),\n        ),\n      ],\n    },\n    {\n      type: TYPE_FIELD.INPUT,\n      name: \"achievement\",\n      hideField: isTypeBadge,\n      label: t(\"badge.form.parameter\"),\n      onChange: (e) => numberPreventInput(e.target.value, form, \"achievement\"),\n      rules: [\n        {\n          required: true,\n          message: \"\",\n        },\n        validate.emptyImg(\n          t(\"badge.validate.notEmpty\", {\n            fieldName: t(\"badge.form.parameter\"),\n          }),\n        ),\n      ],\n    },\n    {\n      type: TYPE_FIELD.INPUT,\n      name: \"unit\",\n      hideField: isTypeBadge,\n      label: t(\"badge.form.unit\"),\n      readOnly: true,\n    },\n    {\n      type: TYPE_FIELD.UPLOAD,\n      name: \"imageBadge\",\n      label: t(\"badge.form.image\"),\n      initialFileList: state\n        ? [\n            {\n              uid: state?.image,\n              url: `${IMAGE_URL}${state?.image}/original.jpg`,\n            },\n          ]\n        : [],\n      deletedArr,\n      setAddedArr,\n      setDeletedArr,\n      length: 1,\n      rules: [\n        {\n          required: true,\n          message: \"\",\n        },\n        validate.emptyImg(\n          t(\"managementCourses.validate.notEmpty\", {\n            fieldName: t(\"managementCourses.form.images\"),\n          }),\n        ),\n      ],\n    },\n  ];\n\n  return (\n    <div className=\"course-form form-default\">\n      <Row align=\"middle\" className=\"full-width header-table\">\n        <h1>{t(\"badge.titleBadge\")}</h1>\n      </Row>\n\n      <Card>\n        <Form\n          form={form}\n          colon={false}\n          onFinish={handleFinish}\n          layout=\"vertical\"\n          initialValues={state ? initialValues : {}}\n        >\n          <Row gutter={[48, 8]}>{renderFieldForm(badgeField)}</Row>\n          <Row className=\"flex jc-center gap-20 full-width\">\n            <Button\n              type=\"default\"\n              className=\"fw-600 cancel-btn\"\n              onClick={() => navigate(\"..\")}\n            >\n              {t(\"form.btnBack\")}\n            </Button>\n            <Button\n              className=\"fw-600 submit-btn\"\n              type=\"primary\"\n              htmlType=\"submit\"\n              loading={loading}\n              disabled={loading}\n            >\n              {state ? t(\"badge.form.btnSave\") : t(\"badge.form.btnSubmit\")}\n            </Button>\n          </Row>\n        </Form>\n      </Card>\n    </div>\n  );\n}\n\nBadgeForm.propTypes = {};\n\nexport default BadgeForm;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}