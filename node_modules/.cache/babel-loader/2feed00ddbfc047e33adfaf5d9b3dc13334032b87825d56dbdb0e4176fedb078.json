{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { Button, Card, Form, message, Row } from \"antd\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport { t } from \"i18next\";\nimport { TYPE_FIELD } from \"@common/constant/form\";\nimport { renderFieldForm } from \"@common/utils/renderFieldForm\";\nimport { appendFormData } from \"@common/utils/appendFormData\";\nimport { authApi } from \"@services/apis/auth\";\nimport { IMAGE_URL } from \"@common/config/endpoint\";\nimport { validate } from \"@validate/index\";\nfunction AccountForm() {\n  _s();\n  const navigate = useNavigate();\n  const {\n    state\n  } = useLocation();\n  const [addedArr, setAddedArr] = useState([]);\n  const handleFinish = values => {\n    const payload = {\n      ...values,\n      avatar: addedArr\n    };\n    if (!(addedArr !== null && addedArr !== void 0 && addedArr.length)) delete payload.avatar;\n    const formData = addedArr.length ? appendFormData(payload) : payload;\n    authApi.editProfile(formData).then(() => {\n      navigate(\"..\");\n      message.success(\"Update success\");\n    }).catch(() => {\n      message.error(\"Update fail\");\n    });\n  };\n  const fieldsEventForm = [{\n    type: TYPE_FIELD.UPLOAD,\n    name: \"avatar\",\n    label: t(\"account.images\"),\n    length: 1,\n    initialFileList: [{\n      uid: \"\",\n      url: `${IMAGE_URL}${state === null || state === void 0 ? void 0 : state.avatar}/original.jpg`\n    }],\n    setAddedArr,\n    rules: [{\n      required: true,\n      message: \"\"\n    }, validate.emptyImg(t(\"validate.notEmpty\", {\n      fieldName: t(\"account.images\")\n    }))]\n  }, {\n    type: TYPE_FIELD.INPUT,\n    name: \"fullname\",\n    label: t(\"account.fullName\")\n  }, {\n    type: TYPE_FIELD.INPUT,\n    name: \"description\",\n    label: t(\"account.description\")\n  }, {\n    type: TYPE_FIELD.INPUT,\n    name: \"address\",\n    label: t(\"account.address\")\n  }];\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-default checkpoint-form\"\n  }, /*#__PURE__*/React.createElement(Row, {\n    align: \"middle\",\n    className: \"full-width header-table\"\n  }, /*#__PURE__*/React.createElement(\"h1\", null, t(\"account.updateAccount\"))), /*#__PURE__*/React.createElement(Card, null, /*#__PURE__*/React.createElement(Form, {\n    layout: \"vertical\",\n    colon: false,\n    initialValues: state,\n    onFinish: handleFinish\n  }, renderFieldForm(fieldsEventForm), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex jc-center gap-20\"\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: \"primary\",\n    htmlType: \"submit\"\n  }, t(\"managementUser.form.btnCreate\")), /*#__PURE__*/React.createElement(Button, {\n    type: \"default\",\n    onClick: () => navigate(\"..\")\n  }, t(\"managementUser.form.btnBack\"))))));\n}\n_s(AccountForm, \"aAH3MPTn9ABTLXouzESTzMZKe48=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = AccountForm;\nAccountForm.propTypes = {};\nexport default AccountForm;\nvar _c;\n$RefreshReg$(_c, \"AccountForm\");","map":{"version":3,"mappings":"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","names":["React","useState","Button","Card","Form","message","Row","useLocation","useNavigate","t","TYPE_FIELD","renderFieldForm","appendFormData","authApi","IMAGE_URL","validate","AccountForm","navigate","state","addedArr","setAddedArr","handleFinish","values","payload","avatar","length","formData","editProfile","then","success","catch","error","fieldsEventForm","type","UPLOAD","name","label","initialFileList","uid","url","rules","required","emptyImg","fieldName","INPUT","className","align","layout","colon","initialValues","onFinish","htmlType","onClick","propTypes"],"sources":["/home/huynd/animalwatch_admin/src/pages/manager/account/AccountForm.jsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { Button, Card, Form, message, Row } from \"antd\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport { t } from \"i18next\";\n\nimport { TYPE_FIELD } from \"@common/constant/form\";\nimport { renderFieldForm } from \"@common/utils/renderFieldForm\";\nimport { appendFormData } from \"@common/utils/appendFormData\";\nimport { authApi } from \"@services/apis/auth\";\nimport { IMAGE_URL } from \"@common/config/endpoint\";\nimport { validate } from \"@validate/index\";\n\nfunction AccountForm() {\n  const navigate = useNavigate();\n  const { state } = useLocation();\n  const [addedArr, setAddedArr] = useState([]);\n  const handleFinish = (values) => {\n    const payload = {\n      ...values,\n      avatar: addedArr,\n    };\n    if (!addedArr?.length) delete payload.avatar;\n    const formData = addedArr.length ? appendFormData(payload) : payload;\n\n    authApi\n      .editProfile(formData)\n      .then(() => {\n        navigate(\"..\");\n        message.success(\"Update success\");\n      })\n      .catch(() => {\n        message.error(\"Update fail\");\n      });\n  };\n\n  const fieldsEventForm = [\n    {\n      type: TYPE_FIELD.UPLOAD,\n      name: \"avatar\",\n      label: t(\"account.images\"),\n      length: 1,\n      initialFileList: [\n        { uid: \"\", url: `${IMAGE_URL}${state?.avatar}/original.jpg` },\n      ],\n      setAddedArr,\n      rules: [\n        {\n          required: true,\n          message: \"\",\n        },\n        validate.emptyImg(\n          t(\"validate.notEmpty\", {\n            fieldName: t(\"account.images\"),\n          }),\n        ),\n      ],\n    },\n    {\n      type: TYPE_FIELD.INPUT,\n      name: \"fullname\",\n      label: t(\"account.fullName\"),\n    },\n    {\n      type: TYPE_FIELD.INPUT,\n      name: \"description\",\n      label: t(\"account.description\"),\n    },\n    {\n      type: TYPE_FIELD.INPUT,\n      name: \"address\",\n      label: t(\"account.address\"),\n    },\n  ];\n\n  return (\n    <div className=\"form-default checkpoint-form\">\n      <Row align=\"middle\" className=\"full-width header-table\">\n        <h1>{t(\"account.updateAccount\")}</h1>\n      </Row>\n      <Card>\n        <Form\n          layout=\"vertical\"\n          colon={false}\n          initialValues={state}\n          onFinish={handleFinish}\n        >\n          {renderFieldForm(fieldsEventForm)}\n\n          <div className=\"flex jc-center gap-20\">\n            <Button type=\"primary\" htmlType=\"submit\">\n              {t(\"managementUser.form.btnCreate\")}\n            </Button>\n            <Button type=\"default\" onClick={() => navigate(\"..\")}>\n              {t(\"managementUser.form.btnBack\")}\n            </Button>\n          </div>\n        </Form>\n      </Card>\n    </div>\n  );\n}\n\nAccountForm.propTypes = {};\n\nexport default AccountForm;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}