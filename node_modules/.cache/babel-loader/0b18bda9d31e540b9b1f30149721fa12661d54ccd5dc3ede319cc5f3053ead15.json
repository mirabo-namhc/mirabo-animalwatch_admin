{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useRef, useState } from \"react\";\nimport { Button, MessageList, Input } from \"react-chat-elements\";\nimport { CloseCircleFilled, FileJpgOutlined, SendOutlined } from \"@ant-design/icons\";\nimport ReactLinkify from \"react-linkify\";\nimport ROLE_USER from \"@common/constant/userRole\";\nimport { notificationApi } from \"@services/apis/notification\";\nimport { authStore } from \"@store/slices/authSlice\";\nimport { Col, Empty, Row, message, Upload, Image } from \"antd\";\nimport PropTypes from \"prop-types\";\nimport { useTranslation } from \"react-i18next\";\nimport { useSelector } from \"react-redux\";\nimport { useParams } from \"react-router-dom\";\nimport { appendFormData } from \"@common/utils/appendFormData\";\nimport { IMAGE_URL } from \"@common/config/endpoint\";\nimport ChatListData from \"./ChatListData\";\nimport PreviewImage from \"./components/PreviewImage\";\nfunction NotiDetailData(props) {\n  _s();\n  const inputRef = useRef(\"\");\n  const btnFileRef = useRef();\n  const {\n    listChat\n  } = props;\n  const {\n    t\n  } = useTranslation();\n  const {\n    data\n  } = useSelector(authStore);\n  const params = useParams();\n  const [listRep, setListRep] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [hasMore, setHasMore] = useState(true);\n  const [contentMess, setContentMess] = useState(\"\");\n  const [page, setPage] = useState(1);\n  const [repActive, setRepActive] = useState(1);\n  const [newMess, setNewMess] = useState({});\n  const [filesList, setImage] = useState([]);\n  const [urlChat, setUrlChat] = useState();\n  const [isOpen, setIsOpen] = useState(false);\n  const LIMIT_PAGE = 20;\n  const DISABLE = true;\n  const MAX_LENGTH = 200;\n  const MIN_HEIGHT = 42;\n  const scrollToBottom = className => {\n    const allMatchedElements = document.getElementsByClassName(className);\n    const element = allMatchedElements[0];\n    element.scrollTop = element.scrollHeight;\n  };\n  const converListRep = dataListRep => {\n    const result = dataListRep === null || dataListRep === void 0 ? void 0 : dataListRep.map(mess => {\n      var _mess$images;\n      return {\n        position: mess.type === ROLE_USER.ADMIN ? \"right\" : \"left\",\n        type: !(mess !== null && mess !== void 0 && (_mess$images = mess.images) !== null && _mess$images !== void 0 && _mess$images.length) ? \"text\" : \"photo\",\n        title: mess.type === ROLE_USER.ADMIN ? data === null || data === void 0 ? void 0 : data.fullname : mess.user.fullname,\n        text: /*#__PURE__*/React.createElement(ReactLinkify, null, mess.content),\n        date: mess.createdAt,\n        data: {\n          uri: (mess === null || mess === void 0 ? void 0 : mess.images) && `${IMAGE_URL}${mess === null || mess === void 0 ? void 0 : mess.images[0]}/original.jpg`\n        }\n      };\n    });\n    return result;\n  };\n  const getListRep = async (item, paging) => {\n    const payload = {\n      ...paging,\n      notificationId: params.id,\n      userId: item.id\n    };\n    const res = await notificationApi.getNotificationRep(payload);\n    const result = converListRep(res.data);\n    setListRep(result.reverse());\n    if (paging.page === 1) {\n      scrollToBottom(\"rce-mlist\");\n    }\n    return result;\n  };\n  const handleLoadMore = async () => {\n    if (!hasMore) return; // Không còn dữ liệu để tải\n    setLoading(true);\n    try {\n      const newListRep = await getListRep(repActive, {\n        page,\n        limit: LIMIT_PAGE\n      });\n      setLoading(false);\n      setPage(page + 1);\n      setListRep(newListRep.concat(listRep));\n      setHasMore(newListRep.length > 0);\n    } catch (error) {\n      message.error(error);\n    }\n  };\n  const handleScroll = e => {\n    const {\n      scrollTop,\n      clientHeight,\n      scrollHeight\n    } = e.target;\n    if (scrollTop === 0) {\n      handleLoadMore();\n    }\n  };\n  const openChatRep = item => {\n    setRepActive(item);\n    getListRep(item, {\n      page: 1,\n      limit: LIMIT_PAGE\n    });\n    setHasMore(true);\n    setPage(2);\n  };\n  const sendNewMess = async () => {\n    const payload = {\n      notificationId: parseInt(params.id, 10),\n      content: contentMess,\n      receiverId: repActive.id,\n      imagesNoti: filesList\n    };\n    if (!contentMess) delete payload.content;\n    const formatPayload = appendFormData(payload);\n    const result = await notificationApi.sendNewReply(formatPayload);\n    setContentMess(\"\");\n    scrollToBottom(\"rce-mlist\");\n    return result;\n  };\n  const onClear = () => {\n    setContentMess(\"\");\n    setImage([]);\n    inputRef.current.value = \"\";\n  };\n  const onSubmit = () => {\n    var _filesList$;\n    // get value from enter input\n    if (!contentMess.trim() && !filesList.length) return;\n    const messObj = {\n      id: repActive.id,\n      position: \"right\",\n      type: filesList !== null && filesList !== void 0 && filesList.length ? \"photo\" : \"text\",\n      title: data === null || data === void 0 ? void 0 : data.fullname,\n      text: /*#__PURE__*/React.createElement(ReactLinkify, null, contentMess),\n      date: new Date(),\n      data: {\n        uri: (filesList === null || filesList === void 0 ? void 0 : filesList.length) && URL.createObjectURL((_filesList$ = filesList[0]) === null || _filesList$ === void 0 ? void 0 : _filesList$.originFileObj)\n      }\n    };\n    if (!(filesList !== null && filesList !== void 0 && filesList.length)) delete messObj.data;\n    setNewMess(messObj);\n    setListRep([...listRep, messObj]);\n    sendNewMess();\n    onClear();\n  };\n  const onChangeMessage = event => {\n    // because maxlength in Input not working\n    event.target.value = event.target.value.slice(0, MAX_LENGTH);\n    setContentMess(event.target.value);\n  };\n  const handleSend = () => {\n    onSubmit();\n  };\n  const handleChangeImage = _ref => {\n    let {\n      fileList\n    } = _ref;\n    setImage(fileList);\n    inputRef.current.focus();\n  };\n  const handlePaste = e => {\n    var _clipboardData$files;\n    const clipboardData = e.clipboardData || window.clipboardData;\n    if (!(clipboardData !== null && clipboardData !== void 0 && (_clipboardData$files = clipboardData.files) !== null && _clipboardData$files !== void 0 && _clipboardData$files.length)) return;\n    setImage([{\n      originFileObj: clipboardData === null || clipboardData === void 0 ? void 0 : clipboardData.files[0]\n    }]);\n  };\n  const renderImage = (_, img) => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"position-relative img-contain thumb\"\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"icon-close cursor-pointer\",\n      onClick: () => setImage([])\n    }, /*#__PURE__*/React.createElement(CloseCircleFilled, null)), /*#__PURE__*/React.createElement(Image, {\n      className: \"image\",\n      src: (img === null || img === void 0 ? void 0 : img.url) || URL.createObjectURL(img === null || img === void 0 ? void 0 : img.originFileObj),\n      alt: img === null || img === void 0 ? void 0 : img.name,\n      preview: true\n    }));\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chat-gr\"\n  }, /*#__PURE__*/React.createElement(Row, {\n    className: \"full-width\"\n  }, /*#__PURE__*/React.createElement(Col, {\n    className: \"chat-list-gr\",\n    md: 8\n  }, listChat ? /*#__PURE__*/React.createElement(ChatListData, {\n    openChatRep: openChatRep,\n    listChat: listChat,\n    newMess: newMess\n  }) : /*#__PURE__*/React.createElement(Empty, null)), /*#__PURE__*/React.createElement(Col, {\n    className: \"mess-gr\",\n    md: 16\n  }, listRep.length > 0 ? /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(MessageList, {\n    className: \"message-list\",\n    lockable: true,\n    toBottomHeight: \"100%\",\n    dataSource: listRep,\n    onScroll: handleScroll,\n    onOpen: event => {\n      setUrlChat(event.data.uri);\n      setIsOpen(true);\n    }\n  }), /*#__PURE__*/React.createElement(PreviewImage, {\n    isOpen: isOpen,\n    previewImageUrl: urlChat,\n    onCancel: () => setIsOpen(false)\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"input-noti\"\n  }, /*#__PURE__*/React.createElement(Input, {\n    referance: inputRef,\n    placeholder: t(\"notification.typeHere\"),\n    className: \"textInput\",\n    onKeyPress: e => {\n      if (e.key === \"Enter\") {\n        onSubmit(e.target.value);\n      }\n    },\n    onPaste: handlePaste,\n    onChange: onChangeMessage,\n    name: \"content-mess\",\n    onReset: onClear,\n    autoHeight: true,\n    leftButtons: /*#__PURE__*/React.createElement(FileJpgOutlined, {\n      onClick: () => btnFileRef.current.upload.uploader.onClick()\n    }),\n    rightButtons: /*#__PURE__*/React.createElement(Button, {\n      type: \"submit\",\n      text: /*#__PURE__*/React.createElement(SendOutlined, null),\n      onClick: handleSend,\n      title: /*#__PURE__*/React.createElement(SendOutlined, null),\n      backgroundColor: \"#96C9F3\"\n    })\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"thumbs-container\"\n  }, /*#__PURE__*/React.createElement(Upload, {\n    maxCount: 1,\n    ref: btnFileRef,\n    fileList: filesList,\n    itemRender: renderImage,\n    onChange: handleChangeImage\n  })))) : /*#__PURE__*/React.createElement(Empty, null))));\n}\n_s(NotiDetailData, \"p/FDt42ac3BHZO+XJPOXMr5LDLE=\", false, function () {\n  return [useTranslation, useSelector, useParams];\n});\n_c = NotiDetailData;\nNotiDetailData.propTypes = {\n  listChat: PropTypes.object\n};\nexport default NotiDetailData;\nvar _c;\n$RefreshReg$(_c, \"NotiDetailData\");","map":{"version":3,"mappings":"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","names":["React","useRef","useState","Button","MessageList","Input","CloseCircleFilled","FileJpgOutlined","SendOutlined","ReactLinkify","ROLE_USER","notificationApi","authStore","Col","Empty","Row","message","Upload","Image","PropTypes","useTranslation","useSelector","useParams","appendFormData","IMAGE_URL","ChatListData","PreviewImage","NotiDetailData","props","inputRef","btnFileRef","listChat","t","data","params","listRep","setListRep","loading","setLoading","hasMore","setHasMore","contentMess","setContentMess","page","setPage","repActive","setRepActive","newMess","setNewMess","filesList","setImage","urlChat","setUrlChat","isOpen","setIsOpen","LIMIT_PAGE","DISABLE","MAX_LENGTH","MIN_HEIGHT","scrollToBottom","className","allMatchedElements","document","getElementsByClassName","element","scrollTop","scrollHeight","converListRep","dataListRep","result","map","mess","position","type","ADMIN","images","length","title","fullname","user","text","content","date","createdAt","uri","getListRep","item","paging","payload","notificationId","id","userId","res","getNotificationRep","reverse","handleLoadMore","newListRep","limit","concat","error","handleScroll","e","clientHeight","target","openChatRep","sendNewMess","parseInt","receiverId","imagesNoti","formatPayload","sendNewReply","onClear","current","value","onSubmit","trim","messObj","Date","URL","createObjectURL","originFileObj","onChangeMessage","event","slice","handleSend","handleChangeImage","_ref","fileList","focus","handlePaste","clipboardData","window","files","renderImage","_","img","onClick","src","url","alt","name","preview","md","lockable","toBottomHeight","dataSource","onScroll","onOpen","previewImageUrl","onCancel","referance","placeholder","onKeyPress","key","onPaste","onChange","onReset","autoHeight","leftButtons","upload","uploader","rightButtons","backgroundColor","maxCount","ref","itemRender","propTypes","object"],"sources":["/home/huynd/animalwatch_admin/src/pages/notification/NotiDetailData.jsx"],"sourcesContent":["import React, { useRef, useState } from \"react\";\r\nimport { Button, MessageList, Input } from \"react-chat-elements\";\r\nimport {\r\n  CloseCircleFilled,\r\n  FileJpgOutlined,\r\n  SendOutlined,\r\n} from \"@ant-design/icons\";\r\nimport ReactLinkify from \"react-linkify\";\r\n\r\nimport ROLE_USER from \"@common/constant/userRole\";\r\nimport { notificationApi } from \"@services/apis/notification\";\r\nimport { authStore } from \"@store/slices/authSlice\";\r\nimport { Col, Empty, Row, message, Upload, Image } from \"antd\";\r\nimport PropTypes from \"prop-types\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { appendFormData } from \"@common/utils/appendFormData\";\r\nimport { IMAGE_URL } from \"@common/config/endpoint\";\r\nimport ChatListData from \"./ChatListData\";\r\nimport PreviewImage from \"./components/PreviewImage\";\r\n\r\nfunction NotiDetailData(props) {\r\n  const inputRef = useRef(\"\");\r\n  const btnFileRef = useRef();\r\n  const { listChat } = props;\r\n  const { t } = useTranslation();\r\n  const { data } = useSelector(authStore);\r\n  const params = useParams();\r\n  const [listRep, setListRep] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [hasMore, setHasMore] = useState(true);\r\n  const [contentMess, setContentMess] = useState(\"\");\r\n  const [page, setPage] = useState(1);\r\n  const [repActive, setRepActive] = useState(1);\r\n  const [newMess, setNewMess] = useState({});\r\n  const [filesList, setImage] = useState([]);\r\n  const [urlChat, setUrlChat] = useState();\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const LIMIT_PAGE = 20;\r\n  const DISABLE = true;\r\n  const MAX_LENGTH = 200;\r\n  const MIN_HEIGHT = 42;\r\n  const scrollToBottom = (className) => {\r\n    const allMatchedElements = document.getElementsByClassName(className);\r\n    const element = allMatchedElements[0];\r\n    element.scrollTop = element.scrollHeight;\r\n  };\r\n\r\n  const converListRep = (dataListRep) => {\r\n    const result = dataListRep?.map((mess) => {\r\n      return {\r\n        position: mess.type === ROLE_USER.ADMIN ? \"right\" : \"left\",\r\n        type: !mess?.images?.length ? \"text\" : \"photo\",\r\n        title:\r\n          mess.type === ROLE_USER.ADMIN ? data?.fullname : mess.user.fullname,\r\n        text: <ReactLinkify>{mess.content}</ReactLinkify>,\r\n        date: mess.createdAt,\r\n        data: {\r\n          uri: mess?.images && `${IMAGE_URL}${mess?.images[0]}/original.jpg`,\r\n        },\r\n      };\r\n    });\r\n    return result;\r\n  };\r\n\r\n  const getListRep = async (item, paging) => {\r\n    const payload = {\r\n      ...paging,\r\n      notificationId: params.id,\r\n      userId: item.id,\r\n    };\r\n    const res = await notificationApi.getNotificationRep(payload);\r\n    const result = converListRep(res.data);\r\n    setListRep(result.reverse());\r\n    if (paging.page === 1) {\r\n      scrollToBottom(\"rce-mlist\");\r\n    }\r\n    return result;\r\n  };\r\n\r\n  const handleLoadMore = async () => {\r\n    if (!hasMore) return; // Không còn dữ liệu để tải\r\n    setLoading(true);\r\n    try {\r\n      const newListRep = await getListRep(repActive, {\r\n        page,\r\n        limit: LIMIT_PAGE,\r\n      });\r\n      setLoading(false);\r\n      setPage(page + 1);\r\n      setListRep(newListRep.concat(listRep));\r\n      setHasMore(newListRep.length > 0);\r\n    } catch (error) {\r\n      message.error(error);\r\n    }\r\n  };\r\n\r\n  const handleScroll = (e) => {\r\n    const { scrollTop, clientHeight, scrollHeight } = e.target;\r\n    if (scrollTop === 0) {\r\n      handleLoadMore();\r\n    }\r\n  };\r\n\r\n  const openChatRep = (item) => {\r\n    setRepActive(item);\r\n    getListRep(item, { page: 1, limit: LIMIT_PAGE });\r\n    setHasMore(true);\r\n    setPage(2);\r\n  };\r\n\r\n  const sendNewMess = async () => {\r\n    const payload = {\r\n      notificationId: parseInt(params.id, 10),\r\n      content: contentMess,\r\n      receiverId: repActive.id,\r\n      imagesNoti: filesList,\r\n    };\r\n    if (!contentMess) delete payload.content;\r\n\r\n    const formatPayload = appendFormData(payload);\r\n    const result = await notificationApi.sendNewReply(formatPayload);\r\n    setContentMess(\"\");\r\n    scrollToBottom(\"rce-mlist\");\r\n    return result;\r\n  };\r\n\r\n  const onClear = () => {\r\n    setContentMess(\"\");\r\n    setImage([]);\r\n    inputRef.current.value = \"\";\r\n  };\r\n\r\n  const onSubmit = () => {\r\n    // get value from enter input\r\n    if (!contentMess.trim() && !filesList.length) return;\r\n    const messObj = {\r\n      id: repActive.id,\r\n      position: \"right\",\r\n      type: filesList?.length ? \"photo\" : \"text\",\r\n      title: data?.fullname,\r\n      text: <ReactLinkify>{contentMess}</ReactLinkify>,\r\n      date: new Date(),\r\n      data: {\r\n        uri:\r\n          filesList?.length && URL.createObjectURL(filesList[0]?.originFileObj),\r\n      },\r\n    };\r\n    if (!filesList?.length) delete messObj.data;\r\n\r\n    setNewMess(messObj);\r\n    setListRep([...listRep, messObj]);\r\n    sendNewMess();\r\n    onClear();\r\n  };\r\n\r\n  const onChangeMessage = (event) => {\r\n    // because maxlength in Input not working\r\n    event.target.value = event.target.value.slice(0, MAX_LENGTH);\r\n    setContentMess(event.target.value);\r\n  };\r\n\r\n  const handleSend = () => {\r\n    onSubmit();\r\n  };\r\n\r\n  const handleChangeImage = ({ fileList }) => {\r\n    setImage(fileList);\r\n    inputRef.current.focus();\r\n  };\r\n\r\n  const handlePaste = (e) => {\r\n    const clipboardData = e.clipboardData || window.clipboardData;\r\n    if (!clipboardData?.files?.length) return;\r\n\r\n    setImage([\r\n      {\r\n        originFileObj: clipboardData?.files[0],\r\n      },\r\n    ]);\r\n  };\r\n\r\n  const renderImage = (_, img) => {\r\n    return (\r\n      <div className=\"position-relative img-contain thumb\">\r\n        <div className=\"icon-close cursor-pointer\" onClick={() => setImage([])}>\r\n          <CloseCircleFilled />\r\n        </div>\r\n        <Image\r\n          className=\"image\"\r\n          src={img?.url || URL.createObjectURL(img?.originFileObj)}\r\n          alt={img?.name}\r\n          preview\r\n        />\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"chat-gr\">\r\n      <Row className=\"full-width\">\r\n        <Col className=\"chat-list-gr\" md={8}>\r\n          {listChat ? (\r\n            <ChatListData\r\n              openChatRep={openChatRep}\r\n              listChat={listChat}\r\n              newMess={newMess}\r\n            />\r\n          ) : (\r\n            <Empty />\r\n          )}\r\n        </Col>\r\n\r\n        <Col className=\"mess-gr\" md={16}>\r\n          {listRep.length > 0 ? (\r\n            <div>\r\n              <MessageList\r\n                className=\"message-list\"\r\n                lockable\r\n                toBottomHeight=\"100%\"\r\n                dataSource={listRep}\r\n                onScroll={handleScroll}\r\n                onOpen={(event) => {\r\n                  setUrlChat(event.data.uri);\r\n                  setIsOpen(true);\r\n                }}\r\n              />\r\n              <PreviewImage\r\n                isOpen={isOpen}\r\n                previewImageUrl={urlChat}\r\n                onCancel={() => setIsOpen(false)}\r\n              />\r\n              <div className=\"input-noti\">\r\n                <Input\r\n                  referance={inputRef}\r\n                  placeholder={t(\"notification.typeHere\")}\r\n                  className=\"textInput\"\r\n                  onKeyPress={(e) => {\r\n                    if (e.key === \"Enter\") {\r\n                      onSubmit(e.target.value);\r\n                    }\r\n                  }}\r\n                  onPaste={handlePaste}\r\n                  onChange={onChangeMessage}\r\n                  name=\"content-mess\"\r\n                  onReset={onClear}\r\n                  autoHeight\r\n                  leftButtons={\r\n                    <FileJpgOutlined\r\n                      onClick={() =>\r\n                        btnFileRef.current.upload.uploader.onClick()\r\n                      }\r\n                    />\r\n                  }\r\n                  rightButtons={\r\n                    <Button\r\n                      type=\"submit\"\r\n                      text={<SendOutlined />}\r\n                      onClick={handleSend}\r\n                      title={<SendOutlined />}\r\n                      backgroundColor=\"#96C9F3\"\r\n                    />\r\n                  }\r\n                />\r\n                <div className=\"thumbs-container\">\r\n                  <Upload\r\n                    maxCount={1}\r\n                    ref={btnFileRef}\r\n                    fileList={filesList}\r\n                    itemRender={renderImage}\r\n                    onChange={handleChangeImage}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          ) : (\r\n            <Empty />\r\n          )}\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n}\r\n\r\nNotiDetailData.propTypes = {\r\n  listChat: PropTypes.object,\r\n};\r\n\r\nexport default NotiDetailData;\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}