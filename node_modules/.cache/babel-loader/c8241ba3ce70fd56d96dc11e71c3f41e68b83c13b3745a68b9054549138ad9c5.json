{"ast":null,"code":"import axios from \"axios\";\nimport queryString from \"query-string\";\nimport PATH_URL from \"@common/config/pathURL\";\nimport cache from \"@common/utils/cache\";\nimport { BASE_URL } from \"@common/config/endpoint\";\nconst api = axios.create({\n  baseURL: BASE_URL,\n  headers: {\n    \"Content-Type\": \"application/json\"\n  },\n  paramsSerializer: params => queryString.stringify(params)\n});\n\n// Add a request interceptor\napi.interceptors.request.use(config => {\n  // Do something before request is sent\n  const token = cache.get(\"token\");\n  // eslint-disable-next-line no-param-reassign\n  if (token) config.headers.Authorization = `Bearer ${token}`;\n  return config;\n}, error => {\n  // Do something with request error\n  return Promise.reject(error);\n});\n\n// Add a response interceptor\napi.interceptors.response.use(response => {\n  // Any status code that lie within the range of 2xx cause this function to trigger\n  // Do something with response data\n  return response.data;\n}, async error => {\n  const originalRequest = error.config;\n  // eslint-disable-next-line no-underscore-dangle\n  if (error.response.status === 401 && !originalRequest._retry) {\n    // eslint-disable-next-line no-underscore-dangle\n    originalRequest._retry = true;\n    const refreshToken = cache.get(\"refreshToken\");\n    try {\n      const res = await api.post(\"/api/admin/refresh-token\", {\n        refreshToken\n      });\n      cache.set(\"token\", res.accessToken);\n      cache.set(\"refreshToken\", res.refreshToken);\n      return api(originalRequest);\n    } catch (err) {\n      cache.remove(\"token\");\n      cache.remove(\"refreshToken\");\n      cache.remove(\"persist:root\");\n      window.location = PATH_URL.LOGIN;\n    }\n  }\n  return Promise.reject(error);\n});\nexport default api;","map":{"version":3,"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,WAAW,MAAM,cAAc;AAEtC,OAAOC,QAAQ,MAAM,wBAAwB;AAC7C,OAAOC,KAAK,MAAM,qBAAqB;AACvC,SAASC,QAAQ,QAAQ,yBAAyB;AAElD,MAAMC,GAAG,GAAGL,KAAK,CAACM,MAAM,CAAC;EACvBC,OAAO,EAAEH,QAAQ;EACjBI,OAAO,EAAE;IACP,cAAc,EAAE;EAClB,CAAC;EACDC,gBAAgB,EAAGC,MAAM,IAAKT,WAAW,CAACU,SAAS,CAACD,MAAM;AAC5D,CAAC,CAAC;;AAEF;AACAL,GAAG,CAACO,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV;EACA,MAAMC,KAAK,GAAGb,KAAK,CAACc,GAAG,CAAC,OAAO,CAAC;EAChC;EACA,IAAID,KAAK,EAAED,MAAM,CAACP,OAAO,CAACU,aAAa,GAAI,UAASF,KAAM,EAAC;EAC3D,OAAOD,MAAM;AACf,CAAC,EACAI,KAAK,IAAK;EACT;EACA,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CAAC,CACF;;AAED;AACAd,GAAG,CAACO,YAAY,CAACU,QAAQ,CAACR,GAAG,CAC1BQ,QAAQ,IAAK;EACZ;EACA;EACA,OAAOA,QAAQ,CAACC,IAAI;AACtB,CAAC,EACD,MAAOJ,KAAK,IAAK;EACf,MAAMK,eAAe,GAAGL,KAAK,CAACJ,MAAM;EACpC;EACA,IAAII,KAAK,CAACG,QAAQ,CAACG,MAAM,KAAK,GAAG,IAAI,CAACD,eAAe,CAACE,MAAM,EAAE;IAC5D;IACAF,eAAe,CAACE,MAAM,GAAG,IAAI;IAC7B,MAAMC,YAAY,GAAGxB,KAAK,CAACc,GAAG,CAAC,cAAc,CAAC;IAE9C,IAAI;MACF,MAAMW,GAAG,GAAG,MAAMvB,GAAG,CAACwB,IAAI,CAAC,0BAA0B,EAAE;QACrDF;MACF,CAAC,CAAC;MAEFxB,KAAK,CAAC2B,GAAG,CAAC,OAAO,EAAEF,GAAG,CAACG,WAAW,CAAC;MACnC5B,KAAK,CAAC2B,GAAG,CAAC,cAAc,EAAEF,GAAG,CAACD,YAAY,CAAC;MAC3C,OAAOtB,GAAG,CAACmB,eAAe,CAAC;IAC7B,CAAC,CAAC,OAAOQ,GAAG,EAAE;MACZ7B,KAAK,CAAC8B,MAAM,CAAC,OAAO,CAAC;MACrB9B,KAAK,CAAC8B,MAAM,CAAC,cAAc,CAAC;MAC5B9B,KAAK,CAAC8B,MAAM,CAAC,cAAc,CAAC;MAC5BC,MAAM,CAACC,QAAQ,GAAGjC,QAAQ,CAACkC,KAAK;IAClC;EACF;EACA,OAAOhB,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CAAC,CACF;AAED,eAAed,GAAG","names":["axios","queryString","PATH_URL","cache","BASE_URL","api","create","baseURL","headers","paramsSerializer","params","stringify","interceptors","request","use","config","token","get","Authorization","error","Promise","reject","response","data","originalRequest","status","_retry","refreshToken","res","post","set","accessToken","err","remove","window","location","LOGIN"],"sources":["/home/huynd/animalwatch_admin/src/services/apis/baseApi.js"],"sourcesContent":["import axios from \"axios\";\nimport queryString from \"query-string\";\n\nimport PATH_URL from \"@common/config/pathURL\";\nimport cache from \"@common/utils/cache\";\nimport { BASE_URL } from \"@common/config/endpoint\";\n\nconst api = axios.create({\n  baseURL: BASE_URL,\n  headers: {\n    \"Content-Type\": \"application/json\",\n  },\n  paramsSerializer: (params) => queryString.stringify(params),\n});\n\n// Add a request interceptor\napi.interceptors.request.use(\n  (config) => {\n    // Do something before request is sent\n    const token = cache.get(\"token\");\n    // eslint-disable-next-line no-param-reassign\n    if (token) config.headers.Authorization = `Bearer ${token}`;\n    return config;\n  },\n  (error) => {\n    // Do something with request error\n    return Promise.reject(error);\n  },\n);\n\n// Add a response interceptor\napi.interceptors.response.use(\n  (response) => {\n    // Any status code that lie within the range of 2xx cause this function to trigger\n    // Do something with response data\n    return response.data;\n  },\n  async (error) => {\n    const originalRequest = error.config;\n    // eslint-disable-next-line no-underscore-dangle\n    if (error.response.status === 401 && !originalRequest._retry) {\n      // eslint-disable-next-line no-underscore-dangle\n      originalRequest._retry = true;\n      const refreshToken = cache.get(\"refreshToken\");\n\n      try {\n        const res = await api.post(\"/api/admin/refresh-token\", {\n          refreshToken,\n        });\n\n        cache.set(\"token\", res.accessToken);\n        cache.set(\"refreshToken\", res.refreshToken);\n        return api(originalRequest);\n      } catch (err) {\n        cache.remove(\"token\");\n        cache.remove(\"refreshToken\");\n        cache.remove(\"persist:root\");\n        window.location = PATH_URL.LOGIN;\n      }\n    }\n    return Promise.reject(error);\n  },\n);\n\nexport default api;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}