{"ast":null,"code":"var _s = $RefreshSig$();\nimport { Button, Card, Form, Row, message } from \"antd\";\nimport { useForm } from \"antd/es/form/Form\";\nimport React, { useState } from \"react\";\nimport PATH_URL from \"@common/config/pathURL\";\nimport { DEVICE_DATA } from \"@common/constant/masterData\";\nimport { MyComponents } from \"@components/form\";\nimport { versionApi } from \"@services/apis/version\";\nimport { validate } from \"@validate/index\";\nimport { useTranslation } from \"react-i18next\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nfunction VersionForm() {\n  _s();\n  const {\n    t\n  } = useTranslation();\n  const [form] = useForm();\n  const {\n    state\n  } = useLocation();\n  const [loading, setLoading] = useState(false);\n  const navigate = useNavigate();\n  const handleCancel = () => {\n    navigate(PATH_URL.VERSION_MANAGERMENT.INDEX);\n  };\n  const handleFinish = async values => {\n    if (state) {\n      try {\n        setLoading(true);\n        await versionApi.putVersion(state === null || state === void 0 ? void 0 : state.id, {\n          ...values\n        });\n        message.success(t(\"versionManagement.message.editSuccess\"));\n        navigate(PATH_URL.VERSION_MANAGERMENT.INDEX);\n      } catch (error) {\n        message.success(t(\"versionManagement.message.editFail\"));\n      } finally {\n        setLoading(false);\n      }\n    } else {\n      try {\n        setLoading(true);\n        await versionApi.postVersion({\n          ...values\n        });\n        message.success(t(\"versionManagement.message.createSuccess\"));\n        navigate(PATH_URL.VERSION_MANAGERMENT.INDEX);\n      } catch (error) {\n        message.error(t(\"versionManagement.message.createFail\"));\n        message.error(error);\n      } finally {\n        setLoading(false);\n      }\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"course-form form-default\"\n  }, /*#__PURE__*/React.createElement(Row, {\n    align: \"middle\",\n    className: \"full-width header-table\"\n  }, /*#__PURE__*/React.createElement(\"h1\", null, state ? t(\"versionManagement.titleEdit\") : t(\"versionManagement.titleCreate\"))), /*#__PURE__*/React.createElement(Card, null, /*#__PURE__*/React.createElement(Form, {\n    layout: \"vertical\",\n    colon: false,\n    form: form,\n    initialValues: state || {},\n    onFinish: handleFinish\n  }, /*#__PURE__*/React.createElement(MyComponents.TreeSelect, {\n    label: t(\"versionManagement.list.device\"),\n    name: \"device\",\n    isCheckable: false,\n    treeData: DEVICE_DATA,\n    rules: [{\n      required: true\n    }]\n  }), /*#__PURE__*/React.createElement(MyComponents.TextField, {\n    label: t(\"versionManagement.list.version\"),\n    name: \"version\",\n    rules: [{\n      required: true,\n      message: \"\"\n    }, {\n      max: 50,\n      message: t(\"validate.maxCharacter\", {\n        number: 50\n      })\n    }, validate.empty(t(\"managementCourses.validate.notEmpty\", {\n      fieldName: t(\"versionManagement.list.version\")\n    }))]\n  }), /*#__PURE__*/React.createElement(MyComponents.TextField, {\n    label: t(\"versionManagement.list.title\"),\n    name: \"title\",\n    rules: [{\n      required: true,\n      message: \"\"\n    }, {\n      max: 50,\n      message: t(\"validate.maxCharacter\", {\n        number: 50\n      })\n    }, validate.empty(t(\"managementCourses.validate.notEmpty\", {\n      fieldName: t(\"versionManagement.list.title\")\n    }))]\n  }), /*#__PURE__*/React.createElement(MyComponents.TextArea, {\n    label: t(\"versionManagement.list.description\"),\n    name: \"description\",\n    rules: [{\n      required: true,\n      message: \"\"\n    }, {\n      max: 50,\n      message: t(\"validate.maxCharacter\", {\n        number: 50\n      })\n    }, validate.empty(t(\"managementCourses.validate.notEmpty\", {\n      fieldName: t(\"versionManagement.list.description\")\n    }))]\n  }), /*#__PURE__*/React.createElement(Row, {\n    className: \"flex jc-center gap-20 full-width\"\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: \"default\",\n    className: \"fw-600 cancel-btn\",\n    onClick: handleCancel\n  }, t(\"form.btnBack\")), /*#__PURE__*/React.createElement(Button, {\n    loading: loading,\n    disabled: loading,\n    className: \"fw-600 submit-btn\",\n    type: \"primary\",\n    htmlType: \"submit\"\n  }, state ? t(\"form.btnEdit\") : t(\"form.btnCreate\"))))));\n}\n_s(VersionForm, \"H7CuYcwzmO+npPYo+bnyzqEv3YI=\", false, function () {\n  return [useTranslation, useForm, useLocation, useNavigate];\n});\n_c = VersionForm;\nVersionForm.propTypes = {};\nexport default VersionForm;\nvar _c;\n$RefreshReg$(_c, \"VersionForm\");","map":{"version":3,"mappings":"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","names":["Button","Card","Form","Row","message","useForm","React","useState","PATH_URL","DEVICE_DATA","MyComponents","versionApi","validate","useTranslation","useLocation","useNavigate","VersionForm","t","form","state","loading","setLoading","navigate","handleCancel","VERSION_MANAGERMENT","INDEX","handleFinish","values","putVersion","id","success","error","postVersion","className","align","layout","colon","initialValues","onFinish","TreeSelect","label","name","isCheckable","treeData","rules","required","TextField","max","number","empty","fieldName","TextArea","type","onClick","disabled","htmlType","propTypes"],"sources":["/home/huynd/animalwatch_admin/src/pages/manager/version/VersionForm.jsx"],"sourcesContent":["import { Button, Card, Form, Row, message } from \"antd\";\nimport { useForm } from \"antd/es/form/Form\";\nimport React, { useState } from \"react\";\n\nimport PATH_URL from \"@common/config/pathURL\";\nimport { DEVICE_DATA } from \"@common/constant/masterData\";\nimport { MyComponents } from \"@components/form\";\nimport { versionApi } from \"@services/apis/version\";\nimport { validate } from \"@validate/index\";\nimport { useTranslation } from \"react-i18next\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\n\nfunction VersionForm() {\n  const { t } = useTranslation();\n  const [form] = useForm();\n  const { state } = useLocation();\n  const [loading, setLoading] = useState(false);\n  const navigate = useNavigate();\n\n  const handleCancel = () => {\n    navigate(PATH_URL.VERSION_MANAGERMENT.INDEX);\n  };\n\n  const handleFinish = async (values) => {\n    if (state) {\n      try {\n        setLoading(true);\n        await versionApi.putVersion(state?.id, { ...values });\n        message.success(t(\"versionManagement.message.editSuccess\"));\n        navigate(PATH_URL.VERSION_MANAGERMENT.INDEX);\n      } catch (error) {\n        message.success(t(\"versionManagement.message.editFail\"));\n      } finally {\n        setLoading(false);\n      }\n    } else {\n      try {\n        setLoading(true);\n        await versionApi.postVersion({ ...values });\n        message.success(t(\"versionManagement.message.createSuccess\"));\n        navigate(PATH_URL.VERSION_MANAGERMENT.INDEX);\n      } catch (error) {\n        message.error(t(\"versionManagement.message.createFail\"));\n        message.error(error);\n      } finally {\n        setLoading(false);\n      }\n    }\n  };\n\n  return (\n    <div className=\"course-form form-default\">\n      <Row align=\"middle\" className=\"full-width header-table\">\n        <h1>\n          {state\n            ? t(\"versionManagement.titleEdit\")\n            : t(\"versionManagement.titleCreate\")}\n        </h1>\n      </Row>\n      <Card>\n        <Form\n          layout=\"vertical\"\n          colon={false}\n          form={form}\n          initialValues={state || {}}\n          onFinish={handleFinish}\n        >\n          <MyComponents.TreeSelect\n            label={t(\"versionManagement.list.device\")}\n            name=\"device\"\n            isCheckable={false}\n            treeData={DEVICE_DATA}\n            rules={[{ required: true }]}\n          />\n          <MyComponents.TextField\n            label={t(\"versionManagement.list.version\")}\n            name=\"version\"\n            rules={[\n              {\n                required: true,\n                message: \"\",\n              },\n              {\n                max: 50,\n                message: t(\"validate.maxCharacter\", { number: 50 }),\n              },\n              validate.empty(\n                t(\"managementCourses.validate.notEmpty\", {\n                  fieldName: t(\"versionManagement.list.version\"),\n                }),\n              ),\n            ]}\n          />\n          <MyComponents.TextField\n            label={t(\"versionManagement.list.title\")}\n            name=\"title\"\n            rules={[\n              {\n                required: true,\n                message: \"\",\n              },\n              {\n                max: 50,\n                message: t(\"validate.maxCharacter\", { number: 50 }),\n              },\n              validate.empty(\n                t(\"managementCourses.validate.notEmpty\", {\n                  fieldName: t(\"versionManagement.list.title\"),\n                }),\n              ),\n            ]}\n          />\n          <MyComponents.TextArea\n            label={t(\"versionManagement.list.description\")}\n            name=\"description\"\n            rules={[\n              {\n                required: true,\n                message: \"\",\n              },\n              {\n                max: 50,\n                message: t(\"validate.maxCharacter\", { number: 50 }),\n              },\n              validate.empty(\n                t(\"managementCourses.validate.notEmpty\", {\n                  fieldName: t(\"versionManagement.list.description\"),\n                }),\n              ),\n            ]}\n          />\n\n          <Row className=\"flex jc-center gap-20 full-width\">\n            <Button\n              type=\"default\"\n              className=\"fw-600 cancel-btn\"\n              onClick={handleCancel}\n            >\n              {t(\"form.btnBack\")}\n            </Button>\n            <Button\n              loading={loading}\n              disabled={loading}\n              className=\"fw-600 submit-btn\"\n              type=\"primary\"\n              htmlType=\"submit\"\n            >\n              {state ? t(\"form.btnEdit\") : t(\"form.btnCreate\")}\n            </Button>\n          </Row>\n        </Form>\n      </Card>\n    </div>\n  );\n}\n\nVersionForm.propTypes = {};\n\nexport default VersionForm;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}